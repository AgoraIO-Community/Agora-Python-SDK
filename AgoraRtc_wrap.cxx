/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_DIRECTORS
#define SWIG_PYTHON_THREADS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#elif PY_VERSION_HEX >= 0x03000000
  char *newstr = 0;
  str = PyUnicode_AsUTF8String(str);
  if (str) {
    char *cstr;
    Py_ssize_t len;
    if (PyBytes_AsStringAndSize(str, &cstr, &len) != -1) {
      newstr = (char *) malloc(len+1);
      if (newstr)
        memcpy(newstr, cstr, len+1);
    }
    Py_XDECREF(str);
  }
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03030000 || PY_VERSION_HEX < 0x03000000
#  define SWIG_Python_str_DelForPy3(x)
#else
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

// SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user
// interface files check for it.
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    Py_XDECREF(value);
    PyErr_Restore(type, newvalue, traceback);
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03020000
# error "This version of SWIG only supports Python 3 >= 3.2"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
      data->delargs = !(flags & (METH_O));
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        SwigPyObject_acquire(v,args);
      } else {
        SwigPyObject_disown(v,args);
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    return PyDict_SetItem(dict, SWIG_This(), swig_this);
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, "type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        return -1;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifdef __cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard {
    PyThread_type_lock &mutex_;

  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex) {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }

    ~Guard() {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AudioFrameObserver swig_types[0]
#define SWIGTYPE_p_VideoFrameObserver swig_types[1]
#define SWIGTYPE_p_agora__common__APICaseHandler swig_types[2]
#define SWIGTYPE_p_agora__common__AudioPlaybackDeviceManager swig_types[3]
#define SWIGTYPE_p_agora__common__AudioRecordingDeviceManager swig_types[4]
#define SWIGTYPE_p_agora__common__RtcChannelBridge swig_types[5]
#define SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase swig_types[6]
#define SWIGTYPE_p_agora__common__RtcEngineBridge swig_types[7]
#define SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase swig_types[8]
#define SWIGTYPE_p_agora__common__VideoDeviceManager swig_types[9]
#define SWIGTYPE_p_agora__rtc__AudioVolumeInfo swig_types[10]
#define SWIGTYPE_p_agora__rtc__BeautyOptions swig_types[11]
#define SWIGTYPE_p_agora__rtc__CameraCapturerConfiguration swig_types[12]
#define SWIGTYPE_p_agora__rtc__ChannelMediaInfo swig_types[13]
#define SWIGTYPE_p_agora__rtc__ChannelMediaOptions swig_types[14]
#define SWIGTYPE_p_agora__rtc__ChannelMediaRelayConfiguration swig_types[15]
#define SWIGTYPE_p_agora__rtc__IChannel swig_types[16]
#define SWIGTYPE_p_agora__rtc__IChannelEventHandler swig_types[17]
#define SWIGTYPE_p_agora__rtc__IMetadataObserver swig_types[18]
#define SWIGTYPE_p_agora__rtc__IMetadataObserver__METADATA_TYPE swig_types[19]
#define SWIGTYPE_p_agora__rtc__IMetadataObserver__Metadata swig_types[20]
#define SWIGTYPE_p_agora__rtc__IPacketObserver swig_types[21]
#define SWIGTYPE_p_agora__rtc__IRtcEngineEventHandler swig_types[22]
#define SWIGTYPE_p_agora__rtc__InjectStreamConfig swig_types[23]
#define SWIGTYPE_p_agora__rtc__LastmileProbeConfig swig_types[24]
#define SWIGTYPE_p_agora__rtc__LastmileProbeOneWayResult swig_types[25]
#define SWIGTYPE_p_agora__rtc__LastmileProbeResult swig_types[26]
#define SWIGTYPE_p_agora__rtc__LiveStreamAdvancedFeature swig_types[27]
#define SWIGTYPE_p_agora__rtc__LiveTranscoding swig_types[28]
#define SWIGTYPE_p_agora__rtc__LocalAudioStats swig_types[29]
#define SWIGTYPE_p_agora__rtc__LocalVideoStats swig_types[30]
#define SWIGTYPE_p_agora__rtc__Rect swig_types[31]
#define SWIGTYPE_p_agora__rtc__Rectangle swig_types[32]
#define SWIGTYPE_p_agora__rtc__RemoteAudioStats swig_types[33]
#define SWIGTYPE_p_agora__rtc__RemoteVideoStats swig_types[34]
#define SWIGTYPE_p_agora__rtc__RtcImage swig_types[35]
#define SWIGTYPE_p_agora__rtc__RtcStats swig_types[36]
#define SWIGTYPE_p_agora__rtc__ScreenCaptureParameters swig_types[37]
#define SWIGTYPE_p_agora__rtc__TranscodingUser swig_types[38]
#define SWIGTYPE_p_agora__rtc__UserInfo swig_types[39]
#define SWIGTYPE_p_agora__rtc__VideoCanvas swig_types[40]
#define SWIGTYPE_p_agora__rtc__VideoDimensions swig_types[41]
#define SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration swig_types[42]
#define SWIGTYPE_p_agora__rtc__WatermarkOptions swig_types[43]
#define SWIGTYPE_p_agora__util__AutoPtrT_agora__util__IString_t swig_types[44]
#define SWIGTYPE_p_agora__util__IString swig_types[45]
#define SWIGTYPE_p_bool swig_types[46]
#define SWIGTYPE_p_char swig_types[47]
#define SWIGTYPE_p_int swig_types[48]
#define SWIGTYPE_p_long_long swig_types[49]
#define SWIGTYPE_p_p_void swig_types[50]
#define SWIGTYPE_p_short swig_types[51]
#define SWIGTYPE_p_signed_char swig_types[52]
#define SWIGTYPE_p_unsigned_char swig_types[53]
#define SWIGTYPE_p_unsigned_int swig_types[54]
#define SWIGTYPE_p_unsigned_long_long swig_types[55]
#define SWIGTYPE_p_unsigned_short swig_types[56]
#define SWIGTYPE_p_void swig_types[57]
static swig_type_info *swig_types[59];
static swig_module_info swig_module = {swig_types, 58, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _agorartc.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__agorartc

#else
#  define SWIG_init    init_agorartc

#endif
#define SWIG_name    "_agorartc"

#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


    #include "AgoraRtc.h"
    #include "rtc/rtcEngine/RtcEngineBridge.h"
    #include "rtc/callback/rtcEngineCallback/RtcEngineEventHandlerBase.h"
    #include "rtc/rtcChannel/RtcChannelBridge.h"
    #include "rtc/callback/rtcChannnelCallback/RtcChannelEventHandlerBase.h"
    #include "rtc/test/EventTester.h"
    #include "rtc/test/ApiTester.h"
    #include "rtc/deviceManager/audioDeviceManager/AudioPlaybackDeviceManager.h"
    #include "rtc/deviceManager/audioDeviceManager/AudioRecordingDeviceManager.h"
    #include "rtc/deviceManager/videoDeviceManager/VideoDeviceManager.h"


#include <stdint.h>		// Use the C99 official header


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN size_t
SWIG_strnlen(const char* s, size_t maxlen)
{
  const char *p;
  for (p = s; maxlen-- && *p; p++)
    ;
  return p - s;
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(__clang__) && defined(__has_builtin)
#  if __has_builtin(__builtin_isfinite)
#   define SWIG_isfinite(X) (__builtin_isfinite(X))
#  endif
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "AgoraRtc_wrap.h"

SwigDirector_RtcEngineEventHandlerBase::SwigDirector_RtcEngineEventHandlerBase(PyObject *self): agora::common::RtcEngineEventHandlerBase(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((agora::common::RtcEngineEventHandlerBase *)this, this); 
}




SwigDirector_RtcEngineEventHandlerBase::~SwigDirector_RtcEngineEventHandlerBase() {
}

void SwigDirector_RtcEngineEventHandlerBase::onJoinChannelSuccess(char const *channel, agora::rtc::uid_t uid, int elapsed) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_FromCharPtr((const char *)channel);
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(elapsed));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 0;
    const char *const swig_method_name = "onJoinChannelSuccess";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onJoinChannelSuccess");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onJoinChannelSuccess'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onLeaveChannel(agora::rtc::RtcStats const &stats) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&stats), SWIGTYPE_p_agora__rtc__RtcStats,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 1;
    const char *const swig_method_name = "onLeaveChannel";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onLeaveChannel");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onLeaveChannel'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onRejoinChannelSuccess(char const *channel, agora::rtc::uid_t uid, int elapsed) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_FromCharPtr((const char *)channel);
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(elapsed));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 2;
    const char *const swig_method_name = "onRejoinChannelSuccess";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRejoinChannelSuccess");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onRejoinChannelSuccess'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onUserJoined(agora::rtc::uid_t uid, int elapsed) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(elapsed));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 3;
    const char *const swig_method_name = "onUserJoined";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onUserJoined");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onUserJoined'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onClientRoleChanged(agora::rtc::CLIENT_ROLE_TYPE oldRole, agora::rtc::CLIENT_ROLE_TYPE newRole) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(oldRole));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(newRole));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 4;
    const char *const swig_method_name = "onClientRoleChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onClientRoleChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onClientRoleChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onUserOffline(agora::rtc::uid_t uid, agora::rtc::USER_OFFLINE_REASON_TYPE reason) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(reason));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 5;
    const char *const swig_method_name = "onUserOffline";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onUserOffline");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onUserOffline'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onUserMuteAudio(agora::rtc::uid_t uid, bool muted) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_bool(static_cast< bool >(muted));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 6;
    const char *const swig_method_name = "onUserMuteAudio";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onUserMuteAudio");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onUserMuteAudio'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onFirstRemoteVideoDecoded(agora::rtc::uid_t uid, int width, int height, int elapsed) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(width));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(height));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(elapsed));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 7;
    const char *const swig_method_name = "onFirstRemoteVideoDecoded";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onFirstRemoteVideoDecoded");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onFirstRemoteVideoDecoded'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onUserMuteVideo(agora::rtc::uid_t uid, bool muted) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_bool(static_cast< bool >(muted));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 8;
    const char *const swig_method_name = "onUserMuteVideo";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onUserMuteVideo");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onUserMuteVideo'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onAudioRouteChanged(agora::rtc::AUDIO_ROUTE_TYPE routing) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(routing));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 9;
    const char *const swig_method_name = "onAudioRouteChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onAudioRouteChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onAudioRouteChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onConnectionLost() {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 10;
    const char *const swig_method_name = "onConnectionLost";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject args = PyTuple_New(0);
    swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onConnectionLost");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onConnectionLost'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onRequestToken() {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 11;
    const char *const swig_method_name = "onRequestToken";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject args = PyTuple_New(0);
    swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRequestToken");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onRequestToken'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onAudioVolumeIndication(agora::rtc::AudioVolumeInfo const *speakers, unsigned int speakerNumber, int totalVolume) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(speakers), SWIGTYPE_p_agora__rtc__AudioVolumeInfo,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(speakerNumber));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(totalVolume));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 12;
    const char *const swig_method_name = "onAudioVolumeIndication";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onAudioVolumeIndication");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onAudioVolumeIndication'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onWarning(int warn, char const *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(warn));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_FromCharPtr((const char *)msg);
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 13;
    const char *const swig_method_name = "onWarning";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onWarning");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onWarning'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onError(int err, char const *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(err));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_FromCharPtr((const char *)msg);
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 14;
    const char *const swig_method_name = "onError";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onError");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onError'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onRtcStats(agora::rtc::RtcStats const &stats) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&stats), SWIGTYPE_p_agora__rtc__RtcStats,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 15;
    const char *const swig_method_name = "onRtcStats";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRtcStats");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onRtcStats'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onAudioMixingFinished() {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 16;
    const char *const swig_method_name = "onAudioMixingFinished";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject args = PyTuple_New(0);
    swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onAudioMixingFinished");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onAudioMixingFinished'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onVideoSizeChanged(agora::rtc::uid_t uid, int width, int height, int rotation) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(width));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(height));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(rotation));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 17;
    const char *const swig_method_name = "onVideoSizeChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onVideoSizeChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onVideoSizeChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onConnectionInterrupted() {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 18;
    const char *const swig_method_name = "onConnectionInterrupted";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject args = PyTuple_New(0);
    swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onConnectionInterrupted");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onConnectionInterrupted'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onMicrophoneEnabled(bool enabled) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_bool(static_cast< bool >(enabled));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 19;
    const char *const swig_method_name = "onMicrophoneEnabled";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onMicrophoneEnabled");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onMicrophoneEnabled'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onAudioQuality(agora::rtc::uid_t uid, int quality, unsigned short delay, unsigned short lost) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(quality));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(delay));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(lost));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 20;
    const char *const swig_method_name = "onAudioQuality";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onAudioQuality");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onAudioQuality'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onRemoteVideoTransportStats(agora::rtc::uid_t uid, unsigned short delay, unsigned short lost, unsigned short rxKBitRate) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(delay));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(lost));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(rxKBitRate));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 21;
    const char *const swig_method_name = "onRemoteVideoTransportStats";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRemoteVideoTransportStats");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onRemoteVideoTransportStats'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onRemoteAudioTransportStats(agora::rtc::uid_t uid, unsigned short delay, unsigned short lost, unsigned short rxKBitRate) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(delay));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(lost));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(rxKBitRate));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 22;
    const char *const swig_method_name = "onRemoteAudioTransportStats";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRemoteAudioTransportStats");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onRemoteAudioTransportStats'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onStreamInjectedStatus(char const *url, agora::rtc::uid_t uid, int status) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_FromCharPtr((const char *)url);
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(status));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 23;
    const char *const swig_method_name = "onStreamInjectedStatus";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onStreamInjectedStatus");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onStreamInjectedStatus'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onTranscodingUpdated() {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 24;
    const char *const swig_method_name = "onTranscodingUpdated";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject args = PyTuple_New(0);
    swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onTranscodingUpdated");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onTranscodingUpdated'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onStreamUnpublished(char const *url) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_FromCharPtr((const char *)url);
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 25;
    const char *const swig_method_name = "onStreamUnpublished";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onStreamUnpublished");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onStreamUnpublished'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onStreamPublished(char const *url, int error) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_FromCharPtr((const char *)url);
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(error));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 26;
    const char *const swig_method_name = "onStreamPublished";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onStreamPublished");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onStreamPublished'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onAudioDeviceVolumeChanged(agora::rtc::MEDIA_DEVICE_TYPE deviceType, int volume, bool muted) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(deviceType));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(volume));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_bool(static_cast< bool >(muted));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 27;
    const char *const swig_method_name = "onAudioDeviceVolumeChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onAudioDeviceVolumeChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onAudioDeviceVolumeChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onActiveSpeaker(agora::rtc::uid_t uid) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 28;
    const char *const swig_method_name = "onActiveSpeaker";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onActiveSpeaker");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onActiveSpeaker'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onFirstRemoteAudioFrame(agora::rtc::uid_t uid, int elapsed) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(elapsed));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 29;
    const char *const swig_method_name = "onFirstRemoteAudioFrame";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onFirstRemoteAudioFrame");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onFirstRemoteAudioFrame'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onFirstLocalAudioFrame(int elapsed) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(elapsed));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 30;
    const char *const swig_method_name = "onFirstLocalAudioFrame";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onFirstLocalAudioFrame");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onFirstLocalAudioFrame'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onMediaEngineStartCallSuccess() {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 31;
    const char *const swig_method_name = "onMediaEngineStartCallSuccess";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject args = PyTuple_New(0);
    swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onMediaEngineStartCallSuccess");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onMediaEngineStartCallSuccess'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onMediaEngineLoadSuccess() {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 32;
    const char *const swig_method_name = "onMediaEngineLoadSuccess";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject args = PyTuple_New(0);
    swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onMediaEngineLoadSuccess");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onMediaEngineLoadSuccess'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onStreamMessageError(agora::rtc::uid_t uid, int streamId, int code, int missed, int cached) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(streamId));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(code));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(missed));
    swig::SwigVar_PyObject obj4;
    obj4 = SWIG_From_int(static_cast< int >(cached));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 33;
    const char *const swig_method_name = "onStreamMessageError";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onStreamMessageError");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onStreamMessageError'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onStreamMessage(agora::rtc::uid_t uid, int streamId, char const *data, size_t length) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(streamId));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_FromCharPtr((const char *)data);
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_size_t(static_cast< size_t >(length));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 34;
    const char *const swig_method_name = "onStreamMessage";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onStreamMessage");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onStreamMessage'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onConnectionBanned() {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 35;
    const char *const swig_method_name = "onConnectionBanned";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject args = PyTuple_New(0);
    swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onConnectionBanned");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onConnectionBanned'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onLastmileQuality(int quality) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(quality));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 36;
    const char *const swig_method_name = "onLastmileQuality";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onLastmileQuality");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onLastmileQuality'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onVideoStopped() {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 37;
    const char *const swig_method_name = "onVideoStopped";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject args = PyTuple_New(0);
    swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onVideoStopped");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onVideoStopped'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onApiCallExecuted(int err, char const *api, char const *result) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(err));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_FromCharPtr((const char *)api);
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_FromCharPtr((const char *)result);
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 38;
    const char *const swig_method_name = "onApiCallExecuted";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onApiCallExecuted");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onApiCallExecuted'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onTokenPrivilegeWillExpire(char const *token) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_FromCharPtr((const char *)token);
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 39;
    const char *const swig_method_name = "onTokenPrivilegeWillExpire";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onTokenPrivilegeWillExpire");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onTokenPrivilegeWillExpire'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onNetworkQuality(agora::rtc::uid_t uid, int txQuality, int rxQuality) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(txQuality));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(rxQuality));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 40;
    const char *const swig_method_name = "onNetworkQuality";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onNetworkQuality");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onNetworkQuality'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onLocalVideoStats(agora::rtc::LocalVideoStats const &stats) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&stats), SWIGTYPE_p_agora__rtc__LocalVideoStats,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 41;
    const char *const swig_method_name = "onLocalVideoStats";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onLocalVideoStats");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onLocalVideoStats'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onLocalAudioStats(agora::rtc::LocalAudioStats const &stats) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&stats), SWIGTYPE_p_agora__rtc__LocalAudioStats,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 42;
    const char *const swig_method_name = "onLocalAudioStats";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onLocalAudioStats");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onLocalAudioStats'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onRemoteVideoStats(agora::rtc::RemoteVideoStats const &stats) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&stats), SWIGTYPE_p_agora__rtc__RemoteVideoStats,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 43;
    const char *const swig_method_name = "onRemoteVideoStats";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRemoteVideoStats");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onRemoteVideoStats'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onRemoteAudioStats(agora::rtc::RemoteAudioStats const &stats) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&stats), SWIGTYPE_p_agora__rtc__RemoteAudioStats,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 44;
    const char *const swig_method_name = "onRemoteAudioStats";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRemoteAudioStats");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onRemoteAudioStats'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onFirstLocalVideoFrame(int width, int height, int elapsed) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(width));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(height));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(elapsed));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 45;
    const char *const swig_method_name = "onFirstLocalVideoFrame";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onFirstLocalVideoFrame");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onFirstLocalVideoFrame'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onFirstRemoteVideoFrame(agora::rtc::uid_t uid, int width, int height, int elapsed) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(width));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(height));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(elapsed));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 46;
    const char *const swig_method_name = "onFirstRemoteVideoFrame";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onFirstRemoteVideoFrame");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onFirstRemoteVideoFrame'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onUserEnableVideo(agora::rtc::uid_t uid, bool enabled) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_bool(static_cast< bool >(enabled));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 47;
    const char *const swig_method_name = "onUserEnableVideo";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onUserEnableVideo");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onUserEnableVideo'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onAudioDeviceStateChanged(char const *deviceId, int deviceType, int deviceState) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_FromCharPtr((const char *)deviceId);
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(deviceType));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(deviceState));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 48;
    const char *const swig_method_name = "onAudioDeviceStateChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onAudioDeviceStateChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onAudioDeviceStateChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onCameraReady() {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 49;
    const char *const swig_method_name = "onCameraReady";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject args = PyTuple_New(0);
    swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onCameraReady");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onCameraReady'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onCameraFocusAreaChanged(int x, int y, int width, int height) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(x));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(y));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(width));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(height));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 50;
    const char *const swig_method_name = "onCameraFocusAreaChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onCameraFocusAreaChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onCameraFocusAreaChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onCameraExposureAreaChanged(int x, int y, int width, int height) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(x));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(y));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(width));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(height));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 51;
    const char *const swig_method_name = "onCameraExposureAreaChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onCameraExposureAreaChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onCameraExposureAreaChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onRemoteAudioMixingBegin() {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 52;
    const char *const swig_method_name = "onRemoteAudioMixingBegin";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject args = PyTuple_New(0);
    swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRemoteAudioMixingBegin");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onRemoteAudioMixingBegin'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onRemoteAudioMixingEnd() {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 53;
    const char *const swig_method_name = "onRemoteAudioMixingEnd";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject args = PyTuple_New(0);
    swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRemoteAudioMixingEnd");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onRemoteAudioMixingEnd'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onAudioEffectFinished(int soundId) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(soundId));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 54;
    const char *const swig_method_name = "onAudioEffectFinished";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onAudioEffectFinished");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onAudioEffectFinished'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onVideoDeviceStateChanged(char const *deviceId, int deviceType, int deviceState) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_FromCharPtr((const char *)deviceId);
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(deviceType));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(deviceState));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 55;
    const char *const swig_method_name = "onVideoDeviceStateChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onVideoDeviceStateChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onVideoDeviceStateChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onRemoteVideoStateChanged(agora::rtc::uid_t uid, agora::rtc::REMOTE_VIDEO_STATE state, agora::rtc::REMOTE_VIDEO_STATE_REASON reason, int elapsed) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(state));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(reason));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(elapsed));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 56;
    const char *const swig_method_name = "onRemoteVideoStateChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRemoteVideoStateChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onRemoteVideoStateChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onUserEnableLocalVideo(agora::rtc::uid_t uid, bool enabled) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_bool(static_cast< bool >(enabled));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 57;
    const char *const swig_method_name = "onUserEnableLocalVideo";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onUserEnableLocalVideo");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onUserEnableLocalVideo'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onLocalPublishFallbackToAudioOnly(bool isFallbackOrRecover) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_bool(static_cast< bool >(isFallbackOrRecover));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 58;
    const char *const swig_method_name = "onLocalPublishFallbackToAudioOnly";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onLocalPublishFallbackToAudioOnly");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onLocalPublishFallbackToAudioOnly'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onRemoteSubscribeFallbackToAudioOnly(agora::rtc::uid_t uid, bool isFallbackOrRecover) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_bool(static_cast< bool >(isFallbackOrRecover));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 59;
    const char *const swig_method_name = "onRemoteSubscribeFallbackToAudioOnly";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRemoteSubscribeFallbackToAudioOnly");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onRemoteSubscribeFallbackToAudioOnly'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onConnectionStateChanged(agora::rtc::CONNECTION_STATE_TYPE state, agora::rtc::CONNECTION_CHANGED_REASON_TYPE reason) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(state));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(reason));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 60;
    const char *const swig_method_name = "onConnectionStateChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onConnectionStateChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onConnectionStateChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onFirstRemoteAudioDecoded(agora::rtc::uid_t uid, int elapsed) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(elapsed));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 61;
    const char *const swig_method_name = "onFirstRemoteAudioDecoded";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onFirstRemoteAudioDecoded");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onFirstRemoteAudioDecoded'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onLocalVideoStateChanged(agora::rtc::LOCAL_VIDEO_STREAM_STATE localVideoState, agora::rtc::LOCAL_VIDEO_STREAM_ERROR error) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(localVideoState));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(error));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 62;
    const char *const swig_method_name = "onLocalVideoStateChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onLocalVideoStateChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onLocalVideoStateChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onRtmpStreamingStateChanged(char const *url, agora::rtc::RTMP_STREAM_PUBLISH_STATE state, agora::rtc::RTMP_STREAM_PUBLISH_ERROR errCode) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_FromCharPtr((const char *)url);
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(state));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(errCode));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 63;
    const char *const swig_method_name = "onRtmpStreamingStateChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRtmpStreamingStateChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onRtmpStreamingStateChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onNetworkTypeChanged(agora::rtc::NETWORK_TYPE type) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(type));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 64;
    const char *const swig_method_name = "onNetworkTypeChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onNetworkTypeChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onNetworkTypeChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onLastmileProbeResult(agora::rtc::LastmileProbeResult const &result) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&result), SWIGTYPE_p_agora__rtc__LastmileProbeResult,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 65;
    const char *const swig_method_name = "onLastmileProbeResult";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onLastmileProbeResult");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onLastmileProbeResult'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onLocalUserRegistered(agora::rtc::uid_t uid, char const *userAccount) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_FromCharPtr((const char *)userAccount);
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 66;
    const char *const swig_method_name = "onLocalUserRegistered";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onLocalUserRegistered");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onLocalUserRegistered'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onUserInfoUpdated(agora::rtc::uid_t uid, agora::rtc::UserInfo const &info) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&info), SWIGTYPE_p_agora__rtc__UserInfo,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 67;
    const char *const swig_method_name = "onUserInfoUpdated";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onUserInfoUpdated");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onUserInfoUpdated'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onLocalAudioStateChanged(agora::rtc::LOCAL_AUDIO_STREAM_STATE state, agora::rtc::LOCAL_AUDIO_STREAM_ERROR error) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(state));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(error));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 68;
    const char *const swig_method_name = "onLocalAudioStateChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onLocalAudioStateChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onLocalAudioStateChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onRemoteAudioStateChanged(agora::rtc::uid_t uid, agora::rtc::REMOTE_AUDIO_STATE state, agora::rtc::REMOTE_AUDIO_STATE_REASON reason, int elapsed) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(state));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(reason));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(elapsed));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 69;
    const char *const swig_method_name = "onRemoteAudioStateChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRemoteAudioStateChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onRemoteAudioStateChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onChannelMediaRelayStateChanged(agora::rtc::CHANNEL_MEDIA_RELAY_STATE state, agora::rtc::CHANNEL_MEDIA_RELAY_ERROR code) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(state));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(code));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 70;
    const char *const swig_method_name = "onChannelMediaRelayStateChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onChannelMediaRelayStateChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onChannelMediaRelayStateChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onChannelMediaRelayEvent(agora::rtc::CHANNEL_MEDIA_RELAY_EVENT code) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(code));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 71;
    const char *const swig_method_name = "onChannelMediaRelayEvent";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onChannelMediaRelayEvent");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onChannelMediaRelayEvent'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcEngineEventHandlerBase::onTestEnd() {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcEngineEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 72;
    const char *const swig_method_name = "onTestEnd";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject args = PyTuple_New(0);
    swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject *) args, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onTestEnd");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcEngineEventHandlerBase.onTestEnd'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


SwigDirector_RtcChannelEventHandlerBase::SwigDirector_RtcChannelEventHandlerBase(PyObject *self): agora::common::RtcChannelEventHandlerBase(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((agora::common::RtcChannelEventHandlerBase *)this, this); 
}




SwigDirector_RtcChannelEventHandlerBase::~SwigDirector_RtcChannelEventHandlerBase() {
}

void SwigDirector_RtcChannelEventHandlerBase::onChannelWarning(agora::rtc::IChannel *rtcChannel, int warn, char const *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(warn));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_FromCharPtr((const char *)msg);
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 0;
    const char *const swig_method_name = "onChannelWarning";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onChannelWarning");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onChannelWarning'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onChannelError(agora::rtc::IChannel *rtcChannel, int err, char const *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(err));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_FromCharPtr((const char *)msg);
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 1;
    const char *const swig_method_name = "onChannelError";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onChannelError");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onChannelError'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onJoinChannelSuccess(agora::rtc::IChannel *rtcChannel, agora::rtc::uid_t uid, int elapsed) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(elapsed));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 2;
    const char *const swig_method_name = "onJoinChannelSuccess";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onJoinChannelSuccess");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onJoinChannelSuccess'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onRejoinChannelSuccess(agora::rtc::IChannel *rtcChannel, agora::rtc::uid_t uid, int elapsed) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(elapsed));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 3;
    const char *const swig_method_name = "onRejoinChannelSuccess";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRejoinChannelSuccess");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onRejoinChannelSuccess'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onLeaveChannel(agora::rtc::IChannel *rtcChannel, agora::rtc::RtcStats const &stats) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&stats), SWIGTYPE_p_agora__rtc__RtcStats,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 4;
    const char *const swig_method_name = "onLeaveChannel";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onLeaveChannel");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onLeaveChannel'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onClientRoleChanged(agora::rtc::IChannel *rtcChannel, agora::rtc::CLIENT_ROLE_TYPE oldRole, agora::rtc::CLIENT_ROLE_TYPE newRole) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(oldRole));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(newRole));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 5;
    const char *const swig_method_name = "onClientRoleChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onClientRoleChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onClientRoleChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onUserJoined(agora::rtc::IChannel *rtcChannel, agora::rtc::uid_t uid, int elapsed) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(elapsed));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 6;
    const char *const swig_method_name = "onUserJoined";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onUserJoined");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onUserJoined'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onUserOffline(agora::rtc::IChannel *rtcChannel, agora::rtc::uid_t uid, agora::rtc::USER_OFFLINE_REASON_TYPE reason) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(reason));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 7;
    const char *const swig_method_name = "onUserOffline";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onUserOffline");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onUserOffline'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onConnectionLost(agora::rtc::IChannel *rtcChannel) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 8;
    const char *const swig_method_name = "onConnectionLost";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onConnectionLost");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onConnectionLost'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onRequestToken(agora::rtc::IChannel *rtcChannel) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 9;
    const char *const swig_method_name = "onRequestToken";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRequestToken");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onRequestToken'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onTokenPrivilegeWillExpire(agora::rtc::IChannel *rtcChannel, char const *token) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_FromCharPtr((const char *)token);
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 10;
    const char *const swig_method_name = "onTokenPrivilegeWillExpire";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onTokenPrivilegeWillExpire");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onTokenPrivilegeWillExpire'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onRtcStats(agora::rtc::IChannel *rtcChannel, agora::rtc::RtcStats const &stats) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&stats), SWIGTYPE_p_agora__rtc__RtcStats,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 11;
    const char *const swig_method_name = "onRtcStats";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRtcStats");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onRtcStats'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onNetworkQuality(agora::rtc::IChannel *rtcChannel, agora::rtc::uid_t uid, int txQuality, int rxQuality) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(txQuality));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(rxQuality));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 12;
    const char *const swig_method_name = "onNetworkQuality";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onNetworkQuality");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onNetworkQuality'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onRemoteVideoStats(agora::rtc::IChannel *rtcChannel, agora::rtc::RemoteVideoStats const &stats) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&stats), SWIGTYPE_p_agora__rtc__RemoteVideoStats,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 13;
    const char *const swig_method_name = "onRemoteVideoStats";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRemoteVideoStats");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onRemoteVideoStats'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onRemoteAudioStats(agora::rtc::IChannel *rtcChannel, agora::rtc::RemoteAudioStats const &stats) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&stats), SWIGTYPE_p_agora__rtc__RemoteAudioStats,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 14;
    const char *const swig_method_name = "onRemoteAudioStats";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRemoteAudioStats");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onRemoteAudioStats'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onRemoteAudioStateChanged(agora::rtc::IChannel *rtcChannel, agora::rtc::uid_t uid, agora::rtc::REMOTE_AUDIO_STATE state, agora::rtc::REMOTE_AUDIO_STATE_REASON reason, int elapsed) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(state));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(reason));
    swig::SwigVar_PyObject obj4;
    obj4 = SWIG_From_int(static_cast< int >(elapsed));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 15;
    const char *const swig_method_name = "onRemoteAudioStateChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRemoteAudioStateChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onRemoteAudioStateChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onActiveSpeaker(agora::rtc::IChannel *rtcChannel, agora::rtc::uid_t uid) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 16;
    const char *const swig_method_name = "onActiveSpeaker";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onActiveSpeaker");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onActiveSpeaker'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onVideoSizeChanged(agora::rtc::IChannel *rtcChannel, agora::rtc::uid_t uid, int width, int height, int rotation) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(width));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(height));
    swig::SwigVar_PyObject obj4;
    obj4 = SWIG_From_int(static_cast< int >(rotation));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 17;
    const char *const swig_method_name = "onVideoSizeChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onVideoSizeChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onVideoSizeChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onRemoteVideoStateChanged(agora::rtc::IChannel *rtcChannel, agora::rtc::uid_t uid, agora::rtc::REMOTE_VIDEO_STATE state, agora::rtc::REMOTE_VIDEO_STATE_REASON reason, int elapsed) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(state));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(reason));
    swig::SwigVar_PyObject obj4;
    obj4 = SWIG_From_int(static_cast< int >(elapsed));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 18;
    const char *const swig_method_name = "onRemoteVideoStateChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRemoteVideoStateChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onRemoteVideoStateChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onStreamMessage(agora::rtc::IChannel *rtcChannel, agora::rtc::uid_t uid, int streamId, char const *data, size_t length) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(streamId));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_FromCharPtr((const char *)data);
    swig::SwigVar_PyObject obj4;
    obj4 = SWIG_From_size_t(static_cast< size_t >(length));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 19;
    const char *const swig_method_name = "onStreamMessage";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onStreamMessage");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onStreamMessage'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onStreamMessageError(agora::rtc::IChannel *rtcChannel, agora::rtc::uid_t uid, int streamId, int code, int missed, int cached) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(streamId));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(code));
    swig::SwigVar_PyObject obj4;
    obj4 = SWIG_From_int(static_cast< int >(missed));
    swig::SwigVar_PyObject obj5;
    obj5 = SWIG_From_int(static_cast< int >(cached));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 20;
    const char *const swig_method_name = "onStreamMessageError";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onStreamMessageError");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onStreamMessageError'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onChannelMediaRelayStateChanged(agora::rtc::IChannel *rtcChannel, agora::rtc::CHANNEL_MEDIA_RELAY_STATE state, agora::rtc::CHANNEL_MEDIA_RELAY_ERROR code) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(state));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(code));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 21;
    const char *const swig_method_name = "onChannelMediaRelayStateChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onChannelMediaRelayStateChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onChannelMediaRelayStateChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onChannelMediaRelayEvent(agora::rtc::IChannel *rtcChannel, agora::rtc::CHANNEL_MEDIA_RELAY_EVENT code) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(code));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 22;
    const char *const swig_method_name = "onChannelMediaRelayEvent";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onChannelMediaRelayEvent");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onChannelMediaRelayEvent'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onRtmpStreamingStateChanged(agora::rtc::IChannel *rtcChannel, char const *url, agora::rtc::RTMP_STREAM_PUBLISH_STATE state, agora::rtc::RTMP_STREAM_PUBLISH_ERROR errCode) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_FromCharPtr((const char *)url);
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(state));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(errCode));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 23;
    const char *const swig_method_name = "onRtmpStreamingStateChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRtmpStreamingStateChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onRtmpStreamingStateChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onTranscodingUpdated(agora::rtc::IChannel *rtcChannel) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 24;
    const char *const swig_method_name = "onTranscodingUpdated";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onTranscodingUpdated");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onTranscodingUpdated'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onStreamInjectedStatus(agora::rtc::IChannel *rtcChannel, char const *url, agora::rtc::uid_t uid, int status) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_FromCharPtr((const char *)url);
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(status));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 25;
    const char *const swig_method_name = "onStreamInjectedStatus";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onStreamInjectedStatus");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onStreamInjectedStatus'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onLocalPublishFallbackToAudioOnly(agora::rtc::IChannel *rtcChannel, bool isFallbackOrRecover) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_bool(static_cast< bool >(isFallbackOrRecover));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 26;
    const char *const swig_method_name = "onLocalPublishFallbackToAudioOnly";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onLocalPublishFallbackToAudioOnly");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onLocalPublishFallbackToAudioOnly'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onRemoteSubscribeFallbackToAudioOnly(agora::rtc::IChannel *rtcChannel, agora::rtc::uid_t uid, bool isFallbackOrRecover) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_bool(static_cast< bool >(isFallbackOrRecover));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 27;
    const char *const swig_method_name = "onRemoteSubscribeFallbackToAudioOnly";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRemoteSubscribeFallbackToAudioOnly");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onRemoteSubscribeFallbackToAudioOnly'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onConnectionStateChanged(agora::rtc::IChannel *rtcChannel, agora::rtc::CONNECTION_STATE_TYPE state, agora::rtc::CONNECTION_CHANGED_REASON_TYPE reason) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(state));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(reason));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 28;
    const char *const swig_method_name = "onConnectionStateChanged";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onConnectionStateChanged");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onConnectionStateChanged'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_RtcChannelEventHandlerBase::onTestEnd(agora::rtc::IChannel *rtcChannel) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(rtcChannel), SWIGTYPE_p_agora__rtc__IChannel,  0 );
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call RtcChannelEventHandlerBase.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 29;
    const char *const swig_method_name = "onTestEnd";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onTestEnd");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'RtcChannelEventHandlerBase.onTestEnd'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


SwigDirector_VideoFrameObserver::SwigDirector_VideoFrameObserver(PyObject *self): VideoFrameObserver(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((VideoFrameObserver *)this, this); 
}




SwigDirector_VideoFrameObserver::~SwigDirector_VideoFrameObserver() {
}

void SwigDirector_VideoFrameObserver::onCaptureVideoFrame(int width, int height, uint64_t ybuffer, uint64_t ubuffer, uint64_t vbuffer) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(width));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(height));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(ybuffer));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(ubuffer));
    swig::SwigVar_PyObject obj4;
    obj4 = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(vbuffer));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call VideoFrameObserver.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 0;
    const char *const swig_method_name = "onCaptureVideoFrame";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onCaptureVideoFrame");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'VideoFrameObserver.onCaptureVideoFrame'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_VideoFrameObserver::onRenderVideoFrame(unsigned int uid, int width, int height, uint64_t ybuffer, uint64_t ubuffer, uint64_t vbuffer) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(width));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(height));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(ybuffer));
    swig::SwigVar_PyObject obj4;
    obj4 = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(ubuffer));
    swig::SwigVar_PyObject obj5;
    obj5 = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(vbuffer));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call VideoFrameObserver.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 1;
    const char *const swig_method_name = "onRenderVideoFrame";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRenderVideoFrame");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'VideoFrameObserver.onRenderVideoFrame'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


SwigDirector_AudioFrameObserver::SwigDirector_AudioFrameObserver(PyObject *self): AudioFrameObserver(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((AudioFrameObserver *)this, this); 
}




SwigDirector_AudioFrameObserver::~SwigDirector_AudioFrameObserver() {
}

void SwigDirector_AudioFrameObserver::onRecordAudioFrame(unsigned int type1, int samples, int bytesPerSample, int channels, int samplesPerSec, uint64_t buffer1, int64_t renderTimeMs, int avsync_type) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(type1));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(samples));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(bytesPerSample));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(channels));
    swig::SwigVar_PyObject obj4;
    obj4 = SWIG_From_int(static_cast< int >(samplesPerSec));
    swig::SwigVar_PyObject obj5;
    obj5 = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(buffer1));
    swig::SwigVar_PyObject obj6;
    obj6 = SWIG_From_long_SS_long(static_cast< long long >(renderTimeMs));
    swig::SwigVar_PyObject obj7;
    obj7 = SWIG_From_int(static_cast< int >(avsync_type));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call AudioFrameObserver.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 0;
    const char *const swig_method_name = "onRecordAudioFrame";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5,(PyObject *)obj6,(PyObject *)obj7, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onRecordAudioFrame");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5,(PyObject *)obj6,(PyObject *)obj7, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'AudioFrameObserver.onRecordAudioFrame'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_AudioFrameObserver::onPlaybackAudioFrame(unsigned int type1, int samples, int bytesPerSample, int channels, int samplesPerSec, uint64_t buffer1, int64_t renderTimeMs, int avsync_type) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(type1));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(samples));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(bytesPerSample));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(channels));
    swig::SwigVar_PyObject obj4;
    obj4 = SWIG_From_int(static_cast< int >(samplesPerSec));
    swig::SwigVar_PyObject obj5;
    obj5 = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(buffer1));
    swig::SwigVar_PyObject obj6;
    obj6 = SWIG_From_long_SS_long(static_cast< long long >(renderTimeMs));
    swig::SwigVar_PyObject obj7;
    obj7 = SWIG_From_int(static_cast< int >(avsync_type));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call AudioFrameObserver.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 1;
    const char *const swig_method_name = "onPlaybackAudioFrame";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5,(PyObject *)obj6,(PyObject *)obj7, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onPlaybackAudioFrame");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5,(PyObject *)obj6,(PyObject *)obj7, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'AudioFrameObserver.onPlaybackAudioFrame'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_AudioFrameObserver::onMixedAudioFrame(unsigned int type1, int samples, int bytesPerSample, int channels, int samplesPerSec, uint64_t buffer1, int64_t renderTimeMs, int avsync_type) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(type1));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_int(static_cast< int >(samples));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(bytesPerSample));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(channels));
    swig::SwigVar_PyObject obj4;
    obj4 = SWIG_From_int(static_cast< int >(samplesPerSec));
    swig::SwigVar_PyObject obj5;
    obj5 = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(buffer1));
    swig::SwigVar_PyObject obj6;
    obj6 = SWIG_From_long_SS_long(static_cast< long long >(renderTimeMs));
    swig::SwigVar_PyObject obj7;
    obj7 = SWIG_From_int(static_cast< int >(avsync_type));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call AudioFrameObserver.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 2;
    const char *const swig_method_name = "onMixedAudioFrame";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5,(PyObject *)obj6,(PyObject *)obj7, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onMixedAudioFrame");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5,(PyObject *)obj6,(PyObject *)obj7, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'AudioFrameObserver.onMixedAudioFrame'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


void SwigDirector_AudioFrameObserver::onPlaybackAudioFrameBeforeMixing(unsigned int uid, unsigned int type1, int samples, int bytesPerSample, int channels, int samplesPerSec, uint64_t buffer1, int64_t renderTimeMs, int avsync_type) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(uid));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(type1));
    swig::SwigVar_PyObject obj2;
    obj2 = SWIG_From_int(static_cast< int >(samples));
    swig::SwigVar_PyObject obj3;
    obj3 = SWIG_From_int(static_cast< int >(bytesPerSample));
    swig::SwigVar_PyObject obj4;
    obj4 = SWIG_From_int(static_cast< int >(channels));
    swig::SwigVar_PyObject obj5;
    obj5 = SWIG_From_int(static_cast< int >(samplesPerSec));
    swig::SwigVar_PyObject obj6;
    obj6 = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(buffer1));
    swig::SwigVar_PyObject obj7;
    obj7 = SWIG_From_long_SS_long(static_cast< long long >(renderTimeMs));
    swig::SwigVar_PyObject obj8;
    obj8 = SWIG_From_int(static_cast< int >(avsync_type));
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call AudioFrameObserver.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 3;
    const char *const swig_method_name = "onPlaybackAudioFrameBeforeMixing";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5,(PyObject *)obj6,(PyObject *)obj7,(PyObject *)obj8, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("onPlaybackAudioFrameBeforeMixing");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5,(PyObject *)obj6,(PyObject *)obj7,(PyObject *)obj8, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'AudioFrameObserver.onPlaybackAudioFrameBeforeMixing'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


SwigDirector_APICaseHandler::SwigDirector_APICaseHandler(PyObject *self): agora::common::APICaseHandler(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((agora::common::APICaseHandler *)this, this); 
}




void SwigDirector_APICaseHandler::handleAPICase(int apiType, char const *paramter) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  {
    swig::SwigVar_PyObject obj0;
    obj0 = SWIG_From_int(static_cast< int >(apiType));
    swig::SwigVar_PyObject obj1;
    obj1 = SWIG_FromCharPtr((const char *)paramter);
    if (!swig_get_self()) {
      Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call APICaseHandler.__init__.");
    }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
    const size_t swig_method_index = 0;
    const char *const swig_method_name = "handleAPICase";
    PyObject *method = swig_get_method(swig_method_index, swig_method_name);
    swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
    swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("handleAPICase");
    swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
    if (!result) {
      PyObject *error = PyErr_Occurred();
      if (error) {
        Swig::DirectorMethodException::raise("Error detected when calling 'APICaseHandler.handleAPICase'");
      }
    }
  }
  SWIG_PYTHON_THREAD_END_BLOCK;
}


SwigDirector_APICaseHandler::~SwigDirector_APICaseHandler() {
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_IString_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::util::IString *arg1 = (agora::util::IString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__util__IString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IString_empty" "', argument " "1"" of type '" "agora::util::IString const *""'"); 
  }
  arg1 = reinterpret_cast< agora::util::IString * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((agora::util::IString const *)arg1)->empty();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IString_c_str(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::util::IString *arg1 = (agora::util::IString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__util__IString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IString_c_str" "', argument " "1"" of type '" "agora::util::IString *""'"); 
  }
  arg1 = reinterpret_cast< agora::util::IString * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *)(arg1)->c_str();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IString_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::util::IString *arg1 = (agora::util::IString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__util__IString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IString_data" "', argument " "1"" of type '" "agora::util::IString *""'"); 
  }
  arg1 = reinterpret_cast< agora::util::IString * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *)(arg1)->data();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IString_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::util::IString *arg1 = (agora::util::IString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  size_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__util__IString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IString_length" "', argument " "1"" of type '" "agora::util::IString *""'"); 
  }
  arg1 = reinterpret_cast< agora::util::IString * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->length();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IString_release(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::util::IString *arg1 = (agora::util::IString *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__util__IString, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IString_release" "', argument " "1"" of type '" "agora::util::IString *""'"); 
  }
  arg1 = reinterpret_cast< agora::util::IString * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->release();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IString_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__util__IString, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LastmileProbeOneWayResult_packetLossRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeOneWayResult *arg1 = (agora::rtc::LastmileProbeOneWayResult *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LastmileProbeOneWayResult_packetLossRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeOneWayResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeOneWayResult_packetLossRate_set" "', argument " "1"" of type '" "agora::rtc::LastmileProbeOneWayResult *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeOneWayResult * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LastmileProbeOneWayResult_packetLossRate_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->packetLossRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeOneWayResult_packetLossRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeOneWayResult *arg1 = (agora::rtc::LastmileProbeOneWayResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeOneWayResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeOneWayResult_packetLossRate_get" "', argument " "1"" of type '" "agora::rtc::LastmileProbeOneWayResult *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeOneWayResult * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->packetLossRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeOneWayResult_jitter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeOneWayResult *arg1 = (agora::rtc::LastmileProbeOneWayResult *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LastmileProbeOneWayResult_jitter_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeOneWayResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeOneWayResult_jitter_set" "', argument " "1"" of type '" "agora::rtc::LastmileProbeOneWayResult *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeOneWayResult * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LastmileProbeOneWayResult_jitter_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->jitter = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeOneWayResult_jitter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeOneWayResult *arg1 = (agora::rtc::LastmileProbeOneWayResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeOneWayResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeOneWayResult_jitter_get" "', argument " "1"" of type '" "agora::rtc::LastmileProbeOneWayResult *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeOneWayResult * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->jitter);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeOneWayResult_availableBandwidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeOneWayResult *arg1 = (agora::rtc::LastmileProbeOneWayResult *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LastmileProbeOneWayResult_availableBandwidth_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeOneWayResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeOneWayResult_availableBandwidth_set" "', argument " "1"" of type '" "agora::rtc::LastmileProbeOneWayResult *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeOneWayResult * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LastmileProbeOneWayResult_availableBandwidth_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->availableBandwidth = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeOneWayResult_availableBandwidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeOneWayResult *arg1 = (agora::rtc::LastmileProbeOneWayResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeOneWayResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeOneWayResult_availableBandwidth_get" "', argument " "1"" of type '" "agora::rtc::LastmileProbeOneWayResult *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeOneWayResult * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->availableBandwidth);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LastmileProbeOneWayResult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeOneWayResult *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LastmileProbeOneWayResult", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::LastmileProbeOneWayResult *)new agora::rtc::LastmileProbeOneWayResult();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__LastmileProbeOneWayResult, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LastmileProbeOneWayResult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeOneWayResult *arg1 = (agora::rtc::LastmileProbeOneWayResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeOneWayResult, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LastmileProbeOneWayResult" "', argument " "1"" of type '" "agora::rtc::LastmileProbeOneWayResult *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeOneWayResult * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LastmileProbeOneWayResult_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__LastmileProbeOneWayResult, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LastmileProbeOneWayResult_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_LastmileProbeResult_state_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeResult *arg1 = (agora::rtc::LastmileProbeResult *) 0 ;
  agora::rtc::LASTMILE_PROBE_RESULT_STATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LastmileProbeResult_state_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeResult_state_set" "', argument " "1"" of type '" "agora::rtc::LastmileProbeResult *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeResult * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LastmileProbeResult_state_set" "', argument " "2"" of type '" "agora::rtc::LASTMILE_PROBE_RESULT_STATE""'");
  } 
  arg2 = static_cast< agora::rtc::LASTMILE_PROBE_RESULT_STATE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->state = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeResult_state_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeResult *arg1 = (agora::rtc::LastmileProbeResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::LASTMILE_PROBE_RESULT_STATE result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeResult_state_get" "', argument " "1"" of type '" "agora::rtc::LastmileProbeResult *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeResult * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::LASTMILE_PROBE_RESULT_STATE) ((arg1)->state);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeResult_uplinkReport_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeResult *arg1 = (agora::rtc::LastmileProbeResult *) 0 ;
  agora::rtc::LastmileProbeOneWayResult *arg2 = (agora::rtc::LastmileProbeOneWayResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LastmileProbeResult_uplinkReport_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeResult_uplinkReport_set" "', argument " "1"" of type '" "agora::rtc::LastmileProbeResult *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeResult * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__LastmileProbeOneWayResult, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LastmileProbeResult_uplinkReport_set" "', argument " "2"" of type '" "agora::rtc::LastmileProbeOneWayResult *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::LastmileProbeOneWayResult * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->uplinkReport = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeResult_uplinkReport_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeResult *arg1 = (agora::rtc::LastmileProbeResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::LastmileProbeOneWayResult *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeResult_uplinkReport_get" "', argument " "1"" of type '" "agora::rtc::LastmileProbeResult *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeResult * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::LastmileProbeOneWayResult *)& ((arg1)->uplinkReport);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__LastmileProbeOneWayResult, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeResult_downlinkReport_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeResult *arg1 = (agora::rtc::LastmileProbeResult *) 0 ;
  agora::rtc::LastmileProbeOneWayResult *arg2 = (agora::rtc::LastmileProbeOneWayResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LastmileProbeResult_downlinkReport_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeResult_downlinkReport_set" "', argument " "1"" of type '" "agora::rtc::LastmileProbeResult *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeResult * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__LastmileProbeOneWayResult, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LastmileProbeResult_downlinkReport_set" "', argument " "2"" of type '" "agora::rtc::LastmileProbeOneWayResult *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::LastmileProbeOneWayResult * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->downlinkReport = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeResult_downlinkReport_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeResult *arg1 = (agora::rtc::LastmileProbeResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::LastmileProbeOneWayResult *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeResult_downlinkReport_get" "', argument " "1"" of type '" "agora::rtc::LastmileProbeResult *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeResult * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::LastmileProbeOneWayResult *)& ((arg1)->downlinkReport);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__LastmileProbeOneWayResult, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeResult_rtt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeResult *arg1 = (agora::rtc::LastmileProbeResult *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LastmileProbeResult_rtt_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeResult_rtt_set" "', argument " "1"" of type '" "agora::rtc::LastmileProbeResult *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeResult * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LastmileProbeResult_rtt_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->rtt = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeResult_rtt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeResult *arg1 = (agora::rtc::LastmileProbeResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeResult_rtt_get" "', argument " "1"" of type '" "agora::rtc::LastmileProbeResult *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeResult * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->rtt);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LastmileProbeResult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeResult *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LastmileProbeResult", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::LastmileProbeResult *)new agora::rtc::LastmileProbeResult();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__LastmileProbeResult, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LastmileProbeResult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeResult *arg1 = (agora::rtc::LastmileProbeResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeResult, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LastmileProbeResult" "', argument " "1"" of type '" "agora::rtc::LastmileProbeResult *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeResult * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LastmileProbeResult_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__LastmileProbeResult, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LastmileProbeResult_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_LastmileProbeConfig_probeUplink_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeConfig *arg1 = (agora::rtc::LastmileProbeConfig *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LastmileProbeConfig_probeUplink_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeConfig_probeUplink_set" "', argument " "1"" of type '" "agora::rtc::LastmileProbeConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeConfig * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LastmileProbeConfig_probeUplink_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->probeUplink = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeConfig_probeUplink_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeConfig *arg1 = (agora::rtc::LastmileProbeConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeConfig_probeUplink_get" "', argument " "1"" of type '" "agora::rtc::LastmileProbeConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeConfig * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool) ((arg1)->probeUplink);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeConfig_probeDownlink_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeConfig *arg1 = (agora::rtc::LastmileProbeConfig *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LastmileProbeConfig_probeDownlink_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeConfig_probeDownlink_set" "', argument " "1"" of type '" "agora::rtc::LastmileProbeConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeConfig * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LastmileProbeConfig_probeDownlink_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->probeDownlink = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeConfig_probeDownlink_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeConfig *arg1 = (agora::rtc::LastmileProbeConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeConfig_probeDownlink_get" "', argument " "1"" of type '" "agora::rtc::LastmileProbeConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeConfig * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool) ((arg1)->probeDownlink);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeConfig_expectedUplinkBitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeConfig *arg1 = (agora::rtc::LastmileProbeConfig *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LastmileProbeConfig_expectedUplinkBitrate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeConfig_expectedUplinkBitrate_set" "', argument " "1"" of type '" "agora::rtc::LastmileProbeConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeConfig * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LastmileProbeConfig_expectedUplinkBitrate_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->expectedUplinkBitrate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeConfig_expectedUplinkBitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeConfig *arg1 = (agora::rtc::LastmileProbeConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeConfig_expectedUplinkBitrate_get" "', argument " "1"" of type '" "agora::rtc::LastmileProbeConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeConfig * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->expectedUplinkBitrate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeConfig_expectedDownlinkBitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeConfig *arg1 = (agora::rtc::LastmileProbeConfig *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LastmileProbeConfig_expectedDownlinkBitrate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeConfig_expectedDownlinkBitrate_set" "', argument " "1"" of type '" "agora::rtc::LastmileProbeConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeConfig * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LastmileProbeConfig_expectedDownlinkBitrate_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->expectedDownlinkBitrate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LastmileProbeConfig_expectedDownlinkBitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeConfig *arg1 = (agora::rtc::LastmileProbeConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LastmileProbeConfig_expectedDownlinkBitrate_get" "', argument " "1"" of type '" "agora::rtc::LastmileProbeConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeConfig * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->expectedDownlinkBitrate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LastmileProbeConfig(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeConfig *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LastmileProbeConfig", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::LastmileProbeConfig *)new agora::rtc::LastmileProbeConfig();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__LastmileProbeConfig, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LastmileProbeConfig(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LastmileProbeConfig *arg1 = (agora::rtc::LastmileProbeConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LastmileProbeConfig, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LastmileProbeConfig" "', argument " "1"" of type '" "agora::rtc::LastmileProbeConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LastmileProbeConfig * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LastmileProbeConfig_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__LastmileProbeConfig, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LastmileProbeConfig_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_AudioVolumeInfo_uid_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::AudioVolumeInfo *arg1 = (agora::rtc::AudioVolumeInfo *) 0 ;
  agora::rtc::uid_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioVolumeInfo_uid_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__AudioVolumeInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioVolumeInfo_uid_set" "', argument " "1"" of type '" "agora::rtc::AudioVolumeInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::AudioVolumeInfo * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioVolumeInfo_uid_set" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->uid = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioVolumeInfo_uid_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::AudioVolumeInfo *arg1 = (agora::rtc::AudioVolumeInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::uid_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__AudioVolumeInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioVolumeInfo_uid_get" "', argument " "1"" of type '" "agora::rtc::AudioVolumeInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::AudioVolumeInfo * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::uid_t) ((arg1)->uid);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioVolumeInfo_volume_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::AudioVolumeInfo *arg1 = (agora::rtc::AudioVolumeInfo *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioVolumeInfo_volume_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__AudioVolumeInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioVolumeInfo_volume_set" "', argument " "1"" of type '" "agora::rtc::AudioVolumeInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::AudioVolumeInfo * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioVolumeInfo_volume_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->volume = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioVolumeInfo_volume_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::AudioVolumeInfo *arg1 = (agora::rtc::AudioVolumeInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__AudioVolumeInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioVolumeInfo_volume_get" "', argument " "1"" of type '" "agora::rtc::AudioVolumeInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::AudioVolumeInfo * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->volume);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioVolumeInfo_vad_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::AudioVolumeInfo *arg1 = (agora::rtc::AudioVolumeInfo *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioVolumeInfo_vad_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__AudioVolumeInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioVolumeInfo_vad_set" "', argument " "1"" of type '" "agora::rtc::AudioVolumeInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::AudioVolumeInfo * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioVolumeInfo_vad_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->vad = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioVolumeInfo_vad_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::AudioVolumeInfo *arg1 = (agora::rtc::AudioVolumeInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__AudioVolumeInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioVolumeInfo_vad_get" "', argument " "1"" of type '" "agora::rtc::AudioVolumeInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::AudioVolumeInfo * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->vad);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioVolumeInfo_channelId_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::AudioVolumeInfo *arg1 = (agora::rtc::AudioVolumeInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioVolumeInfo_channelId_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__AudioVolumeInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioVolumeInfo_channelId_set" "', argument " "1"" of type '" "agora::rtc::AudioVolumeInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::AudioVolumeInfo * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AudioVolumeInfo_channelId_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
      arg1->channelId = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
    } else {
      arg1->channelId = 0;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioVolumeInfo_channelId_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::AudioVolumeInfo *arg1 = (agora::rtc::AudioVolumeInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__AudioVolumeInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioVolumeInfo_channelId_get" "', argument " "1"" of type '" "agora::rtc::AudioVolumeInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::AudioVolumeInfo * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *) ((arg1)->channelId);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AudioVolumeInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::AudioVolumeInfo *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_AudioVolumeInfo", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::AudioVolumeInfo *)new agora::rtc::AudioVolumeInfo();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__AudioVolumeInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AudioVolumeInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::AudioVolumeInfo *arg1 = (agora::rtc::AudioVolumeInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__AudioVolumeInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AudioVolumeInfo" "', argument " "1"" of type '" "agora::rtc::AudioVolumeInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::AudioVolumeInfo * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AudioVolumeInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__AudioVolumeInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *AudioVolumeInfo_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_RtcStats_duration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_duration_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_duration_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_duration_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->duration = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_duration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_duration_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->duration);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_txBytes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_txBytes_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_txBytes_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_txBytes_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->txBytes = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_txBytes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_txBytes_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->txBytes);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_rxBytes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_rxBytes_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_rxBytes_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_rxBytes_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->rxBytes = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_rxBytes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_rxBytes_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->rxBytes);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_txAudioBytes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_txAudioBytes_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_txAudioBytes_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_txAudioBytes_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->txAudioBytes = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_txAudioBytes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_txAudioBytes_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->txAudioBytes);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_txVideoBytes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_txVideoBytes_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_txVideoBytes_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_txVideoBytes_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->txVideoBytes = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_txVideoBytes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_txVideoBytes_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->txVideoBytes);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_rxAudioBytes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_rxAudioBytes_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_rxAudioBytes_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_rxAudioBytes_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->rxAudioBytes = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_rxAudioBytes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_rxAudioBytes_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->rxAudioBytes);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_rxVideoBytes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_rxVideoBytes_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_rxVideoBytes_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_rxVideoBytes_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->rxVideoBytes = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_rxVideoBytes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_rxVideoBytes_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->rxVideoBytes);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_txKBitRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_txKBitRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_txKBitRate_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_txKBitRate_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->txKBitRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_txKBitRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned short result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_txKBitRate_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned short) ((arg1)->txKBitRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_rxKBitRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_rxKBitRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_rxKBitRate_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_rxKBitRate_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->rxKBitRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_rxKBitRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned short result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_rxKBitRate_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned short) ((arg1)->rxKBitRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_rxAudioKBitRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_rxAudioKBitRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_rxAudioKBitRate_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_rxAudioKBitRate_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->rxAudioKBitRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_rxAudioKBitRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned short result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_rxAudioKBitRate_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned short) ((arg1)->rxAudioKBitRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_txAudioKBitRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_txAudioKBitRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_txAudioKBitRate_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_txAudioKBitRate_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->txAudioKBitRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_txAudioKBitRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned short result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_txAudioKBitRate_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned short) ((arg1)->txAudioKBitRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_rxVideoKBitRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_rxVideoKBitRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_rxVideoKBitRate_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_rxVideoKBitRate_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->rxVideoKBitRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_rxVideoKBitRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned short result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_rxVideoKBitRate_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned short) ((arg1)->rxVideoKBitRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_txVideoKBitRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_txVideoKBitRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_txVideoKBitRate_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_txVideoKBitRate_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->txVideoKBitRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_txVideoKBitRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned short result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_txVideoKBitRate_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned short) ((arg1)->txVideoKBitRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_lastmileDelay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_lastmileDelay_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_lastmileDelay_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_lastmileDelay_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->lastmileDelay = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_lastmileDelay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned short result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_lastmileDelay_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned short) ((arg1)->lastmileDelay);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_txPacketLossRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_txPacketLossRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_txPacketLossRate_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_txPacketLossRate_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->txPacketLossRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_txPacketLossRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned short result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_txPacketLossRate_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned short) ((arg1)->txPacketLossRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_rxPacketLossRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_rxPacketLossRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_rxPacketLossRate_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_rxPacketLossRate_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->rxPacketLossRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_rxPacketLossRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned short result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_rxPacketLossRate_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned short) ((arg1)->rxPacketLossRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_userCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_userCount_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_userCount_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_userCount_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->userCount = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_userCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_userCount_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->userCount);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_cpuAppUsage_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_cpuAppUsage_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_cpuAppUsage_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_cpuAppUsage_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->cpuAppUsage = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_cpuAppUsage_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_cpuAppUsage_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double) ((arg1)->cpuAppUsage);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_cpuTotalUsage_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_cpuTotalUsage_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_cpuTotalUsage_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_cpuTotalUsage_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->cpuTotalUsage = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_cpuTotalUsage_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_cpuTotalUsage_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double) ((arg1)->cpuTotalUsage);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_gatewayRtt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_gatewayRtt_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_gatewayRtt_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_gatewayRtt_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->gatewayRtt = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_gatewayRtt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_gatewayRtt_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->gatewayRtt);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_memoryAppUsageRatio_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_memoryAppUsageRatio_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_memoryAppUsageRatio_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_memoryAppUsageRatio_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->memoryAppUsageRatio = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_memoryAppUsageRatio_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_memoryAppUsageRatio_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double) ((arg1)->memoryAppUsageRatio);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_memoryTotalUsageRatio_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_memoryTotalUsageRatio_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_memoryTotalUsageRatio_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_memoryTotalUsageRatio_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->memoryTotalUsageRatio = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_memoryTotalUsageRatio_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_memoryTotalUsageRatio_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double) ((arg1)->memoryTotalUsageRatio);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_memoryAppUsageInKbytes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcStats_memoryAppUsageInKbytes_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_memoryAppUsageInKbytes_set" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcStats_memoryAppUsageInKbytes_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->memoryAppUsageInKbytes = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcStats_memoryAppUsageInKbytes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcStats_memoryAppUsageInKbytes_get" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->memoryAppUsageInKbytes);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RtcStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_RtcStats", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::RtcStats *)new agora::rtc::RtcStats();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__RtcStats, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RtcStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcStats *arg1 = (agora::rtc::RtcStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcStats, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RtcStats" "', argument " "1"" of type '" "agora::rtc::RtcStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RtcStats_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__RtcStats, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RtcStats_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_LocalVideoStats_sentBitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocalVideoStats_sentBitrate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_sentBitrate_set" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalVideoStats_sentBitrate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->sentBitrate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_sentBitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_sentBitrate_get" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->sentBitrate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_sentFrameRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocalVideoStats_sentFrameRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_sentFrameRate_set" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalVideoStats_sentFrameRate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->sentFrameRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_sentFrameRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_sentFrameRate_get" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->sentFrameRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_encoderOutputFrameRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocalVideoStats_encoderOutputFrameRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_encoderOutputFrameRate_set" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalVideoStats_encoderOutputFrameRate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->encoderOutputFrameRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_encoderOutputFrameRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_encoderOutputFrameRate_get" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->encoderOutputFrameRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_rendererOutputFrameRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocalVideoStats_rendererOutputFrameRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_rendererOutputFrameRate_set" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalVideoStats_rendererOutputFrameRate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->rendererOutputFrameRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_rendererOutputFrameRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_rendererOutputFrameRate_get" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->rendererOutputFrameRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_targetBitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocalVideoStats_targetBitrate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_targetBitrate_set" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalVideoStats_targetBitrate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->targetBitrate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_targetBitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_targetBitrate_get" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->targetBitrate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_targetFrameRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocalVideoStats_targetFrameRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_targetFrameRate_set" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalVideoStats_targetFrameRate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->targetFrameRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_targetFrameRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_targetFrameRate_get" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->targetFrameRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_qualityAdaptIndication_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  agora::rtc::QUALITY_ADAPT_INDICATION arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocalVideoStats_qualityAdaptIndication_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_qualityAdaptIndication_set" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalVideoStats_qualityAdaptIndication_set" "', argument " "2"" of type '" "agora::rtc::QUALITY_ADAPT_INDICATION""'");
  } 
  arg2 = static_cast< agora::rtc::QUALITY_ADAPT_INDICATION >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->qualityAdaptIndication = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_qualityAdaptIndication_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::QUALITY_ADAPT_INDICATION result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_qualityAdaptIndication_get" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::QUALITY_ADAPT_INDICATION) ((arg1)->qualityAdaptIndication);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_encodedBitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocalVideoStats_encodedBitrate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_encodedBitrate_set" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalVideoStats_encodedBitrate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->encodedBitrate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_encodedBitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_encodedBitrate_get" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->encodedBitrate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_encodedFrameWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocalVideoStats_encodedFrameWidth_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_encodedFrameWidth_set" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalVideoStats_encodedFrameWidth_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->encodedFrameWidth = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_encodedFrameWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_encodedFrameWidth_get" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->encodedFrameWidth);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_encodedFrameHeight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocalVideoStats_encodedFrameHeight_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_encodedFrameHeight_set" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalVideoStats_encodedFrameHeight_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->encodedFrameHeight = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_encodedFrameHeight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_encodedFrameHeight_get" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->encodedFrameHeight);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_encodedFrameCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocalVideoStats_encodedFrameCount_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_encodedFrameCount_set" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalVideoStats_encodedFrameCount_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->encodedFrameCount = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_encodedFrameCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_encodedFrameCount_get" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->encodedFrameCount);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_codecType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  agora::rtc::VIDEO_CODEC_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocalVideoStats_codecType_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_codecType_set" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalVideoStats_codecType_set" "', argument " "2"" of type '" "agora::rtc::VIDEO_CODEC_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::VIDEO_CODEC_TYPE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->codecType = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_codecType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::VIDEO_CODEC_TYPE result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_codecType_get" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::VIDEO_CODEC_TYPE) ((arg1)->codecType);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_txPacketLossRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocalVideoStats_txPacketLossRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_txPacketLossRate_set" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalVideoStats_txPacketLossRate_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->txPacketLossRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_txPacketLossRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned short result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_txPacketLossRate_get" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned short) ((arg1)->txPacketLossRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_captureFrameRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocalVideoStats_captureFrameRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_captureFrameRate_set" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalVideoStats_captureFrameRate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->captureFrameRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalVideoStats_captureFrameRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalVideoStats_captureFrameRate_get" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->captureFrameRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocalVideoStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LocalVideoStats", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::LocalVideoStats *)new agora::rtc::LocalVideoStats();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__LocalVideoStats, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LocalVideoStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalVideoStats *arg1 = (agora::rtc::LocalVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalVideoStats, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LocalVideoStats" "', argument " "1"" of type '" "agora::rtc::LocalVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LocalVideoStats_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__LocalVideoStats, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LocalVideoStats_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_RemoteVideoStats_uid_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  agora::rtc::uid_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteVideoStats_uid_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_uid_set" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteVideoStats_uid_set" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->uid = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_uid_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::uid_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_uid_get" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::uid_t) ((arg1)->uid);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_delay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteVideoStats_delay_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_delay_set" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteVideoStats_delay_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->delay = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_delay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_delay_get" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->delay);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_width_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteVideoStats_width_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_width_set" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteVideoStats_width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->width = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_width_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_width_get" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->width);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_height_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteVideoStats_height_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_height_set" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteVideoStats_height_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->height = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_height_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_height_get" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->height);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_receivedBitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteVideoStats_receivedBitrate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_receivedBitrate_set" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteVideoStats_receivedBitrate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->receivedBitrate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_receivedBitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_receivedBitrate_get" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->receivedBitrate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_decoderOutputFrameRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteVideoStats_decoderOutputFrameRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_decoderOutputFrameRate_set" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteVideoStats_decoderOutputFrameRate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->decoderOutputFrameRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_decoderOutputFrameRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_decoderOutputFrameRate_get" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->decoderOutputFrameRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_rendererOutputFrameRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteVideoStats_rendererOutputFrameRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_rendererOutputFrameRate_set" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteVideoStats_rendererOutputFrameRate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->rendererOutputFrameRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_rendererOutputFrameRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_rendererOutputFrameRate_get" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->rendererOutputFrameRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_packetLossRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteVideoStats_packetLossRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_packetLossRate_set" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteVideoStats_packetLossRate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->packetLossRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_packetLossRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_packetLossRate_get" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->packetLossRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_rxStreamType_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  agora::rtc::REMOTE_VIDEO_STREAM_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteVideoStats_rxStreamType_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_rxStreamType_set" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteVideoStats_rxStreamType_set" "', argument " "2"" of type '" "agora::rtc::REMOTE_VIDEO_STREAM_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::REMOTE_VIDEO_STREAM_TYPE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->rxStreamType = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_rxStreamType_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::REMOTE_VIDEO_STREAM_TYPE result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_rxStreamType_get" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::REMOTE_VIDEO_STREAM_TYPE) ((arg1)->rxStreamType);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_totalFrozenTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteVideoStats_totalFrozenTime_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_totalFrozenTime_set" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteVideoStats_totalFrozenTime_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->totalFrozenTime = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_totalFrozenTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_totalFrozenTime_get" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->totalFrozenTime);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_frozenRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteVideoStats_frozenRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_frozenRate_set" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteVideoStats_frozenRate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->frozenRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_frozenRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_frozenRate_get" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->frozenRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_totalActiveTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteVideoStats_totalActiveTime_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_totalActiveTime_set" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteVideoStats_totalActiveTime_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->totalActiveTime = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_totalActiveTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_totalActiveTime_get" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->totalActiveTime);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_publishDuration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteVideoStats_publishDuration_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_publishDuration_set" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteVideoStats_publishDuration_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->publishDuration = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteVideoStats_publishDuration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteVideoStats_publishDuration_get" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->publishDuration);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RemoteVideoStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_RemoteVideoStats", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::RemoteVideoStats *)new agora::rtc::RemoteVideoStats();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__RemoteVideoStats, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RemoteVideoStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteVideoStats *arg1 = (agora::rtc::RemoteVideoStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteVideoStats, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RemoteVideoStats" "', argument " "1"" of type '" "agora::rtc::RemoteVideoStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RemoteVideoStats_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__RemoteVideoStats, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RemoteVideoStats_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_LocalAudioStats_numChannels_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalAudioStats *arg1 = (agora::rtc::LocalAudioStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocalAudioStats_numChannels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalAudioStats_numChannels_set" "', argument " "1"" of type '" "agora::rtc::LocalAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalAudioStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalAudioStats_numChannels_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->numChannels = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalAudioStats_numChannels_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalAudioStats *arg1 = (agora::rtc::LocalAudioStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalAudioStats_numChannels_get" "', argument " "1"" of type '" "agora::rtc::LocalAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalAudioStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->numChannels);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalAudioStats_sentSampleRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalAudioStats *arg1 = (agora::rtc::LocalAudioStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocalAudioStats_sentSampleRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalAudioStats_sentSampleRate_set" "', argument " "1"" of type '" "agora::rtc::LocalAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalAudioStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalAudioStats_sentSampleRate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->sentSampleRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalAudioStats_sentSampleRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalAudioStats *arg1 = (agora::rtc::LocalAudioStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalAudioStats_sentSampleRate_get" "', argument " "1"" of type '" "agora::rtc::LocalAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalAudioStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->sentSampleRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalAudioStats_sentBitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalAudioStats *arg1 = (agora::rtc::LocalAudioStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocalAudioStats_sentBitrate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalAudioStats_sentBitrate_set" "', argument " "1"" of type '" "agora::rtc::LocalAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalAudioStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalAudioStats_sentBitrate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->sentBitrate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalAudioStats_sentBitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalAudioStats *arg1 = (agora::rtc::LocalAudioStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalAudioStats_sentBitrate_get" "', argument " "1"" of type '" "agora::rtc::LocalAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalAudioStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->sentBitrate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalAudioStats_txPacketLossRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalAudioStats *arg1 = (agora::rtc::LocalAudioStats *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocalAudioStats_txPacketLossRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalAudioStats_txPacketLossRate_set" "', argument " "1"" of type '" "agora::rtc::LocalAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalAudioStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocalAudioStats_txPacketLossRate_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->txPacketLossRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalAudioStats_txPacketLossRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalAudioStats *arg1 = (agora::rtc::LocalAudioStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned short result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocalAudioStats_txPacketLossRate_get" "', argument " "1"" of type '" "agora::rtc::LocalAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalAudioStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned short) ((arg1)->txPacketLossRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocalAudioStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalAudioStats *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LocalAudioStats", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::LocalAudioStats *)new agora::rtc::LocalAudioStats();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__LocalAudioStats, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LocalAudioStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LocalAudioStats *arg1 = (agora::rtc::LocalAudioStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LocalAudioStats, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LocalAudioStats" "', argument " "1"" of type '" "agora::rtc::LocalAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LocalAudioStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LocalAudioStats_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__LocalAudioStats, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LocalAudioStats_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_RemoteAudioStats_uid_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  agora::rtc::uid_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteAudioStats_uid_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_uid_set" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteAudioStats_uid_set" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->uid = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_uid_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::uid_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_uid_get" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::uid_t) ((arg1)->uid);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_quality_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteAudioStats_quality_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_quality_set" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteAudioStats_quality_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->quality = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_quality_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_quality_get" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->quality);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_networkTransportDelay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteAudioStats_networkTransportDelay_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_networkTransportDelay_set" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteAudioStats_networkTransportDelay_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->networkTransportDelay = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_networkTransportDelay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_networkTransportDelay_get" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->networkTransportDelay);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_jitterBufferDelay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteAudioStats_jitterBufferDelay_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_jitterBufferDelay_set" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteAudioStats_jitterBufferDelay_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->jitterBufferDelay = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_jitterBufferDelay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_jitterBufferDelay_get" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->jitterBufferDelay);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_audioLossRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteAudioStats_audioLossRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_audioLossRate_set" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteAudioStats_audioLossRate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->audioLossRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_audioLossRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_audioLossRate_get" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->audioLossRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_numChannels_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteAudioStats_numChannels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_numChannels_set" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteAudioStats_numChannels_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->numChannels = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_numChannels_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_numChannels_get" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->numChannels);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_receivedSampleRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteAudioStats_receivedSampleRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_receivedSampleRate_set" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteAudioStats_receivedSampleRate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->receivedSampleRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_receivedSampleRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_receivedSampleRate_get" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->receivedSampleRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_receivedBitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteAudioStats_receivedBitrate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_receivedBitrate_set" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteAudioStats_receivedBitrate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->receivedBitrate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_receivedBitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_receivedBitrate_get" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->receivedBitrate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_totalFrozenTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteAudioStats_totalFrozenTime_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_totalFrozenTime_set" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteAudioStats_totalFrozenTime_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->totalFrozenTime = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_totalFrozenTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_totalFrozenTime_get" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->totalFrozenTime);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_frozenRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteAudioStats_frozenRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_frozenRate_set" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteAudioStats_frozenRate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->frozenRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_frozenRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_frozenRate_get" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->frozenRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_totalActiveTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteAudioStats_totalActiveTime_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_totalActiveTime_set" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteAudioStats_totalActiveTime_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->totalActiveTime = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_totalActiveTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_totalActiveTime_get" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->totalActiveTime);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_publishDuration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RemoteAudioStats_publishDuration_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_publishDuration_set" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RemoteAudioStats_publishDuration_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->publishDuration = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RemoteAudioStats_publishDuration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RemoteAudioStats_publishDuration_get" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->publishDuration);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RemoteAudioStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_RemoteAudioStats", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::RemoteAudioStats *)new agora::rtc::RemoteAudioStats();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__RemoteAudioStats, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RemoteAudioStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RemoteAudioStats *arg1 = (agora::rtc::RemoteAudioStats *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RemoteAudioStats, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RemoteAudioStats" "', argument " "1"" of type '" "agora::rtc::RemoteAudioStats *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RemoteAudioStats_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__RemoteAudioStats, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RemoteAudioStats_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_VideoDimensions_width_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoDimensions *arg1 = (agora::rtc::VideoDimensions *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoDimensions_width_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoDimensions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoDimensions_width_set" "', argument " "1"" of type '" "agora::rtc::VideoDimensions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoDimensions * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VideoDimensions_width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->width = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoDimensions_width_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoDimensions *arg1 = (agora::rtc::VideoDimensions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoDimensions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoDimensions_width_get" "', argument " "1"" of type '" "agora::rtc::VideoDimensions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoDimensions * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->width);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoDimensions_height_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoDimensions *arg1 = (agora::rtc::VideoDimensions *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoDimensions_height_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoDimensions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoDimensions_height_set" "', argument " "1"" of type '" "agora::rtc::VideoDimensions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoDimensions * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VideoDimensions_height_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->height = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoDimensions_height_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoDimensions *arg1 = (agora::rtc::VideoDimensions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoDimensions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoDimensions_height_get" "', argument " "1"" of type '" "agora::rtc::VideoDimensions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoDimensions * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->height);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VideoDimensions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  agora::rtc::VideoDimensions *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::VideoDimensions *)new agora::rtc::VideoDimensions();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__VideoDimensions, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VideoDimensions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  agora::rtc::VideoDimensions *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VideoDimensions" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VideoDimensions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::VideoDimensions *)new agora::rtc::VideoDimensions(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__VideoDimensions, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VideoDimensions(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_VideoDimensions", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_VideoDimensions__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_VideoDimensions__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_VideoDimensions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    agora::rtc::VideoDimensions::VideoDimensions()\n"
    "    agora::rtc::VideoDimensions::VideoDimensions(int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VideoDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoDimensions *arg1 = (agora::rtc::VideoDimensions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoDimensions, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VideoDimensions" "', argument " "1"" of type '" "agora::rtc::VideoDimensions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoDimensions * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VideoDimensions_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__VideoDimensions, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VideoDimensions_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_STANDARD_BITRATE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable STANDARD_BITRATE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_STANDARD_BITRATE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(agora::rtc::STANDARD_BITRATE));
  return pyobj;
}


SWIGINTERN int Swig_var_COMPATIBLE_BITRATE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable COMPATIBLE_BITRATE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_COMPATIBLE_BITRATE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(agora::rtc::COMPATIBLE_BITRATE));
  return pyobj;
}


SWIGINTERN int Swig_var_DEFAULT_MIN_BITRATE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DEFAULT_MIN_BITRATE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DEFAULT_MIN_BITRATE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(agora::rtc::DEFAULT_MIN_BITRATE));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_VideoEncoderConfiguration_dimensions_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoEncoderConfiguration *arg1 = (agora::rtc::VideoEncoderConfiguration *) 0 ;
  agora::rtc::VideoDimensions *arg2 = (agora::rtc::VideoDimensions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoEncoderConfiguration_dimensions_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoEncoderConfiguration_dimensions_set" "', argument " "1"" of type '" "agora::rtc::VideoEncoderConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoEncoderConfiguration * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__VideoDimensions, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VideoEncoderConfiguration_dimensions_set" "', argument " "2"" of type '" "agora::rtc::VideoDimensions *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::VideoDimensions * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->dimensions = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoEncoderConfiguration_dimensions_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoEncoderConfiguration *arg1 = (agora::rtc::VideoEncoderConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::VideoDimensions *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoEncoderConfiguration_dimensions_get" "', argument " "1"" of type '" "agora::rtc::VideoEncoderConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoEncoderConfiguration * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::VideoDimensions *)& ((arg1)->dimensions);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__VideoDimensions, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoEncoderConfiguration_frameRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoEncoderConfiguration *arg1 = (agora::rtc::VideoEncoderConfiguration *) 0 ;
  agora::rtc::FRAME_RATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoEncoderConfiguration_frameRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoEncoderConfiguration_frameRate_set" "', argument " "1"" of type '" "agora::rtc::VideoEncoderConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoEncoderConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VideoEncoderConfiguration_frameRate_set" "', argument " "2"" of type '" "agora::rtc::FRAME_RATE""'");
  } 
  arg2 = static_cast< agora::rtc::FRAME_RATE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->frameRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoEncoderConfiguration_frameRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoEncoderConfiguration *arg1 = (agora::rtc::VideoEncoderConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::FRAME_RATE result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoEncoderConfiguration_frameRate_get" "', argument " "1"" of type '" "agora::rtc::VideoEncoderConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoEncoderConfiguration * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::FRAME_RATE) ((arg1)->frameRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoEncoderConfiguration_minFrameRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoEncoderConfiguration *arg1 = (agora::rtc::VideoEncoderConfiguration *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoEncoderConfiguration_minFrameRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoEncoderConfiguration_minFrameRate_set" "', argument " "1"" of type '" "agora::rtc::VideoEncoderConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoEncoderConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VideoEncoderConfiguration_minFrameRate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->minFrameRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoEncoderConfiguration_minFrameRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoEncoderConfiguration *arg1 = (agora::rtc::VideoEncoderConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoEncoderConfiguration_minFrameRate_get" "', argument " "1"" of type '" "agora::rtc::VideoEncoderConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoEncoderConfiguration * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->minFrameRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoEncoderConfiguration_bitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoEncoderConfiguration *arg1 = (agora::rtc::VideoEncoderConfiguration *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoEncoderConfiguration_bitrate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoEncoderConfiguration_bitrate_set" "', argument " "1"" of type '" "agora::rtc::VideoEncoderConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoEncoderConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VideoEncoderConfiguration_bitrate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->bitrate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoEncoderConfiguration_bitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoEncoderConfiguration *arg1 = (agora::rtc::VideoEncoderConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoEncoderConfiguration_bitrate_get" "', argument " "1"" of type '" "agora::rtc::VideoEncoderConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoEncoderConfiguration * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->bitrate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoEncoderConfiguration_minBitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoEncoderConfiguration *arg1 = (agora::rtc::VideoEncoderConfiguration *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoEncoderConfiguration_minBitrate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoEncoderConfiguration_minBitrate_set" "', argument " "1"" of type '" "agora::rtc::VideoEncoderConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoEncoderConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VideoEncoderConfiguration_minBitrate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->minBitrate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoEncoderConfiguration_minBitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoEncoderConfiguration *arg1 = (agora::rtc::VideoEncoderConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoEncoderConfiguration_minBitrate_get" "', argument " "1"" of type '" "agora::rtc::VideoEncoderConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoEncoderConfiguration * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->minBitrate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoEncoderConfiguration_orientationMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoEncoderConfiguration *arg1 = (agora::rtc::VideoEncoderConfiguration *) 0 ;
  agora::rtc::ORIENTATION_MODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoEncoderConfiguration_orientationMode_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoEncoderConfiguration_orientationMode_set" "', argument " "1"" of type '" "agora::rtc::VideoEncoderConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoEncoderConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VideoEncoderConfiguration_orientationMode_set" "', argument " "2"" of type '" "agora::rtc::ORIENTATION_MODE""'");
  } 
  arg2 = static_cast< agora::rtc::ORIENTATION_MODE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->orientationMode = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoEncoderConfiguration_orientationMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoEncoderConfiguration *arg1 = (agora::rtc::VideoEncoderConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::ORIENTATION_MODE result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoEncoderConfiguration_orientationMode_get" "', argument " "1"" of type '" "agora::rtc::VideoEncoderConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoEncoderConfiguration * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::ORIENTATION_MODE) ((arg1)->orientationMode);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoEncoderConfiguration_degradationPreference_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoEncoderConfiguration *arg1 = (agora::rtc::VideoEncoderConfiguration *) 0 ;
  agora::rtc::DEGRADATION_PREFERENCE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoEncoderConfiguration_degradationPreference_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoEncoderConfiguration_degradationPreference_set" "', argument " "1"" of type '" "agora::rtc::VideoEncoderConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoEncoderConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VideoEncoderConfiguration_degradationPreference_set" "', argument " "2"" of type '" "agora::rtc::DEGRADATION_PREFERENCE""'");
  } 
  arg2 = static_cast< agora::rtc::DEGRADATION_PREFERENCE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->degradationPreference = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoEncoderConfiguration_degradationPreference_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoEncoderConfiguration *arg1 = (agora::rtc::VideoEncoderConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::DEGRADATION_PREFERENCE result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoEncoderConfiguration_degradationPreference_get" "', argument " "1"" of type '" "agora::rtc::VideoEncoderConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoEncoderConfiguration * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::DEGRADATION_PREFERENCE) ((arg1)->degradationPreference);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoEncoderConfiguration_mirrorMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoEncoderConfiguration *arg1 = (agora::rtc::VideoEncoderConfiguration *) 0 ;
  agora::rtc::VIDEO_MIRROR_MODE_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoEncoderConfiguration_mirrorMode_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoEncoderConfiguration_mirrorMode_set" "', argument " "1"" of type '" "agora::rtc::VideoEncoderConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoEncoderConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VideoEncoderConfiguration_mirrorMode_set" "', argument " "2"" of type '" "agora::rtc::VIDEO_MIRROR_MODE_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::VIDEO_MIRROR_MODE_TYPE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->mirrorMode = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoEncoderConfiguration_mirrorMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoEncoderConfiguration *arg1 = (agora::rtc::VideoEncoderConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::VIDEO_MIRROR_MODE_TYPE result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoEncoderConfiguration_mirrorMode_get" "', argument " "1"" of type '" "agora::rtc::VideoEncoderConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoEncoderConfiguration * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::VIDEO_MIRROR_MODE_TYPE) ((arg1)->mirrorMode);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VideoEncoderConfiguration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::rtc::VideoDimensions *arg1 = 0 ;
  agora::rtc::FRAME_RATE arg2 ;
  int arg3 ;
  agora::rtc::ORIENTATION_MODE arg4 ;
  agora::rtc::VIDEO_MIRROR_MODE_TYPE arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  agora::rtc::VideoEncoderConfiguration *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_agora__rtc__VideoDimensions,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VideoEncoderConfiguration" "', argument " "1"" of type '" "agora::rtc::VideoDimensions const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VideoEncoderConfiguration" "', argument " "1"" of type '" "agora::rtc::VideoDimensions const &""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoDimensions * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VideoEncoderConfiguration" "', argument " "2"" of type '" "agora::rtc::FRAME_RATE""'");
  } 
  arg2 = static_cast< agora::rtc::FRAME_RATE >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VideoEncoderConfiguration" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VideoEncoderConfiguration" "', argument " "4"" of type '" "agora::rtc::ORIENTATION_MODE""'");
  } 
  arg4 = static_cast< agora::rtc::ORIENTATION_MODE >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_VideoEncoderConfiguration" "', argument " "5"" of type '" "agora::rtc::VIDEO_MIRROR_MODE_TYPE""'");
  } 
  arg5 = static_cast< agora::rtc::VIDEO_MIRROR_MODE_TYPE >(val5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::VideoEncoderConfiguration *)new agora::rtc::VideoEncoderConfiguration((agora::rtc::VideoDimensions const &)*arg1,arg2,arg3,arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VideoEncoderConfiguration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::rtc::VideoDimensions *arg1 = 0 ;
  agora::rtc::FRAME_RATE arg2 ;
  int arg3 ;
  agora::rtc::ORIENTATION_MODE arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  agora::rtc::VideoEncoderConfiguration *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_agora__rtc__VideoDimensions,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VideoEncoderConfiguration" "', argument " "1"" of type '" "agora::rtc::VideoDimensions const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VideoEncoderConfiguration" "', argument " "1"" of type '" "agora::rtc::VideoDimensions const &""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoDimensions * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VideoEncoderConfiguration" "', argument " "2"" of type '" "agora::rtc::FRAME_RATE""'");
  } 
  arg2 = static_cast< agora::rtc::FRAME_RATE >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VideoEncoderConfiguration" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VideoEncoderConfiguration" "', argument " "4"" of type '" "agora::rtc::ORIENTATION_MODE""'");
  } 
  arg4 = static_cast< agora::rtc::ORIENTATION_MODE >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::VideoEncoderConfiguration *)new agora::rtc::VideoEncoderConfiguration((agora::rtc::VideoDimensions const &)*arg1,arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VideoEncoderConfiguration__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  agora::rtc::FRAME_RATE arg3 ;
  int arg4 ;
  agora::rtc::ORIENTATION_MODE arg5 ;
  agora::rtc::VIDEO_MIRROR_MODE_TYPE arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  agora::rtc::VideoEncoderConfiguration *result = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VideoEncoderConfiguration" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VideoEncoderConfiguration" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VideoEncoderConfiguration" "', argument " "3"" of type '" "agora::rtc::FRAME_RATE""'");
  } 
  arg3 = static_cast< agora::rtc::FRAME_RATE >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VideoEncoderConfiguration" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_VideoEncoderConfiguration" "', argument " "5"" of type '" "agora::rtc::ORIENTATION_MODE""'");
  } 
  arg5 = static_cast< agora::rtc::ORIENTATION_MODE >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_VideoEncoderConfiguration" "', argument " "6"" of type '" "agora::rtc::VIDEO_MIRROR_MODE_TYPE""'");
  } 
  arg6 = static_cast< agora::rtc::VIDEO_MIRROR_MODE_TYPE >(val6);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::VideoEncoderConfiguration *)new agora::rtc::VideoEncoderConfiguration(arg1,arg2,arg3,arg4,arg5,arg6);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VideoEncoderConfiguration__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  agora::rtc::FRAME_RATE arg3 ;
  int arg4 ;
  agora::rtc::ORIENTATION_MODE arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  agora::rtc::VideoEncoderConfiguration *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VideoEncoderConfiguration" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VideoEncoderConfiguration" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VideoEncoderConfiguration" "', argument " "3"" of type '" "agora::rtc::FRAME_RATE""'");
  } 
  arg3 = static_cast< agora::rtc::FRAME_RATE >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VideoEncoderConfiguration" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_VideoEncoderConfiguration" "', argument " "5"" of type '" "agora::rtc::ORIENTATION_MODE""'");
  } 
  arg5 = static_cast< agora::rtc::ORIENTATION_MODE >(val5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::VideoEncoderConfiguration *)new agora::rtc::VideoEncoderConfiguration(arg1,arg2,arg3,arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VideoEncoderConfiguration__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  agora::rtc::VideoEncoderConfiguration *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::VideoEncoderConfiguration *)new agora::rtc::VideoEncoderConfiguration();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VideoEncoderConfiguration(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_VideoEncoderConfiguration", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_VideoEncoderConfiguration__SWIG_4(self, argc, argv);
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_agora__rtc__VideoDimensions, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_VideoEncoderConfiguration__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_agora__rtc__VideoDimensions, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_VideoEncoderConfiguration__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_VideoEncoderConfiguration__SWIG_3(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_VideoEncoderConfiguration__SWIG_2(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_VideoEncoderConfiguration'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    agora::rtc::VideoEncoderConfiguration::VideoEncoderConfiguration(agora::rtc::VideoDimensions const &,agora::rtc::FRAME_RATE,int,agora::rtc::ORIENTATION_MODE,agora::rtc::VIDEO_MIRROR_MODE_TYPE)\n"
    "    agora::rtc::VideoEncoderConfiguration::VideoEncoderConfiguration(agora::rtc::VideoDimensions const &,agora::rtc::FRAME_RATE,int,agora::rtc::ORIENTATION_MODE)\n"
    "    agora::rtc::VideoEncoderConfiguration::VideoEncoderConfiguration(int,int,agora::rtc::FRAME_RATE,int,agora::rtc::ORIENTATION_MODE,agora::rtc::VIDEO_MIRROR_MODE_TYPE)\n"
    "    agora::rtc::VideoEncoderConfiguration::VideoEncoderConfiguration(int,int,agora::rtc::FRAME_RATE,int,agora::rtc::ORIENTATION_MODE)\n"
    "    agora::rtc::VideoEncoderConfiguration::VideoEncoderConfiguration()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VideoEncoderConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoEncoderConfiguration *arg1 = (agora::rtc::VideoEncoderConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VideoEncoderConfiguration" "', argument " "1"" of type '" "agora::rtc::VideoEncoderConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoEncoderConfiguration * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VideoEncoderConfiguration_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VideoEncoderConfiguration_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_TranscodingUser_uid_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::TranscodingUser *arg1 = (agora::rtc::TranscodingUser *) 0 ;
  agora::rtc::uid_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TranscodingUser_uid_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__TranscodingUser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranscodingUser_uid_set" "', argument " "1"" of type '" "agora::rtc::TranscodingUser *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::TranscodingUser * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TranscodingUser_uid_set" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->uid = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TranscodingUser_uid_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::TranscodingUser *arg1 = (agora::rtc::TranscodingUser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::uid_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__TranscodingUser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranscodingUser_uid_get" "', argument " "1"" of type '" "agora::rtc::TranscodingUser *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::TranscodingUser * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::uid_t) ((arg1)->uid);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TranscodingUser_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::TranscodingUser *arg1 = (agora::rtc::TranscodingUser *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TranscodingUser_x_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__TranscodingUser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranscodingUser_x_set" "', argument " "1"" of type '" "agora::rtc::TranscodingUser *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::TranscodingUser * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TranscodingUser_x_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->x = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TranscodingUser_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::TranscodingUser *arg1 = (agora::rtc::TranscodingUser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__TranscodingUser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranscodingUser_x_get" "', argument " "1"" of type '" "agora::rtc::TranscodingUser *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::TranscodingUser * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->x);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TranscodingUser_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::TranscodingUser *arg1 = (agora::rtc::TranscodingUser *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TranscodingUser_y_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__TranscodingUser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranscodingUser_y_set" "', argument " "1"" of type '" "agora::rtc::TranscodingUser *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::TranscodingUser * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TranscodingUser_y_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->y = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TranscodingUser_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::TranscodingUser *arg1 = (agora::rtc::TranscodingUser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__TranscodingUser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranscodingUser_y_get" "', argument " "1"" of type '" "agora::rtc::TranscodingUser *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::TranscodingUser * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->y);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TranscodingUser_width_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::TranscodingUser *arg1 = (agora::rtc::TranscodingUser *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TranscodingUser_width_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__TranscodingUser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranscodingUser_width_set" "', argument " "1"" of type '" "agora::rtc::TranscodingUser *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::TranscodingUser * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TranscodingUser_width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->width = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TranscodingUser_width_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::TranscodingUser *arg1 = (agora::rtc::TranscodingUser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__TranscodingUser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranscodingUser_width_get" "', argument " "1"" of type '" "agora::rtc::TranscodingUser *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::TranscodingUser * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->width);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TranscodingUser_height_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::TranscodingUser *arg1 = (agora::rtc::TranscodingUser *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TranscodingUser_height_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__TranscodingUser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranscodingUser_height_set" "', argument " "1"" of type '" "agora::rtc::TranscodingUser *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::TranscodingUser * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TranscodingUser_height_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->height = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TranscodingUser_height_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::TranscodingUser *arg1 = (agora::rtc::TranscodingUser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__TranscodingUser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranscodingUser_height_get" "', argument " "1"" of type '" "agora::rtc::TranscodingUser *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::TranscodingUser * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->height);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TranscodingUser_zOrder_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::TranscodingUser *arg1 = (agora::rtc::TranscodingUser *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TranscodingUser_zOrder_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__TranscodingUser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranscodingUser_zOrder_set" "', argument " "1"" of type '" "agora::rtc::TranscodingUser *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::TranscodingUser * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TranscodingUser_zOrder_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->zOrder = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TranscodingUser_zOrder_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::TranscodingUser *arg1 = (agora::rtc::TranscodingUser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__TranscodingUser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranscodingUser_zOrder_get" "', argument " "1"" of type '" "agora::rtc::TranscodingUser *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::TranscodingUser * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->zOrder);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TranscodingUser_alpha_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::TranscodingUser *arg1 = (agora::rtc::TranscodingUser *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TranscodingUser_alpha_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__TranscodingUser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranscodingUser_alpha_set" "', argument " "1"" of type '" "agora::rtc::TranscodingUser *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::TranscodingUser * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TranscodingUser_alpha_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->alpha = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TranscodingUser_alpha_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::TranscodingUser *arg1 = (agora::rtc::TranscodingUser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__TranscodingUser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranscodingUser_alpha_get" "', argument " "1"" of type '" "agora::rtc::TranscodingUser *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::TranscodingUser * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double) ((arg1)->alpha);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TranscodingUser_audioChannel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::TranscodingUser *arg1 = (agora::rtc::TranscodingUser *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TranscodingUser_audioChannel_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__TranscodingUser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranscodingUser_audioChannel_set" "', argument " "1"" of type '" "agora::rtc::TranscodingUser *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::TranscodingUser * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TranscodingUser_audioChannel_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->audioChannel = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TranscodingUser_audioChannel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::TranscodingUser *arg1 = (agora::rtc::TranscodingUser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__TranscodingUser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TranscodingUser_audioChannel_get" "', argument " "1"" of type '" "agora::rtc::TranscodingUser *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::TranscodingUser * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->audioChannel);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TranscodingUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::TranscodingUser *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_TranscodingUser", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::TranscodingUser *)new agora::rtc::TranscodingUser();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__TranscodingUser, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TranscodingUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::TranscodingUser *arg1 = (agora::rtc::TranscodingUser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__TranscodingUser, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TranscodingUser" "', argument " "1"" of type '" "agora::rtc::TranscodingUser *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::TranscodingUser * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TranscodingUser_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__TranscodingUser, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TranscodingUser_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RtcImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcImage *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_RtcImage", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::RtcImage *)new agora::rtc::RtcImage();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__RtcImage, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcImage_url_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcImage *arg1 = (agora::rtc::RtcImage *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcImage_url_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcImage_url_set" "', argument " "1"" of type '" "agora::rtc::RtcImage *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcImage * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcImage_url_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
      arg1->url = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
    } else {
      arg1->url = 0;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcImage_url_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcImage *arg1 = (agora::rtc::RtcImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcImage_url_get" "', argument " "1"" of type '" "agora::rtc::RtcImage *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcImage * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *) ((arg1)->url);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcImage_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcImage *arg1 = (agora::rtc::RtcImage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcImage_x_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcImage_x_set" "', argument " "1"" of type '" "agora::rtc::RtcImage *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcImage * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcImage_x_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->x = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcImage_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcImage *arg1 = (agora::rtc::RtcImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcImage_x_get" "', argument " "1"" of type '" "agora::rtc::RtcImage *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcImage * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->x);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcImage_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcImage *arg1 = (agora::rtc::RtcImage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcImage_y_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcImage_y_set" "', argument " "1"" of type '" "agora::rtc::RtcImage *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcImage * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcImage_y_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->y = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcImage_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcImage *arg1 = (agora::rtc::RtcImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcImage_y_get" "', argument " "1"" of type '" "agora::rtc::RtcImage *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcImage * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->y);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcImage_width_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcImage *arg1 = (agora::rtc::RtcImage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcImage_width_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcImage_width_set" "', argument " "1"" of type '" "agora::rtc::RtcImage *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcImage * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcImage_width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->width = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcImage_width_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcImage *arg1 = (agora::rtc::RtcImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcImage_width_get" "', argument " "1"" of type '" "agora::rtc::RtcImage *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcImage * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->width);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcImage_height_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcImage *arg1 = (agora::rtc::RtcImage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcImage_height_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcImage_height_set" "', argument " "1"" of type '" "agora::rtc::RtcImage *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcImage * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcImage_height_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->height = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcImage_height_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcImage *arg1 = (agora::rtc::RtcImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcImage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcImage_height_get" "', argument " "1"" of type '" "agora::rtc::RtcImage *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcImage * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->height);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RtcImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::RtcImage *arg1 = (agora::rtc::RtcImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__RtcImage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RtcImage" "', argument " "1"" of type '" "agora::rtc::RtcImage *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::RtcImage * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RtcImage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__RtcImage, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RtcImage_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LiveStreamAdvancedFeature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveStreamAdvancedFeature *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LiveStreamAdvancedFeature", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::LiveStreamAdvancedFeature *)new agora::rtc::LiveStreamAdvancedFeature();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__LiveStreamAdvancedFeature, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveStreamAdvancedFeature_LBHQ_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveStreamAdvancedFeature *arg1 = (agora::rtc::LiveStreamAdvancedFeature *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveStreamAdvancedFeature_LBHQ_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveStreamAdvancedFeature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveStreamAdvancedFeature_LBHQ_set" "', argument " "1"" of type '" "agora::rtc::LiveStreamAdvancedFeature *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveStreamAdvancedFeature * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveStreamAdvancedFeature_LBHQ_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
      arg1->LBHQ = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
    } else {
      arg1->LBHQ = 0;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveStreamAdvancedFeature_LBHQ_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveStreamAdvancedFeature *arg1 = (agora::rtc::LiveStreamAdvancedFeature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveStreamAdvancedFeature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveStreamAdvancedFeature_LBHQ_get" "', argument " "1"" of type '" "agora::rtc::LiveStreamAdvancedFeature *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveStreamAdvancedFeature * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *) ((arg1)->LBHQ);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveStreamAdvancedFeature_VEO_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveStreamAdvancedFeature *arg1 = (agora::rtc::LiveStreamAdvancedFeature *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveStreamAdvancedFeature_VEO_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveStreamAdvancedFeature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveStreamAdvancedFeature_VEO_set" "', argument " "1"" of type '" "agora::rtc::LiveStreamAdvancedFeature *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveStreamAdvancedFeature * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveStreamAdvancedFeature_VEO_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
      arg1->VEO = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
    } else {
      arg1->VEO = 0;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveStreamAdvancedFeature_VEO_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveStreamAdvancedFeature *arg1 = (agora::rtc::LiveStreamAdvancedFeature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveStreamAdvancedFeature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveStreamAdvancedFeature_VEO_get" "', argument " "1"" of type '" "agora::rtc::LiveStreamAdvancedFeature *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveStreamAdvancedFeature * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *) ((arg1)->VEO);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveStreamAdvancedFeature_featureName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveStreamAdvancedFeature *arg1 = (agora::rtc::LiveStreamAdvancedFeature *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveStreamAdvancedFeature_featureName_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveStreamAdvancedFeature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveStreamAdvancedFeature_featureName_set" "', argument " "1"" of type '" "agora::rtc::LiveStreamAdvancedFeature *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveStreamAdvancedFeature * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveStreamAdvancedFeature_featureName_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
      arg1->featureName = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
    } else {
      arg1->featureName = 0;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveStreamAdvancedFeature_featureName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveStreamAdvancedFeature *arg1 = (agora::rtc::LiveStreamAdvancedFeature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveStreamAdvancedFeature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveStreamAdvancedFeature_featureName_get" "', argument " "1"" of type '" "agora::rtc::LiveStreamAdvancedFeature *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveStreamAdvancedFeature * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *) ((arg1)->featureName);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveStreamAdvancedFeature_opened_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveStreamAdvancedFeature *arg1 = (agora::rtc::LiveStreamAdvancedFeature *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveStreamAdvancedFeature_opened_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveStreamAdvancedFeature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveStreamAdvancedFeature_opened_set" "', argument " "1"" of type '" "agora::rtc::LiveStreamAdvancedFeature *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveStreamAdvancedFeature * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LiveStreamAdvancedFeature_opened_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->opened = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveStreamAdvancedFeature_opened_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveStreamAdvancedFeature *arg1 = (agora::rtc::LiveStreamAdvancedFeature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveStreamAdvancedFeature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveStreamAdvancedFeature_opened_get" "', argument " "1"" of type '" "agora::rtc::LiveStreamAdvancedFeature *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveStreamAdvancedFeature * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool) ((arg1)->opened);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LiveStreamAdvancedFeature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveStreamAdvancedFeature *arg1 = (agora::rtc::LiveStreamAdvancedFeature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveStreamAdvancedFeature, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LiveStreamAdvancedFeature" "', argument " "1"" of type '" "agora::rtc::LiveStreamAdvancedFeature *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveStreamAdvancedFeature * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LiveStreamAdvancedFeature_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__LiveStreamAdvancedFeature, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LiveStreamAdvancedFeature_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_LiveTranscoding_width_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_width_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_width_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LiveTranscoding_width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->width = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_width_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_width_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->width);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_height_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_height_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_height_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LiveTranscoding_height_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->height = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_height_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_height_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->height);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_videoBitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_videoBitrate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_videoBitrate_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LiveTranscoding_videoBitrate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->videoBitrate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_videoBitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_videoBitrate_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->videoBitrate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_videoFramerate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_videoFramerate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_videoFramerate_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LiveTranscoding_videoFramerate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->videoFramerate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_videoFramerate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_videoFramerate_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->videoFramerate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_lowLatency_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_lowLatency_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_lowLatency_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LiveTranscoding_lowLatency_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->lowLatency = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_lowLatency_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_lowLatency_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool) ((arg1)->lowLatency);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_videoGop_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_videoGop_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_videoGop_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LiveTranscoding_videoGop_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->videoGop = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_videoGop_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_videoGop_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->videoGop);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_videoCodecProfile_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  agora::rtc::VIDEO_CODEC_PROFILE_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_videoCodecProfile_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_videoCodecProfile_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LiveTranscoding_videoCodecProfile_set" "', argument " "2"" of type '" "agora::rtc::VIDEO_CODEC_PROFILE_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::VIDEO_CODEC_PROFILE_TYPE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->videoCodecProfile = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_videoCodecProfile_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::VIDEO_CODEC_PROFILE_TYPE result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_videoCodecProfile_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::VIDEO_CODEC_PROFILE_TYPE) ((arg1)->videoCodecProfile);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_backgroundColor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_backgroundColor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_backgroundColor_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LiveTranscoding_backgroundColor_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->backgroundColor = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_backgroundColor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_backgroundColor_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->backgroundColor);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_userCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_userCount_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_userCount_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LiveTranscoding_userCount_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->userCount = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_userCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_userCount_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->userCount);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_transcodingUsers_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  agora::rtc::TranscodingUser *arg2 = (agora::rtc::TranscodingUser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_transcodingUsers_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_transcodingUsers_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__TranscodingUser, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveTranscoding_transcodingUsers_set" "', argument " "2"" of type '" "agora::rtc::TranscodingUser *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::TranscodingUser * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->transcodingUsers = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_transcodingUsers_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::TranscodingUser *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_transcodingUsers_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::TranscodingUser *) ((arg1)->transcodingUsers);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__TranscodingUser, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_transcodingExtraInfo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_transcodingExtraInfo_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_transcodingExtraInfo_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveTranscoding_transcodingExtraInfo_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
      arg1->transcodingExtraInfo = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
    } else {
      arg1->transcodingExtraInfo = 0;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_transcodingExtraInfo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_transcodingExtraInfo_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *) ((arg1)->transcodingExtraInfo);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_metadata_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_metadata_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_metadata_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveTranscoding_metadata_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
      arg1->metadata = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
    } else {
      arg1->metadata = 0;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_metadata_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_metadata_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *) ((arg1)->metadata);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_watermark_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  agora::rtc::RtcImage *arg2 = (agora::rtc::RtcImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_watermark_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_watermark_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__RtcImage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveTranscoding_watermark_set" "', argument " "2"" of type '" "agora::rtc::RtcImage *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::RtcImage * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->watermark = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_watermark_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::RtcImage *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_watermark_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::RtcImage *) ((arg1)->watermark);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__RtcImage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_backgroundImage_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  agora::rtc::RtcImage *arg2 = (agora::rtc::RtcImage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_backgroundImage_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_backgroundImage_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__RtcImage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveTranscoding_backgroundImage_set" "', argument " "2"" of type '" "agora::rtc::RtcImage *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::RtcImage * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->backgroundImage = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_backgroundImage_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::RtcImage *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_backgroundImage_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::RtcImage *) ((arg1)->backgroundImage);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__RtcImage, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_audioSampleRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  agora::rtc::AUDIO_SAMPLE_RATE_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_audioSampleRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_audioSampleRate_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LiveTranscoding_audioSampleRate_set" "', argument " "2"" of type '" "agora::rtc::AUDIO_SAMPLE_RATE_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::AUDIO_SAMPLE_RATE_TYPE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->audioSampleRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_audioSampleRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::AUDIO_SAMPLE_RATE_TYPE result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_audioSampleRate_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::AUDIO_SAMPLE_RATE_TYPE) ((arg1)->audioSampleRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_audioBitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_audioBitrate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_audioBitrate_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LiveTranscoding_audioBitrate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->audioBitrate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_audioBitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_audioBitrate_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->audioBitrate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_audioChannels_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_audioChannels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_audioChannels_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LiveTranscoding_audioChannels_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->audioChannels = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_audioChannels_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_audioChannels_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->audioChannels);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_audioCodecProfile_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  agora::rtc::AUDIO_CODEC_PROFILE_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_audioCodecProfile_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_audioCodecProfile_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LiveTranscoding_audioCodecProfile_set" "', argument " "2"" of type '" "agora::rtc::AUDIO_CODEC_PROFILE_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::AUDIO_CODEC_PROFILE_TYPE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->audioCodecProfile = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_audioCodecProfile_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::AUDIO_CODEC_PROFILE_TYPE result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_audioCodecProfile_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::AUDIO_CODEC_PROFILE_TYPE) ((arg1)->audioCodecProfile);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_advancedFeatures_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  agora::rtc::LiveStreamAdvancedFeature *arg2 = (agora::rtc::LiveStreamAdvancedFeature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_advancedFeatures_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_advancedFeatures_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__LiveStreamAdvancedFeature, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveTranscoding_advancedFeatures_set" "', argument " "2"" of type '" "agora::rtc::LiveStreamAdvancedFeature *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::LiveStreamAdvancedFeature * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->advancedFeatures = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_advancedFeatures_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::LiveStreamAdvancedFeature *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_advancedFeatures_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::LiveStreamAdvancedFeature *) ((arg1)->advancedFeatures);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__LiveStreamAdvancedFeature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_advancedFeatureCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LiveTranscoding_advancedFeatureCount_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_advancedFeatureCount_set" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LiveTranscoding_advancedFeatureCount_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->advancedFeatureCount = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveTranscoding_advancedFeatureCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveTranscoding_advancedFeatureCount_get" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int) ((arg1)->advancedFeatureCount);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LiveTranscoding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LiveTranscoding", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::LiveTranscoding *)new agora::rtc::LiveTranscoding();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__LiveTranscoding, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LiveTranscoding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::LiveTranscoding *arg1 = (agora::rtc::LiveTranscoding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__LiveTranscoding, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LiveTranscoding" "', argument " "1"" of type '" "agora::rtc::LiveTranscoding *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LiveTranscoding_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__LiveTranscoding, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LiveTranscoding_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_CameraCapturerConfiguration_preference_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::CameraCapturerConfiguration *arg1 = (agora::rtc::CameraCapturerConfiguration *) 0 ;
  agora::rtc::CAPTURER_OUTPUT_PREFERENCE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "CameraCapturerConfiguration_preference_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__CameraCapturerConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraCapturerConfiguration_preference_set" "', argument " "1"" of type '" "agora::rtc::CameraCapturerConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::CameraCapturerConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CameraCapturerConfiguration_preference_set" "', argument " "2"" of type '" "agora::rtc::CAPTURER_OUTPUT_PREFERENCE""'");
  } 
  arg2 = static_cast< agora::rtc::CAPTURER_OUTPUT_PREFERENCE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->preference = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CameraCapturerConfiguration_preference_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::CameraCapturerConfiguration *arg1 = (agora::rtc::CameraCapturerConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::CAPTURER_OUTPUT_PREFERENCE result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__CameraCapturerConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CameraCapturerConfiguration_preference_get" "', argument " "1"" of type '" "agora::rtc::CameraCapturerConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::CameraCapturerConfiguration * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::CAPTURER_OUTPUT_PREFERENCE) ((arg1)->preference);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CameraCapturerConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::CameraCapturerConfiguration *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_CameraCapturerConfiguration", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::CameraCapturerConfiguration *)new agora::rtc::CameraCapturerConfiguration();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__CameraCapturerConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CameraCapturerConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::CameraCapturerConfiguration *arg1 = (agora::rtc::CameraCapturerConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__CameraCapturerConfiguration, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CameraCapturerConfiguration" "', argument " "1"" of type '" "agora::rtc::CameraCapturerConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::CameraCapturerConfiguration * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CameraCapturerConfiguration_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__CameraCapturerConfiguration, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CameraCapturerConfiguration_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_InjectStreamConfig_width_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::InjectStreamConfig *arg1 = (agora::rtc::InjectStreamConfig *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InjectStreamConfig_width_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__InjectStreamConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InjectStreamConfig_width_set" "', argument " "1"" of type '" "agora::rtc::InjectStreamConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InjectStreamConfig_width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->width = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InjectStreamConfig_width_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::InjectStreamConfig *arg1 = (agora::rtc::InjectStreamConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__InjectStreamConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InjectStreamConfig_width_get" "', argument " "1"" of type '" "agora::rtc::InjectStreamConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->width);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InjectStreamConfig_height_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::InjectStreamConfig *arg1 = (agora::rtc::InjectStreamConfig *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InjectStreamConfig_height_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__InjectStreamConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InjectStreamConfig_height_set" "', argument " "1"" of type '" "agora::rtc::InjectStreamConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InjectStreamConfig_height_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->height = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InjectStreamConfig_height_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::InjectStreamConfig *arg1 = (agora::rtc::InjectStreamConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__InjectStreamConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InjectStreamConfig_height_get" "', argument " "1"" of type '" "agora::rtc::InjectStreamConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->height);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InjectStreamConfig_videoGop_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::InjectStreamConfig *arg1 = (agora::rtc::InjectStreamConfig *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InjectStreamConfig_videoGop_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__InjectStreamConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InjectStreamConfig_videoGop_set" "', argument " "1"" of type '" "agora::rtc::InjectStreamConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InjectStreamConfig_videoGop_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->videoGop = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InjectStreamConfig_videoGop_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::InjectStreamConfig *arg1 = (agora::rtc::InjectStreamConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__InjectStreamConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InjectStreamConfig_videoGop_get" "', argument " "1"" of type '" "agora::rtc::InjectStreamConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->videoGop);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InjectStreamConfig_videoFramerate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::InjectStreamConfig *arg1 = (agora::rtc::InjectStreamConfig *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InjectStreamConfig_videoFramerate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__InjectStreamConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InjectStreamConfig_videoFramerate_set" "', argument " "1"" of type '" "agora::rtc::InjectStreamConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InjectStreamConfig_videoFramerate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->videoFramerate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InjectStreamConfig_videoFramerate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::InjectStreamConfig *arg1 = (agora::rtc::InjectStreamConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__InjectStreamConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InjectStreamConfig_videoFramerate_get" "', argument " "1"" of type '" "agora::rtc::InjectStreamConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->videoFramerate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InjectStreamConfig_videoBitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::InjectStreamConfig *arg1 = (agora::rtc::InjectStreamConfig *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InjectStreamConfig_videoBitrate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__InjectStreamConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InjectStreamConfig_videoBitrate_set" "', argument " "1"" of type '" "agora::rtc::InjectStreamConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InjectStreamConfig_videoBitrate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->videoBitrate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InjectStreamConfig_videoBitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::InjectStreamConfig *arg1 = (agora::rtc::InjectStreamConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__InjectStreamConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InjectStreamConfig_videoBitrate_get" "', argument " "1"" of type '" "agora::rtc::InjectStreamConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->videoBitrate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InjectStreamConfig_audioSampleRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::InjectStreamConfig *arg1 = (agora::rtc::InjectStreamConfig *) 0 ;
  agora::rtc::AUDIO_SAMPLE_RATE_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InjectStreamConfig_audioSampleRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__InjectStreamConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InjectStreamConfig_audioSampleRate_set" "', argument " "1"" of type '" "agora::rtc::InjectStreamConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InjectStreamConfig_audioSampleRate_set" "', argument " "2"" of type '" "agora::rtc::AUDIO_SAMPLE_RATE_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::AUDIO_SAMPLE_RATE_TYPE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->audioSampleRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InjectStreamConfig_audioSampleRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::InjectStreamConfig *arg1 = (agora::rtc::InjectStreamConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::AUDIO_SAMPLE_RATE_TYPE result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__InjectStreamConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InjectStreamConfig_audioSampleRate_get" "', argument " "1"" of type '" "agora::rtc::InjectStreamConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::AUDIO_SAMPLE_RATE_TYPE) ((arg1)->audioSampleRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InjectStreamConfig_audioBitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::InjectStreamConfig *arg1 = (agora::rtc::InjectStreamConfig *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InjectStreamConfig_audioBitrate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__InjectStreamConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InjectStreamConfig_audioBitrate_set" "', argument " "1"" of type '" "agora::rtc::InjectStreamConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InjectStreamConfig_audioBitrate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->audioBitrate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InjectStreamConfig_audioBitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::InjectStreamConfig *arg1 = (agora::rtc::InjectStreamConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__InjectStreamConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InjectStreamConfig_audioBitrate_get" "', argument " "1"" of type '" "agora::rtc::InjectStreamConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->audioBitrate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InjectStreamConfig_audioChannels_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::InjectStreamConfig *arg1 = (agora::rtc::InjectStreamConfig *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InjectStreamConfig_audioChannels_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__InjectStreamConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InjectStreamConfig_audioChannels_set" "', argument " "1"" of type '" "agora::rtc::InjectStreamConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InjectStreamConfig_audioChannels_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->audioChannels = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InjectStreamConfig_audioChannels_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::InjectStreamConfig *arg1 = (agora::rtc::InjectStreamConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__InjectStreamConfig, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InjectStreamConfig_audioChannels_get" "', argument " "1"" of type '" "agora::rtc::InjectStreamConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->audioChannels);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InjectStreamConfig(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::InjectStreamConfig *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_InjectStreamConfig", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::InjectStreamConfig *)new agora::rtc::InjectStreamConfig();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__InjectStreamConfig, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InjectStreamConfig(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::InjectStreamConfig *arg1 = (agora::rtc::InjectStreamConfig *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__InjectStreamConfig, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InjectStreamConfig" "', argument " "1"" of type '" "agora::rtc::InjectStreamConfig *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InjectStreamConfig_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__InjectStreamConfig, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *InjectStreamConfig_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ChannelMediaInfo_channelName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaInfo *arg1 = (agora::rtc::ChannelMediaInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ChannelMediaInfo_channelName_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelMediaInfo_channelName_set" "', argument " "1"" of type '" "agora::rtc::ChannelMediaInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaInfo * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelMediaInfo_channelName_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
      arg1->channelName = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
    } else {
      arg1->channelName = 0;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelMediaInfo_channelName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaInfo *arg1 = (agora::rtc::ChannelMediaInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelMediaInfo_channelName_get" "', argument " "1"" of type '" "agora::rtc::ChannelMediaInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaInfo * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *) ((arg1)->channelName);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelMediaInfo_token_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaInfo *arg1 = (agora::rtc::ChannelMediaInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ChannelMediaInfo_token_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelMediaInfo_token_set" "', argument " "1"" of type '" "agora::rtc::ChannelMediaInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaInfo * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelMediaInfo_token_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
      arg1->token = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
    } else {
      arg1->token = 0;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelMediaInfo_token_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaInfo *arg1 = (agora::rtc::ChannelMediaInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelMediaInfo_token_get" "', argument " "1"" of type '" "agora::rtc::ChannelMediaInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaInfo * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *) ((arg1)->token);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelMediaInfo_uid_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaInfo *arg1 = (agora::rtc::ChannelMediaInfo *) 0 ;
  agora::rtc::uid_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ChannelMediaInfo_uid_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelMediaInfo_uid_set" "', argument " "1"" of type '" "agora::rtc::ChannelMediaInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaInfo * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ChannelMediaInfo_uid_set" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->uid = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelMediaInfo_uid_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaInfo *arg1 = (agora::rtc::ChannelMediaInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::uid_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelMediaInfo_uid_get" "', argument " "1"" of type '" "agora::rtc::ChannelMediaInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaInfo * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::uid_t) ((arg1)->uid);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ChannelMediaInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaInfo *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ChannelMediaInfo", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::ChannelMediaInfo *)new agora::rtc::ChannelMediaInfo();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__ChannelMediaInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ChannelMediaInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaInfo *arg1 = (agora::rtc::ChannelMediaInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ChannelMediaInfo" "', argument " "1"" of type '" "agora::rtc::ChannelMediaInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaInfo * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ChannelMediaInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__ChannelMediaInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ChannelMediaInfo_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ChannelMediaRelayConfiguration_srcInfo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaRelayConfiguration *arg1 = (agora::rtc::ChannelMediaRelayConfiguration *) 0 ;
  agora::rtc::ChannelMediaInfo *arg2 = (agora::rtc::ChannelMediaInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ChannelMediaRelayConfiguration_srcInfo_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaRelayConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelMediaRelayConfiguration_srcInfo_set" "', argument " "1"" of type '" "agora::rtc::ChannelMediaRelayConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaRelayConfiguration * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__ChannelMediaInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelMediaRelayConfiguration_srcInfo_set" "', argument " "2"" of type '" "agora::rtc::ChannelMediaInfo *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::ChannelMediaInfo * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->srcInfo = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelMediaRelayConfiguration_srcInfo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaRelayConfiguration *arg1 = (agora::rtc::ChannelMediaRelayConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::ChannelMediaInfo *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaRelayConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelMediaRelayConfiguration_srcInfo_get" "', argument " "1"" of type '" "agora::rtc::ChannelMediaRelayConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaRelayConfiguration * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::ChannelMediaInfo *) ((arg1)->srcInfo);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__ChannelMediaInfo, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelMediaRelayConfiguration_destInfos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaRelayConfiguration *arg1 = (agora::rtc::ChannelMediaRelayConfiguration *) 0 ;
  agora::rtc::ChannelMediaInfo *arg2 = (agora::rtc::ChannelMediaInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ChannelMediaRelayConfiguration_destInfos_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaRelayConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelMediaRelayConfiguration_destInfos_set" "', argument " "1"" of type '" "agora::rtc::ChannelMediaRelayConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaRelayConfiguration * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__ChannelMediaInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ChannelMediaRelayConfiguration_destInfos_set" "', argument " "2"" of type '" "agora::rtc::ChannelMediaInfo *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::ChannelMediaInfo * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->destInfos = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelMediaRelayConfiguration_destInfos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaRelayConfiguration *arg1 = (agora::rtc::ChannelMediaRelayConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::ChannelMediaInfo *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaRelayConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelMediaRelayConfiguration_destInfos_get" "', argument " "1"" of type '" "agora::rtc::ChannelMediaRelayConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaRelayConfiguration * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::ChannelMediaInfo *) ((arg1)->destInfos);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__ChannelMediaInfo, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelMediaRelayConfiguration_destCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaRelayConfiguration *arg1 = (agora::rtc::ChannelMediaRelayConfiguration *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ChannelMediaRelayConfiguration_destCount_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaRelayConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelMediaRelayConfiguration_destCount_set" "', argument " "1"" of type '" "agora::rtc::ChannelMediaRelayConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaRelayConfiguration * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ChannelMediaRelayConfiguration_destCount_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->destCount = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelMediaRelayConfiguration_destCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaRelayConfiguration *arg1 = (agora::rtc::ChannelMediaRelayConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaRelayConfiguration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelMediaRelayConfiguration_destCount_get" "', argument " "1"" of type '" "agora::rtc::ChannelMediaRelayConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaRelayConfiguration * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->destCount);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ChannelMediaRelayConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaRelayConfiguration *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ChannelMediaRelayConfiguration", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::ChannelMediaRelayConfiguration *)new agora::rtc::ChannelMediaRelayConfiguration();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__ChannelMediaRelayConfiguration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ChannelMediaRelayConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaRelayConfiguration *arg1 = (agora::rtc::ChannelMediaRelayConfiguration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaRelayConfiguration, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ChannelMediaRelayConfiguration" "', argument " "1"" of type '" "agora::rtc::ChannelMediaRelayConfiguration *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaRelayConfiguration * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ChannelMediaRelayConfiguration_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__ChannelMediaRelayConfiguration, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ChannelMediaRelayConfiguration_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Rectangle_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::Rectangle *arg1 = (agora::rtc::Rectangle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Rectangle_x_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__Rectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_x_set" "', argument " "1"" of type '" "agora::rtc::Rectangle *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::Rectangle * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rectangle_x_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->x = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rectangle_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::Rectangle *arg1 = (agora::rtc::Rectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__Rectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_x_get" "', argument " "1"" of type '" "agora::rtc::Rectangle *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::Rectangle * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->x);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rectangle_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::Rectangle *arg1 = (agora::rtc::Rectangle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Rectangle_y_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__Rectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_y_set" "', argument " "1"" of type '" "agora::rtc::Rectangle *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::Rectangle * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rectangle_y_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->y = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rectangle_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::Rectangle *arg1 = (agora::rtc::Rectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__Rectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_y_get" "', argument " "1"" of type '" "agora::rtc::Rectangle *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::Rectangle * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->y);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rectangle_width_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::Rectangle *arg1 = (agora::rtc::Rectangle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Rectangle_width_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__Rectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_width_set" "', argument " "1"" of type '" "agora::rtc::Rectangle *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::Rectangle * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rectangle_width_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->width = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rectangle_width_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::Rectangle *arg1 = (agora::rtc::Rectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__Rectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_width_get" "', argument " "1"" of type '" "agora::rtc::Rectangle *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::Rectangle * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->width);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rectangle_height_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::Rectangle *arg1 = (agora::rtc::Rectangle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Rectangle_height_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__Rectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_height_set" "', argument " "1"" of type '" "agora::rtc::Rectangle *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::Rectangle * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rectangle_height_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->height = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rectangle_height_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::Rectangle *arg1 = (agora::rtc::Rectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__Rectangle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_height_get" "', argument " "1"" of type '" "agora::rtc::Rectangle *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::Rectangle * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->height);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rectangle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  agora::rtc::Rectangle *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::Rectangle *)new agora::rtc::Rectangle();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__Rectangle, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rectangle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  agora::rtc::Rectangle *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Rectangle" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Rectangle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Rectangle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Rectangle" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::Rectangle *)new agora::rtc::Rectangle(arg1,arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__Rectangle, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rectangle(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Rectangle", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Rectangle__SWIG_0(self, argc, argv);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Rectangle__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Rectangle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    agora::rtc::Rectangle::Rectangle()\n"
    "    agora::rtc::Rectangle::Rectangle(int,int,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Rectangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::Rectangle *arg1 = (agora::rtc::Rectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__Rectangle, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rectangle" "', argument " "1"" of type '" "agora::rtc::Rectangle *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::Rectangle * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Rectangle_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__Rectangle, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Rectangle_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Rect_top_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::Rect *arg1 = (agora::rtc::Rect *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Rect_top_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__Rect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rect_top_set" "', argument " "1"" of type '" "agora::rtc::Rect *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::Rect * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rect_top_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->top = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rect_top_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::Rect *arg1 = (agora::rtc::Rect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__Rect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rect_top_get" "', argument " "1"" of type '" "agora::rtc::Rect *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::Rect * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->top);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rect_left_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::Rect *arg1 = (agora::rtc::Rect *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Rect_left_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__Rect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rect_left_set" "', argument " "1"" of type '" "agora::rtc::Rect *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::Rect * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rect_left_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->left = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rect_left_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::Rect *arg1 = (agora::rtc::Rect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__Rect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rect_left_get" "', argument " "1"" of type '" "agora::rtc::Rect *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::Rect * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->left);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rect_bottom_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::Rect *arg1 = (agora::rtc::Rect *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Rect_bottom_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__Rect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rect_bottom_set" "', argument " "1"" of type '" "agora::rtc::Rect *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::Rect * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rect_bottom_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->bottom = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rect_bottom_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::Rect *arg1 = (agora::rtc::Rect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__Rect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rect_bottom_get" "', argument " "1"" of type '" "agora::rtc::Rect *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::Rect * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->bottom);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rect_right_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::Rect *arg1 = (agora::rtc::Rect *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Rect_right_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__Rect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rect_right_set" "', argument " "1"" of type '" "agora::rtc::Rect *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::Rect * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rect_right_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->right = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rect_right_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::Rect *arg1 = (agora::rtc::Rect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__Rect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rect_right_get" "', argument " "1"" of type '" "agora::rtc::Rect *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::Rect * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->right);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  agora::rtc::Rect *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::Rect *)new agora::rtc::Rect();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__Rect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  agora::rtc::Rect *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Rect" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Rect" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Rect" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Rect" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::Rect *)new agora::rtc::Rect(arg1,arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__Rect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rect(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Rect", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Rect__SWIG_0(self, argc, argv);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Rect__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Rect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    agora::rtc::Rect::Rect()\n"
    "    agora::rtc::Rect::Rect(int,int,int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Rect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::Rect *arg1 = (agora::rtc::Rect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__Rect, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rect" "', argument " "1"" of type '" "agora::rtc::Rect *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::Rect * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Rect_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__Rect, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Rect_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_WatermarkOptions_visibleInPreview_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::WatermarkOptions *arg1 = (agora::rtc::WatermarkOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "WatermarkOptions_visibleInPreview_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__WatermarkOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WatermarkOptions_visibleInPreview_set" "', argument " "1"" of type '" "agora::rtc::WatermarkOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::WatermarkOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WatermarkOptions_visibleInPreview_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->visibleInPreview = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WatermarkOptions_visibleInPreview_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::WatermarkOptions *arg1 = (agora::rtc::WatermarkOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__WatermarkOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WatermarkOptions_visibleInPreview_get" "', argument " "1"" of type '" "agora::rtc::WatermarkOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::WatermarkOptions * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool) ((arg1)->visibleInPreview);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WatermarkOptions_positionInLandscapeMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::WatermarkOptions *arg1 = (agora::rtc::WatermarkOptions *) 0 ;
  agora::rtc::Rectangle *arg2 = (agora::rtc::Rectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "WatermarkOptions_positionInLandscapeMode_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__WatermarkOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WatermarkOptions_positionInLandscapeMode_set" "', argument " "1"" of type '" "agora::rtc::WatermarkOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::WatermarkOptions * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__Rectangle, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WatermarkOptions_positionInLandscapeMode_set" "', argument " "2"" of type '" "agora::rtc::Rectangle *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::Rectangle * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->positionInLandscapeMode = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WatermarkOptions_positionInLandscapeMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::WatermarkOptions *arg1 = (agora::rtc::WatermarkOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::Rectangle *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__WatermarkOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WatermarkOptions_positionInLandscapeMode_get" "', argument " "1"" of type '" "agora::rtc::WatermarkOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::WatermarkOptions * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::Rectangle *)& ((arg1)->positionInLandscapeMode);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__Rectangle, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WatermarkOptions_positionInPortraitMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::WatermarkOptions *arg1 = (agora::rtc::WatermarkOptions *) 0 ;
  agora::rtc::Rectangle *arg2 = (agora::rtc::Rectangle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "WatermarkOptions_positionInPortraitMode_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__WatermarkOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WatermarkOptions_positionInPortraitMode_set" "', argument " "1"" of type '" "agora::rtc::WatermarkOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::WatermarkOptions * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__Rectangle, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WatermarkOptions_positionInPortraitMode_set" "', argument " "2"" of type '" "agora::rtc::Rectangle *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::Rectangle * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->positionInPortraitMode = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WatermarkOptions_positionInPortraitMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::WatermarkOptions *arg1 = (agora::rtc::WatermarkOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::Rectangle *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__WatermarkOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WatermarkOptions_positionInPortraitMode_get" "', argument " "1"" of type '" "agora::rtc::WatermarkOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::WatermarkOptions * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::Rectangle *)& ((arg1)->positionInPortraitMode);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__Rectangle, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WatermarkOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::WatermarkOptions *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_WatermarkOptions", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::WatermarkOptions *)new agora::rtc::WatermarkOptions();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__WatermarkOptions, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WatermarkOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::WatermarkOptions *arg1 = (agora::rtc::WatermarkOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__WatermarkOptions, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WatermarkOptions" "', argument " "1"" of type '" "agora::rtc::WatermarkOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::WatermarkOptions * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WatermarkOptions_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__WatermarkOptions, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *WatermarkOptions_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ScreenCaptureParameters_dimensions_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ScreenCaptureParameters *arg1 = (agora::rtc::ScreenCaptureParameters *) 0 ;
  agora::rtc::VideoDimensions *arg2 = (agora::rtc::VideoDimensions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ScreenCaptureParameters_dimensions_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenCaptureParameters_dimensions_set" "', argument " "1"" of type '" "agora::rtc::ScreenCaptureParameters *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ScreenCaptureParameters * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__VideoDimensions, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScreenCaptureParameters_dimensions_set" "', argument " "2"" of type '" "agora::rtc::VideoDimensions *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::VideoDimensions * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->dimensions = *arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenCaptureParameters_dimensions_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ScreenCaptureParameters *arg1 = (agora::rtc::ScreenCaptureParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::VideoDimensions *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenCaptureParameters_dimensions_get" "', argument " "1"" of type '" "agora::rtc::ScreenCaptureParameters *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ScreenCaptureParameters * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::VideoDimensions *)& ((arg1)->dimensions);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__VideoDimensions, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenCaptureParameters_frameRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ScreenCaptureParameters *arg1 = (agora::rtc::ScreenCaptureParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ScreenCaptureParameters_frameRate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenCaptureParameters_frameRate_set" "', argument " "1"" of type '" "agora::rtc::ScreenCaptureParameters *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ScreenCaptureParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScreenCaptureParameters_frameRate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->frameRate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenCaptureParameters_frameRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ScreenCaptureParameters *arg1 = (agora::rtc::ScreenCaptureParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenCaptureParameters_frameRate_get" "', argument " "1"" of type '" "agora::rtc::ScreenCaptureParameters *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ScreenCaptureParameters * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->frameRate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenCaptureParameters_bitrate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ScreenCaptureParameters *arg1 = (agora::rtc::ScreenCaptureParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ScreenCaptureParameters_bitrate_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenCaptureParameters_bitrate_set" "', argument " "1"" of type '" "agora::rtc::ScreenCaptureParameters *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ScreenCaptureParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScreenCaptureParameters_bitrate_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->bitrate = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenCaptureParameters_bitrate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ScreenCaptureParameters *arg1 = (agora::rtc::ScreenCaptureParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenCaptureParameters_bitrate_get" "', argument " "1"" of type '" "agora::rtc::ScreenCaptureParameters *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ScreenCaptureParameters * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->bitrate);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenCaptureParameters_captureMouseCursor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ScreenCaptureParameters *arg1 = (agora::rtc::ScreenCaptureParameters *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ScreenCaptureParameters_captureMouseCursor_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenCaptureParameters_captureMouseCursor_set" "', argument " "1"" of type '" "agora::rtc::ScreenCaptureParameters *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ScreenCaptureParameters * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScreenCaptureParameters_captureMouseCursor_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->captureMouseCursor = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenCaptureParameters_captureMouseCursor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ScreenCaptureParameters *arg1 = (agora::rtc::ScreenCaptureParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenCaptureParameters_captureMouseCursor_get" "', argument " "1"" of type '" "agora::rtc::ScreenCaptureParameters *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ScreenCaptureParameters * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool) ((arg1)->captureMouseCursor);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenCaptureParameters_windowFocus_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ScreenCaptureParameters *arg1 = (agora::rtc::ScreenCaptureParameters *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ScreenCaptureParameters_windowFocus_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenCaptureParameters_windowFocus_set" "', argument " "1"" of type '" "agora::rtc::ScreenCaptureParameters *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ScreenCaptureParameters * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScreenCaptureParameters_windowFocus_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->windowFocus = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenCaptureParameters_windowFocus_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ScreenCaptureParameters *arg1 = (agora::rtc::ScreenCaptureParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenCaptureParameters_windowFocus_get" "', argument " "1"" of type '" "agora::rtc::ScreenCaptureParameters *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ScreenCaptureParameters * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool) ((arg1)->windowFocus);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenCaptureParameters_excludeWindowList_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ScreenCaptureParameters *arg1 = (agora::rtc::ScreenCaptureParameters *) 0 ;
  agora::rtc::view_t *arg2 = (agora::rtc::view_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ScreenCaptureParameters_excludeWindowList_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenCaptureParameters_excludeWindowList_set" "', argument " "1"" of type '" "agora::rtc::ScreenCaptureParameters *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ScreenCaptureParameters * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScreenCaptureParameters_excludeWindowList_set" "', argument " "2"" of type '" "agora::rtc::view_t *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::view_t * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->excludeWindowList = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenCaptureParameters_excludeWindowList_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ScreenCaptureParameters *arg1 = (agora::rtc::ScreenCaptureParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::view_t *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenCaptureParameters_excludeWindowList_get" "', argument " "1"" of type '" "agora::rtc::ScreenCaptureParameters *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ScreenCaptureParameters * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::view_t *) ((arg1)->excludeWindowList);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenCaptureParameters_excludeWindowCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ScreenCaptureParameters *arg1 = (agora::rtc::ScreenCaptureParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ScreenCaptureParameters_excludeWindowCount_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenCaptureParameters_excludeWindowCount_set" "', argument " "1"" of type '" "agora::rtc::ScreenCaptureParameters *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ScreenCaptureParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScreenCaptureParameters_excludeWindowCount_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->excludeWindowCount = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenCaptureParameters_excludeWindowCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ScreenCaptureParameters *arg1 = (agora::rtc::ScreenCaptureParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenCaptureParameters_excludeWindowCount_get" "', argument " "1"" of type '" "agora::rtc::ScreenCaptureParameters *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ScreenCaptureParameters * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->excludeWindowCount);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScreenCaptureParameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  agora::rtc::ScreenCaptureParameters *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::ScreenCaptureParameters *)new agora::rtc::ScreenCaptureParameters();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScreenCaptureParameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::rtc::VideoDimensions *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  agora::rtc::view_t *arg6 = (agora::rtc::view_t *) 0 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  agora::rtc::ScreenCaptureParameters *result = 0 ;
  
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_agora__rtc__VideoDimensions,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScreenCaptureParameters" "', argument " "1"" of type '" "agora::rtc::VideoDimensions const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScreenCaptureParameters" "', argument " "1"" of type '" "agora::rtc::VideoDimensions const &""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoDimensions * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScreenCaptureParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScreenCaptureParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScreenCaptureParameters" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ScreenCaptureParameters" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_ScreenCaptureParameters" "', argument " "6"" of type '" "agora::rtc::view_t *""'"); 
  }
  arg6 = reinterpret_cast< agora::rtc::view_t * >(argp6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_ScreenCaptureParameters" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::ScreenCaptureParameters *)new agora::rtc::ScreenCaptureParameters((agora::rtc::VideoDimensions const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScreenCaptureParameters__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::rtc::VideoDimensions *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  agora::rtc::view_t *arg6 = (agora::rtc::view_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  agora::rtc::ScreenCaptureParameters *result = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_agora__rtc__VideoDimensions,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScreenCaptureParameters" "', argument " "1"" of type '" "agora::rtc::VideoDimensions const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScreenCaptureParameters" "', argument " "1"" of type '" "agora::rtc::VideoDimensions const &""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoDimensions * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScreenCaptureParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScreenCaptureParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScreenCaptureParameters" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ScreenCaptureParameters" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_ScreenCaptureParameters" "', argument " "6"" of type '" "agora::rtc::view_t *""'"); 
  }
  arg6 = reinterpret_cast< agora::rtc::view_t * >(argp6);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::ScreenCaptureParameters *)new agora::rtc::ScreenCaptureParameters((agora::rtc::VideoDimensions const &)*arg1,arg2,arg3,arg4,arg5,arg6);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScreenCaptureParameters__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::rtc::VideoDimensions *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  agora::rtc::ScreenCaptureParameters *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_agora__rtc__VideoDimensions,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScreenCaptureParameters" "', argument " "1"" of type '" "agora::rtc::VideoDimensions const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScreenCaptureParameters" "', argument " "1"" of type '" "agora::rtc::VideoDimensions const &""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoDimensions * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScreenCaptureParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScreenCaptureParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScreenCaptureParameters" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ScreenCaptureParameters" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::ScreenCaptureParameters *)new agora::rtc::ScreenCaptureParameters((agora::rtc::VideoDimensions const &)*arg1,arg2,arg3,arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScreenCaptureParameters__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  agora::rtc::view_t *arg7 = (agora::rtc::view_t *) 0 ;
  int arg8 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  agora::rtc::ScreenCaptureParameters *result = 0 ;
  
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ScreenCaptureParameters" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScreenCaptureParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScreenCaptureParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScreenCaptureParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ScreenCaptureParameters" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ScreenCaptureParameters" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_ScreenCaptureParameters" "', argument " "7"" of type '" "agora::rtc::view_t *""'"); 
  }
  arg7 = reinterpret_cast< agora::rtc::view_t * >(argp7);
  ecode8 = SWIG_AsVal_int(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_ScreenCaptureParameters" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::ScreenCaptureParameters *)new agora::rtc::ScreenCaptureParameters(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScreenCaptureParameters__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  agora::rtc::view_t *arg7 = (agora::rtc::view_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  agora::rtc::ScreenCaptureParameters *result = 0 ;
  
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ScreenCaptureParameters" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScreenCaptureParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScreenCaptureParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScreenCaptureParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ScreenCaptureParameters" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ScreenCaptureParameters" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  res7 = SWIG_ConvertPtr(swig_obj[6], &argp7,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_ScreenCaptureParameters" "', argument " "7"" of type '" "agora::rtc::view_t *""'"); 
  }
  arg7 = reinterpret_cast< agora::rtc::view_t * >(argp7);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::ScreenCaptureParameters *)new agora::rtc::ScreenCaptureParameters(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScreenCaptureParameters__SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  agora::rtc::ScreenCaptureParameters *result = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ScreenCaptureParameters" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScreenCaptureParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScreenCaptureParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScreenCaptureParameters" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ScreenCaptureParameters" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ScreenCaptureParameters" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::ScreenCaptureParameters *)new agora::rtc::ScreenCaptureParameters(arg1,arg2,arg3,arg4,arg5,arg6);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScreenCaptureParameters(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ScreenCaptureParameters", 0, 8, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_ScreenCaptureParameters__SWIG_0(self, argc, argv);
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_agora__rtc__VideoDimensions, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ScreenCaptureParameters__SWIG_3(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_agora__rtc__VideoDimensions, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_p_void, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_ScreenCaptureParameters__SWIG_2(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_ScreenCaptureParameters__SWIG_6(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_agora__rtc__VideoDimensions, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_p_void, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_ScreenCaptureParameters__SWIG_1(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_p_void, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_ScreenCaptureParameters__SWIG_5(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_p_void, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_new_ScreenCaptureParameters__SWIG_4(self, argc, argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ScreenCaptureParameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    agora::rtc::ScreenCaptureParameters::ScreenCaptureParameters()\n"
    "    agora::rtc::ScreenCaptureParameters::ScreenCaptureParameters(agora::rtc::VideoDimensions const &,int,int,bool,bool,agora::rtc::view_t *,int)\n"
    "    agora::rtc::ScreenCaptureParameters::ScreenCaptureParameters(agora::rtc::VideoDimensions const &,int,int,bool,bool,agora::rtc::view_t *)\n"
    "    agora::rtc::ScreenCaptureParameters::ScreenCaptureParameters(agora::rtc::VideoDimensions const &,int,int,bool,bool)\n"
    "    agora::rtc::ScreenCaptureParameters::ScreenCaptureParameters(int,int,int,int,bool,bool,agora::rtc::view_t *,int)\n"
    "    agora::rtc::ScreenCaptureParameters::ScreenCaptureParameters(int,int,int,int,bool,bool,agora::rtc::view_t *)\n"
    "    agora::rtc::ScreenCaptureParameters::ScreenCaptureParameters(int,int,int,int,bool,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ScreenCaptureParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ScreenCaptureParameters *arg1 = (agora::rtc::ScreenCaptureParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScreenCaptureParameters" "', argument " "1"" of type '" "agora::rtc::ScreenCaptureParameters *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ScreenCaptureParameters * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScreenCaptureParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__ScreenCaptureParameters, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ScreenCaptureParameters_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_VideoCanvas_view_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoCanvas *arg1 = (agora::rtc::VideoCanvas *) 0 ;
  agora::rtc::view_t arg2 = (agora::rtc::view_t) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoCanvas_view_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoCanvas, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoCanvas_view_set" "', argument " "1"" of type '" "agora::rtc::VideoCanvas *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoCanvas * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VideoCanvas_view_set" "', argument " "2"" of type '" "agora::rtc::view_t""'"); 
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->view = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoCanvas_view_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoCanvas *arg1 = (agora::rtc::VideoCanvas *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::view_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoCanvas, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoCanvas_view_get" "', argument " "1"" of type '" "agora::rtc::VideoCanvas *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoCanvas * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::view_t) ((arg1)->view);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoCanvas_renderMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoCanvas *arg1 = (agora::rtc::VideoCanvas *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoCanvas_renderMode_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoCanvas, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoCanvas_renderMode_set" "', argument " "1"" of type '" "agora::rtc::VideoCanvas *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoCanvas * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VideoCanvas_renderMode_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->renderMode = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoCanvas_renderMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoCanvas *arg1 = (agora::rtc::VideoCanvas *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoCanvas, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoCanvas_renderMode_get" "', argument " "1"" of type '" "agora::rtc::VideoCanvas *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoCanvas * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int) ((arg1)->renderMode);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoCanvas_channelId_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoCanvas *arg1 = (agora::rtc::VideoCanvas *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[agora::rtc::MAX_CHANNEL_ID_LENGTH] ;
  int res2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoCanvas_channelId_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoCanvas, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoCanvas_channelId_set" "', argument " "1"" of type '" "agora::rtc::VideoCanvas *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoCanvas * >(argp1);
  res2 = SWIG_AsCharArray(swig_obj[1], temp2, agora::rtc::MAX_CHANNEL_ID_LENGTH);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VideoCanvas_channelId_set" "', argument " "2"" of type '" "char [agora::rtc::MAX_CHANNEL_ID_LENGTH]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg2) memcpy(arg1->channelId,arg2,agora::rtc::MAX_CHANNEL_ID_LENGTH*sizeof(char));
    else memset(arg1->channelId,0,agora::rtc::MAX_CHANNEL_ID_LENGTH*sizeof(char));
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoCanvas_channelId_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoCanvas *arg1 = (agora::rtc::VideoCanvas *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoCanvas, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoCanvas_channelId_get" "', argument " "1"" of type '" "agora::rtc::VideoCanvas *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoCanvas * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *)(char *) ((arg1)->channelId);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    size_t size = SWIG_strnlen(result, agora::rtc::MAX_CHANNEL_ID_LENGTH);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoCanvas_uid_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoCanvas *arg1 = (agora::rtc::VideoCanvas *) 0 ;
  agora::rtc::uid_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoCanvas_uid_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoCanvas, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoCanvas_uid_set" "', argument " "1"" of type '" "agora::rtc::VideoCanvas *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoCanvas * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VideoCanvas_uid_set" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->uid = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoCanvas_uid_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoCanvas *arg1 = (agora::rtc::VideoCanvas *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::uid_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoCanvas, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoCanvas_uid_get" "', argument " "1"" of type '" "agora::rtc::VideoCanvas *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoCanvas * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::uid_t) ((arg1)->uid);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoCanvas_priv_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoCanvas *arg1 = (agora::rtc::VideoCanvas *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoCanvas_priv_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoCanvas, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoCanvas_priv_set" "', argument " "1"" of type '" "agora::rtc::VideoCanvas *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoCanvas * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VideoCanvas_priv_set" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->priv = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoCanvas_priv_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoCanvas *arg1 = (agora::rtc::VideoCanvas *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  void *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoCanvas, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoCanvas_priv_get" "', argument " "1"" of type '" "agora::rtc::VideoCanvas *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoCanvas * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (void *) ((arg1)->priv);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoCanvas_mirrorMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoCanvas *arg1 = (agora::rtc::VideoCanvas *) 0 ;
  agora::rtc::VIDEO_MIRROR_MODE_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoCanvas_mirrorMode_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoCanvas, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoCanvas_mirrorMode_set" "', argument " "1"" of type '" "agora::rtc::VideoCanvas *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoCanvas * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VideoCanvas_mirrorMode_set" "', argument " "2"" of type '" "agora::rtc::VIDEO_MIRROR_MODE_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::VIDEO_MIRROR_MODE_TYPE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->mirrorMode = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoCanvas_mirrorMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoCanvas *arg1 = (agora::rtc::VideoCanvas *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::VIDEO_MIRROR_MODE_TYPE result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoCanvas, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoCanvas_mirrorMode_get" "', argument " "1"" of type '" "agora::rtc::VideoCanvas *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoCanvas * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::VIDEO_MIRROR_MODE_TYPE) ((arg1)->mirrorMode);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VideoCanvas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  agora::rtc::VideoCanvas *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::VideoCanvas *)new agora::rtc::VideoCanvas();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__VideoCanvas, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VideoCanvas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::rtc::view_t arg1 = (agora::rtc::view_t) 0 ;
  int arg2 ;
  agora::rtc::uid_t arg3 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  agora::rtc::VideoCanvas *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VideoCanvas" "', argument " "1"" of type '" "agora::rtc::view_t""'"); 
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VideoCanvas" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VideoCanvas" "', argument " "3"" of type '" "agora::rtc::uid_t""'");
  } 
  arg3 = static_cast< agora::rtc::uid_t >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::VideoCanvas *)new agora::rtc::VideoCanvas(arg1,arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__VideoCanvas, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VideoCanvas__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::rtc::view_t arg1 = (agora::rtc::view_t) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  agora::rtc::uid_t arg4 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  agora::rtc::VideoCanvas *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VideoCanvas" "', argument " "1"" of type '" "agora::rtc::view_t""'"); 
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VideoCanvas" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_VideoCanvas" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VideoCanvas" "', argument " "4"" of type '" "agora::rtc::uid_t""'");
  } 
  arg4 = static_cast< agora::rtc::uid_t >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::VideoCanvas *)new agora::rtc::VideoCanvas(arg1,arg2,(char const *)arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__VideoCanvas, SWIG_POINTER_NEW |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VideoCanvas__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::rtc::view_t arg1 = (agora::rtc::view_t) 0 ;
  int arg2 ;
  agora::rtc::uid_t arg3 ;
  agora::rtc::VIDEO_MIRROR_MODE_TYPE arg4 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  agora::rtc::VideoCanvas *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VideoCanvas" "', argument " "1"" of type '" "agora::rtc::view_t""'"); 
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VideoCanvas" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VideoCanvas" "', argument " "3"" of type '" "agora::rtc::uid_t""'");
  } 
  arg3 = static_cast< agora::rtc::uid_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VideoCanvas" "', argument " "4"" of type '" "agora::rtc::VIDEO_MIRROR_MODE_TYPE""'");
  } 
  arg4 = static_cast< agora::rtc::VIDEO_MIRROR_MODE_TYPE >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::VideoCanvas *)new agora::rtc::VideoCanvas(arg1,arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__VideoCanvas, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VideoCanvas__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::rtc::view_t arg1 = (agora::rtc::view_t) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  agora::rtc::uid_t arg4 ;
  agora::rtc::VIDEO_MIRROR_MODE_TYPE arg5 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  agora::rtc::VideoCanvas *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VideoCanvas" "', argument " "1"" of type '" "agora::rtc::view_t""'"); 
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VideoCanvas" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_VideoCanvas" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_VideoCanvas" "', argument " "4"" of type '" "agora::rtc::uid_t""'");
  } 
  arg4 = static_cast< agora::rtc::uid_t >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_VideoCanvas" "', argument " "5"" of type '" "agora::rtc::VIDEO_MIRROR_MODE_TYPE""'");
  } 
  arg5 = static_cast< agora::rtc::VIDEO_MIRROR_MODE_TYPE >(val5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::VideoCanvas *)new agora::rtc::VideoCanvas(arg1,arg2,(char const *)arg3,arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__VideoCanvas, SWIG_POINTER_NEW |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VideoCanvas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_VideoCanvas", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_VideoCanvas__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    int _v;
    void *ptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &ptr, 0, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_VideoCanvas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *ptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &ptr, 0, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_VideoCanvas__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *ptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &ptr, 0, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_VideoCanvas__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *ptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &ptr, 0, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_VideoCanvas__SWIG_4(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_VideoCanvas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    agora::rtc::VideoCanvas::VideoCanvas()\n"
    "    agora::rtc::VideoCanvas::VideoCanvas(agora::rtc::view_t,int,agora::rtc::uid_t)\n"
    "    agora::rtc::VideoCanvas::VideoCanvas(agora::rtc::view_t,int,char const *,agora::rtc::uid_t)\n"
    "    agora::rtc::VideoCanvas::VideoCanvas(agora::rtc::view_t,int,agora::rtc::uid_t,agora::rtc::VIDEO_MIRROR_MODE_TYPE)\n"
    "    agora::rtc::VideoCanvas::VideoCanvas(agora::rtc::view_t,int,char const *,agora::rtc::uid_t,agora::rtc::VIDEO_MIRROR_MODE_TYPE)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VideoCanvas(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::VideoCanvas *arg1 = (agora::rtc::VideoCanvas *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__VideoCanvas, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VideoCanvas" "', argument " "1"" of type '" "agora::rtc::VideoCanvas *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::VideoCanvas * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VideoCanvas_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__VideoCanvas, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VideoCanvas_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_BeautyOptions_lighteningContrastLevel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::BeautyOptions *arg1 = (agora::rtc::BeautyOptions *) 0 ;
  agora::rtc::BeautyOptions::LIGHTENING_CONTRAST_LEVEL arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BeautyOptions_lighteningContrastLevel_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__BeautyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BeautyOptions_lighteningContrastLevel_set" "', argument " "1"" of type '" "agora::rtc::BeautyOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::BeautyOptions * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BeautyOptions_lighteningContrastLevel_set" "', argument " "2"" of type '" "agora::rtc::BeautyOptions::LIGHTENING_CONTRAST_LEVEL""'");
  } 
  arg2 = static_cast< agora::rtc::BeautyOptions::LIGHTENING_CONTRAST_LEVEL >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->lighteningContrastLevel = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BeautyOptions_lighteningContrastLevel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::BeautyOptions *arg1 = (agora::rtc::BeautyOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::BeautyOptions::LIGHTENING_CONTRAST_LEVEL result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__BeautyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BeautyOptions_lighteningContrastLevel_get" "', argument " "1"" of type '" "agora::rtc::BeautyOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::BeautyOptions * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::BeautyOptions::LIGHTENING_CONTRAST_LEVEL) ((arg1)->lighteningContrastLevel);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BeautyOptions_lighteningLevel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::BeautyOptions *arg1 = (agora::rtc::BeautyOptions *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BeautyOptions_lighteningLevel_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__BeautyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BeautyOptions_lighteningLevel_set" "', argument " "1"" of type '" "agora::rtc::BeautyOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::BeautyOptions * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BeautyOptions_lighteningLevel_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->lighteningLevel = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BeautyOptions_lighteningLevel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::BeautyOptions *arg1 = (agora::rtc::BeautyOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  float result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__BeautyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BeautyOptions_lighteningLevel_get" "', argument " "1"" of type '" "agora::rtc::BeautyOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::BeautyOptions * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (float) ((arg1)->lighteningLevel);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BeautyOptions_smoothnessLevel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::BeautyOptions *arg1 = (agora::rtc::BeautyOptions *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BeautyOptions_smoothnessLevel_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__BeautyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BeautyOptions_smoothnessLevel_set" "', argument " "1"" of type '" "agora::rtc::BeautyOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::BeautyOptions * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BeautyOptions_smoothnessLevel_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->smoothnessLevel = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BeautyOptions_smoothnessLevel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::BeautyOptions *arg1 = (agora::rtc::BeautyOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  float result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__BeautyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BeautyOptions_smoothnessLevel_get" "', argument " "1"" of type '" "agora::rtc::BeautyOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::BeautyOptions * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (float) ((arg1)->smoothnessLevel);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BeautyOptions_rednessLevel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::BeautyOptions *arg1 = (agora::rtc::BeautyOptions *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BeautyOptions_rednessLevel_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__BeautyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BeautyOptions_rednessLevel_set" "', argument " "1"" of type '" "agora::rtc::BeautyOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::BeautyOptions * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BeautyOptions_rednessLevel_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->rednessLevel = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BeautyOptions_rednessLevel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::BeautyOptions *arg1 = (agora::rtc::BeautyOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  float result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__BeautyOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BeautyOptions_rednessLevel_get" "', argument " "1"" of type '" "agora::rtc::BeautyOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::BeautyOptions * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (float) ((arg1)->rednessLevel);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BeautyOptions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::rtc::BeautyOptions::LIGHTENING_CONTRAST_LEVEL arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  agora::rtc::BeautyOptions *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BeautyOptions" "', argument " "1"" of type '" "agora::rtc::BeautyOptions::LIGHTENING_CONTRAST_LEVEL""'");
  } 
  arg1 = static_cast< agora::rtc::BeautyOptions::LIGHTENING_CONTRAST_LEVEL >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BeautyOptions" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BeautyOptions" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_BeautyOptions" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::BeautyOptions *)new agora::rtc::BeautyOptions(arg1,arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__BeautyOptions, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BeautyOptions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  agora::rtc::BeautyOptions *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::BeautyOptions *)new agora::rtc::BeautyOptions();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__BeautyOptions, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BeautyOptions(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_BeautyOptions", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_BeautyOptions__SWIG_1(self, argc, argv);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_BeautyOptions__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_BeautyOptions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    agora::rtc::BeautyOptions::BeautyOptions(agora::rtc::BeautyOptions::LIGHTENING_CONTRAST_LEVEL,float,float,float)\n"
    "    agora::rtc::BeautyOptions::BeautyOptions()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_BeautyOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::BeautyOptions *arg1 = (agora::rtc::BeautyOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__BeautyOptions, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BeautyOptions" "', argument " "1"" of type '" "agora::rtc::BeautyOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::BeautyOptions * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BeautyOptions_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__BeautyOptions, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BeautyOptions_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_UserInfo_uid_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::UserInfo *arg1 = (agora::rtc::UserInfo *) 0 ;
  agora::rtc::uid_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "UserInfo_uid_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__UserInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UserInfo_uid_set" "', argument " "1"" of type '" "agora::rtc::UserInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::UserInfo * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UserInfo_uid_set" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->uid = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UserInfo_uid_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::UserInfo *arg1 = (agora::rtc::UserInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::uid_t result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__UserInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UserInfo_uid_get" "', argument " "1"" of type '" "agora::rtc::UserInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::UserInfo * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::uid_t) ((arg1)->uid);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UserInfo_userAccount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::UserInfo *arg1 = (agora::rtc::UserInfo *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[agora::rtc::MAX_USER_ACCOUNT_LENGTH] ;
  int res2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "UserInfo_userAccount_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__UserInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UserInfo_userAccount_set" "', argument " "1"" of type '" "agora::rtc::UserInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::UserInfo * >(argp1);
  res2 = SWIG_AsCharArray(swig_obj[1], temp2, agora::rtc::MAX_USER_ACCOUNT_LENGTH);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UserInfo_userAccount_set" "', argument " "2"" of type '" "char [agora::rtc::MAX_USER_ACCOUNT_LENGTH]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg2) memcpy(arg1->userAccount,arg2,agora::rtc::MAX_USER_ACCOUNT_LENGTH*sizeof(char));
    else memset(arg1->userAccount,0,agora::rtc::MAX_USER_ACCOUNT_LENGTH*sizeof(char));
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UserInfo_userAccount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::UserInfo *arg1 = (agora::rtc::UserInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__UserInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UserInfo_userAccount_get" "', argument " "1"" of type '" "agora::rtc::UserInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::UserInfo * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *)(char *) ((arg1)->userAccount);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  {
    size_t size = SWIG_strnlen(result, agora::rtc::MAX_USER_ACCOUNT_LENGTH);
    
    
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UserInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::UserInfo *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_UserInfo", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::UserInfo *)new agora::rtc::UserInfo();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__UserInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UserInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::UserInfo *arg1 = (agora::rtc::UserInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__UserInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UserInfo" "', argument " "1"" of type '" "agora::rtc::UserInfo *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::UserInfo * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UserInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__UserInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *UserInfo_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_RtcEngineBridge_initEventHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::IRtcEngineEventHandler *arg2 = (agora::rtc::IRtcEngineEventHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_initEventHandler", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_initEventHandler" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IRtcEngineEventHandler, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_initEventHandler" "', argument " "2"" of type '" "agora::rtc::IRtcEngineEventHandler *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IRtcEngineEventHandler * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->initEventHandler(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_release__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_release" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_release" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->release(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_release__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_release" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->release();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_release(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RtcEngineBridge_release", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_agora__common__RtcEngineBridge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_RtcEngineBridge_release__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_agora__common__RtcEngineBridge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RtcEngineBridge_release__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RtcEngineBridge_release'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    agora::common::RtcEngineBridge::release(bool)\n"
    "    agora::common::RtcEngineBridge::release()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_createChannel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  agora::common::RtcChannelBridge *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_createChannel", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_createChannel" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_createChannel" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::common::RtcChannelBridge *)(arg1)->createChannel((char const *)arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_createVideoDeviceManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  agora::common::VideoDeviceManager *result = 0 ;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_createVideoDeviceManager" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::common::VideoDeviceManager *)(arg1)->createVideoDeviceManager(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__common__VideoDeviceManager, 0 |  0 );
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_createAudioPlaybackDeviceManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  agora::common::AudioPlaybackDeviceManager *result = 0 ;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_createAudioPlaybackDeviceManager" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::common::AudioPlaybackDeviceManager *)(arg1)->createAudioPlaybackDeviceManager(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__common__AudioPlaybackDeviceManager, 0 |  0 );
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_createAudioRecordingDeviceManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  agora::common::AudioRecordingDeviceManager *result = 0 ;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_createAudioRecordingDeviceManager" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::common::AudioRecordingDeviceManager *)(arg1)->createAudioRecordingDeviceManager(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__common__AudioRecordingDeviceManager, 0 |  0 );
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_initialize", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_initialize" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_initialize" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(swig_obj[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineBridge_initialize" "', argument " "3"" of type '" "void *""'"); 
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineBridge_initialize" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->initialize((char const *)arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setChannelProfile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::CHANNEL_PROFILE_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setChannelProfile", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setChannelProfile" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setChannelProfile" "', argument " "2"" of type '" "agora::rtc::CHANNEL_PROFILE_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::CHANNEL_PROFILE_TYPE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setChannelProfile(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setClientRole(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::CLIENT_ROLE_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setClientRole", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setClientRole" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setClientRole" "', argument " "2"" of type '" "agora::rtc::CLIENT_ROLE_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::CLIENT_ROLE_TYPE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setClientRole(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_joinChannel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  agora::rtc::uid_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_joinChannel", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_joinChannel" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_joinChannel" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineBridge_joinChannel" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RtcEngineBridge_joinChannel" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcEngineBridge_joinChannel" "', argument " "5"" of type '" "agora::rtc::uid_t""'");
  } 
  arg5 = static_cast< agora::rtc::uid_t >(val5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->joinChannel((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_switchChannel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_switchChannel", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_switchChannel" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_switchChannel" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineBridge_switchChannel" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->switchChannel((char const *)arg2,(char const *)arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_leaveChannel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_leaveChannel" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->leaveChannel();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_renewToken(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_renewToken", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_renewToken" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_renewToken" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->renewToken((char const *)arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_registerLocalUserAccount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_registerLocalUserAccount", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_registerLocalUserAccount" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_registerLocalUserAccount" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineBridge_registerLocalUserAccount" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->registerLocalUserAccount((char const *)arg2,(char const *)arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_joinChannelWithUserAccount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_joinChannelWithUserAccount", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_joinChannelWithUserAccount" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_joinChannelWithUserAccount" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineBridge_joinChannelWithUserAccount" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RtcEngineBridge_joinChannelWithUserAccount" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->joinChannelWithUserAccount((char const *)arg2,(char const *)arg3,(char const *)arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_getUserInfoByUserAccount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  agora::rtc::UserInfo *arg3 = (agora::rtc::UserInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_getUserInfoByUserAccount", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_getUserInfoByUserAccount" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_getUserInfoByUserAccount" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_agora__rtc__UserInfo, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineBridge_getUserInfoByUserAccount" "', argument " "3"" of type '" "agora::rtc::UserInfo *""'"); 
  }
  arg3 = reinterpret_cast< agora::rtc::UserInfo * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getUserInfoByUserAccount((char const *)arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_getUserInfoByUid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::uid_t arg2 ;
  agora::rtc::UserInfo *arg3 = (agora::rtc::UserInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_getUserInfoByUid", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_getUserInfoByUid" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_getUserInfoByUid" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_agora__rtc__UserInfo, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineBridge_getUserInfoByUid" "', argument " "3"" of type '" "agora::rtc::UserInfo *""'"); 
  }
  arg3 = reinterpret_cast< agora::rtc::UserInfo * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getUserInfoByUid(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_startEchoTest__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_startEchoTest" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->startEchoTest();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_startEchoTest__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_startEchoTest" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_startEchoTest" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->startEchoTest(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_startEchoTest(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RtcEngineBridge_startEchoTest", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_agora__common__RtcEngineBridge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_RtcEngineBridge_startEchoTest__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_agora__common__RtcEngineBridge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RtcEngineBridge_startEchoTest__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RtcEngineBridge_startEchoTest'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    agora::common::RtcEngineBridge::startEchoTest()\n"
    "    agora::common::RtcEngineBridge::startEchoTest(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_stopEchoTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_stopEchoTest" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->stopEchoTest();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_enableVideo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_enableVideo" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->enableVideo();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_disableVideo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_disableVideo" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->disableVideo();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setVideoProfile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::VIDEO_PROFILE_TYPE arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setVideoProfile", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setVideoProfile" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setVideoProfile" "', argument " "2"" of type '" "agora::rtc::VIDEO_PROFILE_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::VIDEO_PROFILE_TYPE >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_setVideoProfile" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setVideoProfile(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setVideoEncoderConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::VideoEncoderConfiguration *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setVideoEncoderConfiguration", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setVideoEncoderConfiguration" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__VideoEncoderConfiguration,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_setVideoEncoderConfiguration" "', argument " "2"" of type '" "agora::rtc::VideoEncoderConfiguration const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineBridge_setVideoEncoderConfiguration" "', argument " "2"" of type '" "agora::rtc::VideoEncoderConfiguration const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::VideoEncoderConfiguration * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setVideoEncoderConfiguration((agora::rtc::VideoEncoderConfiguration const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setCameraCapturerConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::CameraCapturerConfiguration *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setCameraCapturerConfiguration", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setCameraCapturerConfiguration" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__CameraCapturerConfiguration,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_setCameraCapturerConfiguration" "', argument " "2"" of type '" "agora::rtc::CameraCapturerConfiguration const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineBridge_setCameraCapturerConfiguration" "', argument " "2"" of type '" "agora::rtc::CameraCapturerConfiguration const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::CameraCapturerConfiguration * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setCameraCapturerConfiguration((agora::rtc::CameraCapturerConfiguration const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setupLocalVideo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::VideoCanvas *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setupLocalVideo", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setupLocalVideo" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__VideoCanvas,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_setupLocalVideo" "', argument " "2"" of type '" "agora::rtc::VideoCanvas const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineBridge_setupLocalVideo" "', argument " "2"" of type '" "agora::rtc::VideoCanvas const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::VideoCanvas * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setupLocalVideo((agora::rtc::VideoCanvas const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setupRemoteVideo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::VideoCanvas *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setupRemoteVideo", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setupRemoteVideo" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__VideoCanvas,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_setupRemoteVideo" "', argument " "2"" of type '" "agora::rtc::VideoCanvas const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineBridge_setupRemoteVideo" "', argument " "2"" of type '" "agora::rtc::VideoCanvas const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::VideoCanvas * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setupRemoteVideo((agora::rtc::VideoCanvas const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_startPreview(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_startPreview" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->startPreview();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setRemoteUserPriority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::uid_t arg2 ;
  agora::rtc::PRIORITY_TYPE arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setRemoteUserPriority", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setRemoteUserPriority" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setRemoteUserPriority" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_setRemoteUserPriority" "', argument " "3"" of type '" "agora::rtc::PRIORITY_TYPE""'");
  } 
  arg3 = static_cast< agora::rtc::PRIORITY_TYPE >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setRemoteUserPriority(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_stopPreview(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_stopPreview" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->stopPreview();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_enableAudio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_enableAudio" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->enableAudio();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_enableLocalAudio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_enableLocalAudio", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_enableLocalAudio" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_enableLocalAudio" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->enableLocalAudio(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_disableAudio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_disableAudio" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->disableAudio();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setAudioProfile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::AUDIO_PROFILE_TYPE arg2 ;
  agora::rtc::AUDIO_SCENARIO_TYPE arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setAudioProfile", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setAudioProfile" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setAudioProfile" "', argument " "2"" of type '" "agora::rtc::AUDIO_PROFILE_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::AUDIO_PROFILE_TYPE >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_setAudioProfile" "', argument " "3"" of type '" "agora::rtc::AUDIO_SCENARIO_TYPE""'");
  } 
  arg3 = static_cast< agora::rtc::AUDIO_SCENARIO_TYPE >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setAudioProfile(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_muteLocalAudioStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_muteLocalAudioStream", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_muteLocalAudioStream" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_muteLocalAudioStream" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->muteLocalAudioStream(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_muteAllRemoteAudioStreams(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_muteAllRemoteAudioStreams", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_muteAllRemoteAudioStreams" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_muteAllRemoteAudioStreams" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->muteAllRemoteAudioStreams(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setDefaultMuteAllRemoteVideoStreams(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setDefaultMuteAllRemoteVideoStreams", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setDefaultMuteAllRemoteVideoStreams" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setDefaultMuteAllRemoteVideoStreams" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setDefaultMuteAllRemoteVideoStreams(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_adjustUserPlaybackSignalVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_adjustUserPlaybackSignalVolume", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_adjustUserPlaybackSignalVolume" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_adjustUserPlaybackSignalVolume" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_adjustUserPlaybackSignalVolume" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->adjustUserPlaybackSignalVolume(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_muteRemoteAudioStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::uid_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_muteRemoteAudioStream", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_muteRemoteAudioStream" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_muteRemoteAudioStream" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_muteRemoteAudioStream" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->muteRemoteAudioStream(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_muteLocalVideoStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_muteLocalVideoStream", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_muteLocalVideoStream" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_muteLocalVideoStream" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->muteLocalVideoStream(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_enableLocalVideo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_enableLocalVideo", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_enableLocalVideo" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_enableLocalVideo" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->enableLocalVideo(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_muteAllRemoteVideoStreams(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_muteAllRemoteVideoStreams", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_muteAllRemoteVideoStreams" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_muteAllRemoteVideoStreams" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->muteAllRemoteVideoStreams(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setDefaultMuteAllRemoteAudioStreams(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setDefaultMuteAllRemoteAudioStreams", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setDefaultMuteAllRemoteAudioStreams" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setDefaultMuteAllRemoteAudioStreams" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setDefaultMuteAllRemoteAudioStreams(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_muteRemoteVideoStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::uid_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_muteRemoteVideoStream", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_muteRemoteVideoStream" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_muteRemoteVideoStream" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_muteRemoteVideoStream" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->muteRemoteVideoStream(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setRemoteVideoStreamType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::uid_t arg2 ;
  agora::rtc::REMOTE_VIDEO_STREAM_TYPE arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setRemoteVideoStreamType", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setRemoteVideoStreamType" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setRemoteVideoStreamType" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_setRemoteVideoStreamType" "', argument " "3"" of type '" "agora::rtc::REMOTE_VIDEO_STREAM_TYPE""'");
  } 
  arg3 = static_cast< agora::rtc::REMOTE_VIDEO_STREAM_TYPE >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setRemoteVideoStreamType(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setRemoteDefaultVideoStreamType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::REMOTE_VIDEO_STREAM_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setRemoteDefaultVideoStreamType", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setRemoteDefaultVideoStreamType" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setRemoteDefaultVideoStreamType" "', argument " "2"" of type '" "agora::rtc::REMOTE_VIDEO_STREAM_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::REMOTE_VIDEO_STREAM_TYPE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setRemoteDefaultVideoStreamType(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_enableAudioVolumeIndication(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_enableAudioVolumeIndication", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_enableAudioVolumeIndication" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_enableAudioVolumeIndication" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_enableAudioVolumeIndication" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineBridge_enableAudioVolumeIndication" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->enableAudioVolumeIndication(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_startAudioRecording__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  agora::rtc::AUDIO_RECORDING_QUALITY_TYPE arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_startAudioRecording" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_startAudioRecording" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_startAudioRecording" "', argument " "3"" of type '" "agora::rtc::AUDIO_RECORDING_QUALITY_TYPE""'");
  } 
  arg3 = static_cast< agora::rtc::AUDIO_RECORDING_QUALITY_TYPE >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->startAudioRecording((char const *)arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_startAudioRecording__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  agora::rtc::AUDIO_RECORDING_QUALITY_TYPE arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_startAudioRecording" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_startAudioRecording" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_startAudioRecording" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineBridge_startAudioRecording" "', argument " "4"" of type '" "agora::rtc::AUDIO_RECORDING_QUALITY_TYPE""'");
  } 
  arg4 = static_cast< agora::rtc::AUDIO_RECORDING_QUALITY_TYPE >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->startAudioRecording((char const *)arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_startAudioRecording(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RtcEngineBridge_startAudioRecording", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_agora__common__RtcEngineBridge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RtcEngineBridge_startAudioRecording__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_agora__common__RtcEngineBridge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RtcEngineBridge_startAudioRecording__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RtcEngineBridge_startAudioRecording'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    agora::common::RtcEngineBridge::startAudioRecording(char const *,agora::rtc::AUDIO_RECORDING_QUALITY_TYPE)\n"
    "    agora::common::RtcEngineBridge::startAudioRecording(char const *,int,agora::rtc::AUDIO_RECORDING_QUALITY_TYPE)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_stopAudioRecording(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_stopAudioRecording" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->stopAudioRecording();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setRemoteVoicePosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::uid_t arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setRemoteVoicePosition", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setRemoteVoicePosition" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setRemoteVoicePosition" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_setRemoteVoicePosition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineBridge_setRemoteVoicePosition" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setRemoteVoicePosition(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setLogFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setLogFile", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setLogFile" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_setLogFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setLogFile((char const *)arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setLogFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setLogFilter", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setLogFilter" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setLogFilter" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setLogFilter(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setLogFileSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setLogFileSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setLogFileSize" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setLogFileSize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setLogFileSize(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setLocalRenderMode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::RENDER_MODE_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setLocalRenderMode" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setLocalRenderMode" "', argument " "2"" of type '" "agora::rtc::RENDER_MODE_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::RENDER_MODE_TYPE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setLocalRenderMode(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setLocalRenderMode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::RENDER_MODE_TYPE arg2 ;
  agora::rtc::VIDEO_MIRROR_MODE_TYPE arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setLocalRenderMode" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setLocalRenderMode" "', argument " "2"" of type '" "agora::rtc::RENDER_MODE_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::RENDER_MODE_TYPE >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_setLocalRenderMode" "', argument " "3"" of type '" "agora::rtc::VIDEO_MIRROR_MODE_TYPE""'");
  } 
  arg3 = static_cast< agora::rtc::VIDEO_MIRROR_MODE_TYPE >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setLocalRenderMode(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setLocalRenderMode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setLocalRenderMode", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_agora__common__RtcEngineBridge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RtcEngineBridge_setLocalRenderMode__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_agora__common__RtcEngineBridge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RtcEngineBridge_setLocalRenderMode__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RtcEngineBridge_setLocalRenderMode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    agora::common::RtcEngineBridge::setLocalRenderMode(agora::rtc::RENDER_MODE_TYPE)\n"
    "    agora::common::RtcEngineBridge::setLocalRenderMode(agora::rtc::RENDER_MODE_TYPE,agora::rtc::VIDEO_MIRROR_MODE_TYPE)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setRemoteRenderMode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::uid_t arg2 ;
  agora::rtc::RENDER_MODE_TYPE arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setRemoteRenderMode" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setRemoteRenderMode" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_setRemoteRenderMode" "', argument " "3"" of type '" "agora::rtc::RENDER_MODE_TYPE""'");
  } 
  arg3 = static_cast< agora::rtc::RENDER_MODE_TYPE >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setRemoteRenderMode(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setRemoteRenderMode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::uid_t arg2 ;
  agora::rtc::RENDER_MODE_TYPE arg3 ;
  agora::rtc::VIDEO_MIRROR_MODE_TYPE arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setRemoteRenderMode" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setRemoteRenderMode" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_setRemoteRenderMode" "', argument " "3"" of type '" "agora::rtc::RENDER_MODE_TYPE""'");
  } 
  arg3 = static_cast< agora::rtc::RENDER_MODE_TYPE >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineBridge_setRemoteRenderMode" "', argument " "4"" of type '" "agora::rtc::VIDEO_MIRROR_MODE_TYPE""'");
  } 
  arg4 = static_cast< agora::rtc::VIDEO_MIRROR_MODE_TYPE >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setRemoteRenderMode(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setRemoteRenderMode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setRemoteRenderMode", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_agora__common__RtcEngineBridge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RtcEngineBridge_setRemoteRenderMode__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_agora__common__RtcEngineBridge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RtcEngineBridge_setRemoteRenderMode__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RtcEngineBridge_setRemoteRenderMode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    agora::common::RtcEngineBridge::setRemoteRenderMode(agora::rtc::uid_t,agora::rtc::RENDER_MODE_TYPE)\n"
    "    agora::common::RtcEngineBridge::setRemoteRenderMode(agora::rtc::uid_t,agora::rtc::RENDER_MODE_TYPE,agora::rtc::VIDEO_MIRROR_MODE_TYPE)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setLocalVideoMirrorMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::VIDEO_MIRROR_MODE_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setLocalVideoMirrorMode", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setLocalVideoMirrorMode" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setLocalVideoMirrorMode" "', argument " "2"" of type '" "agora::rtc::VIDEO_MIRROR_MODE_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::VIDEO_MIRROR_MODE_TYPE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setLocalVideoMirrorMode(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_enableDualStreamMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_enableDualStreamMode", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_enableDualStreamMode" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_enableDualStreamMode" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->enableDualStreamMode(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_adjustRecordingSignalVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_adjustRecordingSignalVolume", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_adjustRecordingSignalVolume" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_adjustRecordingSignalVolume" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->adjustRecordingSignalVolume(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_adjustPlaybackSignalVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_adjustPlaybackSignalVolume", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_adjustPlaybackSignalVolume" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_adjustPlaybackSignalVolume" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->adjustPlaybackSignalVolume(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_enableWebSdkInteroperability(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_enableWebSdkInteroperability", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_enableWebSdkInteroperability" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_enableWebSdkInteroperability" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->enableWebSdkInteroperability(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setVideoQualityParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setVideoQualityParameters", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setVideoQualityParameters" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setVideoQualityParameters" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setVideoQualityParameters(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setLocalPublishFallbackOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::STREAM_FALLBACK_OPTIONS arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setLocalPublishFallbackOption", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setLocalPublishFallbackOption" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setLocalPublishFallbackOption" "', argument " "2"" of type '" "agora::rtc::STREAM_FALLBACK_OPTIONS""'");
  } 
  arg2 = static_cast< agora::rtc::STREAM_FALLBACK_OPTIONS >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setLocalPublishFallbackOption(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setRemoteSubscribeFallbackOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::STREAM_FALLBACK_OPTIONS arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setRemoteSubscribeFallbackOption", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setRemoteSubscribeFallbackOption" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setRemoteSubscribeFallbackOption" "', argument " "2"" of type '" "agora::rtc::STREAM_FALLBACK_OPTIONS""'");
  } 
  arg2 = static_cast< agora::rtc::STREAM_FALLBACK_OPTIONS >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setRemoteSubscribeFallbackOption(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_rate", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_rate" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_rate" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_rate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RtcEngineBridge_rate" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->rate((char const *)arg2,arg3,(char const *)arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_complain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_complain", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_complain" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_complain" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineBridge_complain" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->complain((char const *)arg2,(char const *)arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_getVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_getVersion" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *)(arg1)->getVersion();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_enableLastmileTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_enableLastmileTest" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->enableLastmileTest();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_disableLastmileTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_disableLastmileTest" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->disableLastmileTest();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_startLastmileProbeTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::LastmileProbeConfig *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_startLastmileProbeTest", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_startLastmileProbeTest" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__LastmileProbeConfig,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_startLastmileProbeTest" "', argument " "2"" of type '" "agora::rtc::LastmileProbeConfig const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineBridge_startLastmileProbeTest" "', argument " "2"" of type '" "agora::rtc::LastmileProbeConfig const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::LastmileProbeConfig * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->startLastmileProbeTest((agora::rtc::LastmileProbeConfig const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_stopLastmileProbeTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_stopLastmileProbeTest" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->stopLastmileProbeTest();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_getErrorDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_getErrorDescription", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_getErrorDescription" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_getErrorDescription" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *)(arg1)->getErrorDescription(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setEncryptionSecret(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setEncryptionSecret", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setEncryptionSecret" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_setEncryptionSecret" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setEncryptionSecret((char const *)arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setEncryptionMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setEncryptionMode", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setEncryptionMode" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_setEncryptionMode" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setEncryptionMode((char const *)arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_registerPacketObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::IPacketObserver *arg2 = (agora::rtc::IPacketObserver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_registerPacketObserver", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_registerPacketObserver" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IPacketObserver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_registerPacketObserver" "', argument " "2"" of type '" "agora::rtc::IPacketObserver *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IPacketObserver * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->registerPacketObserver(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_createDataStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int *arg2 = (int *) 0 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_createDataStream", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_createDataStream" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_createDataStream" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_createDataStream" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineBridge_createDataStream" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->createDataStream(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_sendStreamMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_sendStreamMessage", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_sendStreamMessage" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_sendStreamMessage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineBridge_sendStreamMessage" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineBridge_sendStreamMessage" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->sendStreamMessage(arg2,(char const *)arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_addPublishStreamUrl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_addPublishStreamUrl", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_addPublishStreamUrl" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_addPublishStreamUrl" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_addPublishStreamUrl" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->addPublishStreamUrl((char const *)arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_removePublishStreamUrl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_removePublishStreamUrl", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_removePublishStreamUrl" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_removePublishStreamUrl" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->removePublishStreamUrl((char const *)arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setLiveTranscoding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::LiveTranscoding *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setLiveTranscoding", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setLiveTranscoding" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__LiveTranscoding,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_setLiveTranscoding" "', argument " "2"" of type '" "agora::rtc::LiveTranscoding const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineBridge_setLiveTranscoding" "', argument " "2"" of type '" "agora::rtc::LiveTranscoding const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setLiveTranscoding((agora::rtc::LiveTranscoding const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_addVideoWatermark__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::RtcImage *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_addVideoWatermark" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__RtcImage,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_addVideoWatermark" "', argument " "2"" of type '" "agora::rtc::RtcImage const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineBridge_addVideoWatermark" "', argument " "2"" of type '" "agora::rtc::RtcImage const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::RtcImage * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->addVideoWatermark((agora::rtc::RtcImage const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_addVideoWatermark__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  agora::rtc::WatermarkOptions *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_addVideoWatermark" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_addVideoWatermark" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_agora__rtc__WatermarkOptions,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineBridge_addVideoWatermark" "', argument " "3"" of type '" "agora::rtc::WatermarkOptions const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineBridge_addVideoWatermark" "', argument " "3"" of type '" "agora::rtc::WatermarkOptions const &""'"); 
  }
  arg3 = reinterpret_cast< agora::rtc::WatermarkOptions * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->addVideoWatermark((char const *)arg2,(agora::rtc::WatermarkOptions const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_addVideoWatermark(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RtcEngineBridge_addVideoWatermark", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_agora__common__RtcEngineBridge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_agora__rtc__RtcImage, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RtcEngineBridge_addVideoWatermark__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_agora__common__RtcEngineBridge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_agora__rtc__WatermarkOptions, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RtcEngineBridge_addVideoWatermark__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RtcEngineBridge_addVideoWatermark'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    agora::common::RtcEngineBridge::addVideoWatermark(agora::rtc::RtcImage const &)\n"
    "    agora::common::RtcEngineBridge::addVideoWatermark(char const *,agora::rtc::WatermarkOptions const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_clearVideoWatermarks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_clearVideoWatermarks" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->clearVideoWatermarks();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setBeautyEffectOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  bool arg2 ;
  agora::rtc::BeautyOptions arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setBeautyEffectOptions", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setBeautyEffectOptions" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setBeautyEffectOptions" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_agora__rtc__BeautyOptions,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineBridge_setBeautyEffectOptions" "', argument " "3"" of type '" "agora::rtc::BeautyOptions""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineBridge_setBeautyEffectOptions" "', argument " "3"" of type '" "agora::rtc::BeautyOptions""'");
    } else {
      agora::rtc::BeautyOptions * temp = reinterpret_cast< agora::rtc::BeautyOptions * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setBeautyEffectOptions(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_addInjectStreamUrl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  agora::rtc::InjectStreamConfig *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_addInjectStreamUrl", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_addInjectStreamUrl" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_addInjectStreamUrl" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_agora__rtc__InjectStreamConfig,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineBridge_addInjectStreamUrl" "', argument " "3"" of type '" "agora::rtc::InjectStreamConfig const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineBridge_addInjectStreamUrl" "', argument " "3"" of type '" "agora::rtc::InjectStreamConfig const &""'"); 
  }
  arg3 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->addInjectStreamUrl((char const *)arg2,(agora::rtc::InjectStreamConfig const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_startChannelMediaRelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::ChannelMediaRelayConfiguration *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_startChannelMediaRelay", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_startChannelMediaRelay" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__ChannelMediaRelayConfiguration,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_startChannelMediaRelay" "', argument " "2"" of type '" "agora::rtc::ChannelMediaRelayConfiguration const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineBridge_startChannelMediaRelay" "', argument " "2"" of type '" "agora::rtc::ChannelMediaRelayConfiguration const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::ChannelMediaRelayConfiguration * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->startChannelMediaRelay((agora::rtc::ChannelMediaRelayConfiguration const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_updateChannelMediaRelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::ChannelMediaRelayConfiguration *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_updateChannelMediaRelay", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_updateChannelMediaRelay" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__ChannelMediaRelayConfiguration,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_updateChannelMediaRelay" "', argument " "2"" of type '" "agora::rtc::ChannelMediaRelayConfiguration const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineBridge_updateChannelMediaRelay" "', argument " "2"" of type '" "agora::rtc::ChannelMediaRelayConfiguration const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::ChannelMediaRelayConfiguration * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->updateChannelMediaRelay((agora::rtc::ChannelMediaRelayConfiguration const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_stopChannelMediaRelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_stopChannelMediaRelay" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->stopChannelMediaRelay();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_removeInjectStreamUrl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_removeInjectStreamUrl", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_removeInjectStreamUrl" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_removeInjectStreamUrl" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->removeInjectStreamUrl((char const *)arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_getConnectionState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::CONNECTION_STATE_TYPE result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_getConnectionState" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::CONNECTION_STATE_TYPE)(arg1)->getConnectionState();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setParameters", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setParameters" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_setParameters" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setParameters((char const *)arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setPlaybackDeviceVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setPlaybackDeviceVolume", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setPlaybackDeviceVolume" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setPlaybackDeviceVolume" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setPlaybackDeviceVolume(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_startAudioMixing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_startAudioMixing", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_startAudioMixing" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_startAudioMixing" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_startAudioMixing" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineBridge_startAudioMixing" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcEngineBridge_startAudioMixing" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->startAudioMixing((char const *)arg2,arg3,arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_stopAudioMixing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_stopAudioMixing" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->stopAudioMixing();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_pauseAudioMixing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_pauseAudioMixing" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->pauseAudioMixing();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_resumeAudioMixing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_resumeAudioMixing" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->resumeAudioMixing();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setHighQualityAudioParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setHighQualityAudioParameters", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setHighQualityAudioParameters" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setHighQualityAudioParameters" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_setHighQualityAudioParameters" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineBridge_setHighQualityAudioParameters" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setHighQualityAudioParameters(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_adjustAudioMixingVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_adjustAudioMixingVolume", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_adjustAudioMixingVolume" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_adjustAudioMixingVolume" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->adjustAudioMixingVolume(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_adjustAudioMixingPlayoutVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_adjustAudioMixingPlayoutVolume", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_adjustAudioMixingPlayoutVolume" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_adjustAudioMixingPlayoutVolume" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->adjustAudioMixingPlayoutVolume(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_getAudioMixingPlayoutVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_getAudioMixingPlayoutVolume" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getAudioMixingPlayoutVolume();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_adjustAudioMixingPublishVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_adjustAudioMixingPublishVolume", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_adjustAudioMixingPublishVolume" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_adjustAudioMixingPublishVolume" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->adjustAudioMixingPublishVolume(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_getAudioMixingPublishVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_getAudioMixingPublishVolume" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getAudioMixingPublishVolume();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_getAudioMixingDuration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_getAudioMixingDuration" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getAudioMixingDuration();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_getAudioMixingCurrentPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_getAudioMixingCurrentPosition" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getAudioMixingCurrentPosition();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setAudioMixingPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setAudioMixingPosition", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setAudioMixingPosition" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setAudioMixingPosition" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setAudioMixingPosition(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setAudioMixingPitch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setAudioMixingPitch", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setAudioMixingPitch" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setAudioMixingPitch" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setAudioMixingPitch(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_getEffectsVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_getEffectsVolume" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getEffectsVolume();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setEffectsVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setEffectsVolume", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setEffectsVolume" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setEffectsVolume" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setEffectsVolume(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setVolumeOfEffect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setVolumeOfEffect", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setVolumeOfEffect" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setVolumeOfEffect" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_setVolumeOfEffect" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setVolumeOfEffect(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_playEffect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  int arg7 ;
  bool arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  int result;
  
  if ((nobjs < 8) || (nobjs > 8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_playEffect" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_playEffect" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineBridge_playEffect" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineBridge_playEffect" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcEngineBridge_playEffect" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RtcEngineBridge_playEffect" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RtcEngineBridge_playEffect" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_bool(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "RtcEngineBridge_playEffect" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->playEffect(arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_playEffect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int result;
  
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_playEffect" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_playEffect" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineBridge_playEffect" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineBridge_playEffect" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcEngineBridge_playEffect" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RtcEngineBridge_playEffect" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RtcEngineBridge_playEffect" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->playEffect(arg2,(char const *)arg3,arg4,arg5,arg6,arg7);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_playEffect(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RtcEngineBridge_playEffect", 0, 8, argv))) SWIG_fail;
  --argc;
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_agora__common__RtcEngineBridge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_RtcEngineBridge_playEffect__SWIG_1(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_agora__common__RtcEngineBridge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_RtcEngineBridge_playEffect__SWIG_0(self, argc, argv);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RtcEngineBridge_playEffect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    agora::common::RtcEngineBridge::playEffect(int,char const *,int,double,double,int,bool)\n"
    "    agora::common::RtcEngineBridge::playEffect(int,char const *,int,double,double,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_stopEffect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_stopEffect", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_stopEffect" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_stopEffect" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->stopEffect(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_stopAllEffects(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_stopAllEffects" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->stopAllEffects();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_preloadEffect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_preloadEffect", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_preloadEffect" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_preloadEffect" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineBridge_preloadEffect" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->preloadEffect(arg2,(char const *)arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_unloadEffect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_unloadEffect", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_unloadEffect" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_unloadEffect" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->unloadEffect(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_pauseEffect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_pauseEffect", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_pauseEffect" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_pauseEffect" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->pauseEffect(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_pauseAllEffects(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_pauseAllEffects" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->pauseAllEffects();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_resumeEffect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_resumeEffect", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_resumeEffect" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_resumeEffect" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->resumeEffect(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_resumeAllEffects(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_resumeAllEffects" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->resumeAllEffects();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_enableSoundPositionIndication(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_enableSoundPositionIndication", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_enableSoundPositionIndication" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_enableSoundPositionIndication" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->enableSoundPositionIndication(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setLocalVoicePitch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setLocalVoicePitch", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setLocalVoicePitch" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setLocalVoicePitch" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setLocalVoicePitch(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setLocalVoiceEqualization(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::AUDIO_EQUALIZATION_BAND_FREQUENCY arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setLocalVoiceEqualization", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setLocalVoiceEqualization" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setLocalVoiceEqualization" "', argument " "2"" of type '" "agora::rtc::AUDIO_EQUALIZATION_BAND_FREQUENCY""'");
  } 
  arg2 = static_cast< agora::rtc::AUDIO_EQUALIZATION_BAND_FREQUENCY >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_setLocalVoiceEqualization" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setLocalVoiceEqualization(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setLocalVoiceReverb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::AUDIO_REVERB_TYPE arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setLocalVoiceReverb", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setLocalVoiceReverb" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setLocalVoiceReverb" "', argument " "2"" of type '" "agora::rtc::AUDIO_REVERB_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::AUDIO_REVERB_TYPE >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_setLocalVoiceReverb" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setLocalVoiceReverb(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setLocalVoiceChanger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::VOICE_CHANGER_PRESET arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setLocalVoiceChanger", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setLocalVoiceChanger" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setLocalVoiceChanger" "', argument " "2"" of type '" "agora::rtc::VOICE_CHANGER_PRESET""'");
  } 
  arg2 = static_cast< agora::rtc::VOICE_CHANGER_PRESET >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setLocalVoiceChanger(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setLocalVoiceReverbPreset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::AUDIO_REVERB_PRESET arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setLocalVoiceReverbPreset", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setLocalVoiceReverbPreset" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setLocalVoiceReverbPreset" "', argument " "2"" of type '" "agora::rtc::AUDIO_REVERB_PRESET""'");
  } 
  arg2 = static_cast< agora::rtc::AUDIO_REVERB_PRESET >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setLocalVoiceReverbPreset(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setExternalAudioSource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  bool arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setExternalAudioSource", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setExternalAudioSource" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setExternalAudioSource" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_setExternalAudioSource" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineBridge_setExternalAudioSource" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setExternalAudioSource(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setExternalAudioSink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  bool arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setExternalAudioSink", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setExternalAudioSink" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setExternalAudioSink" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_setExternalAudioSink" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineBridge_setExternalAudioSink" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setExternalAudioSink(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setRecordingAudioFrameParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  int arg3 ;
  agora::rtc::RAW_AUDIO_FRAME_OP_MODE_TYPE arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setRecordingAudioFrameParameters", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setRecordingAudioFrameParameters" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setRecordingAudioFrameParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_setRecordingAudioFrameParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineBridge_setRecordingAudioFrameParameters" "', argument " "4"" of type '" "agora::rtc::RAW_AUDIO_FRAME_OP_MODE_TYPE""'");
  } 
  arg4 = static_cast< agora::rtc::RAW_AUDIO_FRAME_OP_MODE_TYPE >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcEngineBridge_setRecordingAudioFrameParameters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setRecordingAudioFrameParameters(arg2,arg3,arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setPlaybackAudioFrameParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  int arg3 ;
  agora::rtc::RAW_AUDIO_FRAME_OP_MODE_TYPE arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setPlaybackAudioFrameParameters", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setPlaybackAudioFrameParameters" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setPlaybackAudioFrameParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_setPlaybackAudioFrameParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineBridge_setPlaybackAudioFrameParameters" "', argument " "4"" of type '" "agora::rtc::RAW_AUDIO_FRAME_OP_MODE_TYPE""'");
  } 
  arg4 = static_cast< agora::rtc::RAW_AUDIO_FRAME_OP_MODE_TYPE >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcEngineBridge_setPlaybackAudioFrameParameters" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setPlaybackAudioFrameParameters(arg2,arg3,arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_setMixedAudioFrameParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_setMixedAudioFrameParameters", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_setMixedAudioFrameParameters" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineBridge_setMixedAudioFrameParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineBridge_setMixedAudioFrameParameters" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setMixedAudioFrameParameters(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_registerMediaMetadataObserver__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::IMetadataObserver *arg2 = (agora::rtc::IMetadataObserver *) 0 ;
  agora::rtc::IMetadataObserver::METADATA_TYPE arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_registerMediaMetadataObserver" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IMetadataObserver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_registerMediaMetadataObserver" "', argument " "2"" of type '" "agora::rtc::IMetadataObserver *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IMetadataObserver * >(argp2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_agora__rtc__IMetadataObserver__METADATA_TYPE,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineBridge_registerMediaMetadataObserver" "', argument " "3"" of type '" "agora::rtc::IMetadataObserver::METADATA_TYPE""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineBridge_registerMediaMetadataObserver" "', argument " "3"" of type '" "agora::rtc::IMetadataObserver::METADATA_TYPE""'");
    } else {
      agora::rtc::IMetadataObserver::METADATA_TYPE * temp = reinterpret_cast< agora::rtc::IMetadataObserver::METADATA_TYPE * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineBridge_registerMediaMetadataObserver" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->registerMediaMetadataObserver(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_registerMediaMetadataObserver__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::IMetadataObserver *arg2 = (agora::rtc::IMetadataObserver *) 0 ;
  agora::rtc::IMetadataObserver::METADATA_TYPE arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_registerMediaMetadataObserver" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IMetadataObserver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_registerMediaMetadataObserver" "', argument " "2"" of type '" "agora::rtc::IMetadataObserver *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IMetadataObserver * >(argp2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_agora__rtc__IMetadataObserver__METADATA_TYPE,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineBridge_registerMediaMetadataObserver" "', argument " "3"" of type '" "agora::rtc::IMetadataObserver::METADATA_TYPE""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineBridge_registerMediaMetadataObserver" "', argument " "3"" of type '" "agora::rtc::IMetadataObserver::METADATA_TYPE""'");
    } else {
      agora::rtc::IMetadataObserver::METADATA_TYPE * temp = reinterpret_cast< agora::rtc::IMetadataObserver::METADATA_TYPE * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->registerMediaMetadataObserver(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_registerMediaMetadataObserver(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RtcEngineBridge_registerMediaMetadataObserver", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_agora__common__RtcEngineBridge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_agora__rtc__IMetadataObserver, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_agora__rtc__IMetadataObserver__METADATA_TYPE, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RtcEngineBridge_registerMediaMetadataObserver__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_agora__common__RtcEngineBridge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_agora__rtc__IMetadataObserver, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_agora__rtc__IMetadataObserver__METADATA_TYPE, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RtcEngineBridge_registerMediaMetadataObserver__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RtcEngineBridge_registerMediaMetadataObserver'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    agora::common::RtcEngineBridge::registerMediaMetadataObserver(agora::rtc::IMetadataObserver *,agora::rtc::IMetadataObserver::METADATA_TYPE,bool)\n"
    "    agora::common::RtcEngineBridge::registerMediaMetadataObserver(agora::rtc::IMetadataObserver *,agora::rtc::IMetadataObserver::METADATA_TYPE)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RtcEngineBridge_sendMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  agora::rtc::IMetadataObserver::Metadata *arg2 = (agora::rtc::IMetadataObserver::Metadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineBridge_sendMetadata", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineBridge_sendMetadata" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IMetadataObserver__Metadata, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineBridge_sendMetadata" "', argument " "2"" of type '" "agora::rtc::IMetadataObserver::Metadata *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IMetadataObserver::Metadata * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->sendMetadata(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RtcEngineBridge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_RtcEngineBridge", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::common::RtcEngineBridge *)new agora::common::RtcEngineBridge();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__common__RtcEngineBridge, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RtcEngineBridge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RtcEngineBridge" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RtcEngineBridge_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__common__RtcEngineBridge, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RtcEngineBridge_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_IRtcEngineEventHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::IRtcEngineEventHandler *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_IRtcEngineEventHandler", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::IRtcEngineEventHandler *)new agora::rtc::IRtcEngineEventHandler();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__IRtcEngineEventHandler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IRtcEngineEventHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::IRtcEngineEventHandler *arg1 = (agora::rtc::IRtcEngineEventHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__IRtcEngineEventHandler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IRtcEngineEventHandler" "', argument " "1"" of type '" "agora::rtc::IRtcEngineEventHandler *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::IRtcEngineEventHandler * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IRtcEngineEventHandler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__IRtcEngineEventHandler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *IRtcEngineEventHandler_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_RtcEngineEventHandlerBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RtcEngineEventHandlerBase" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onJoinChannelSuccess(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  agora::rtc::uid_t arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onJoinChannelSuccess", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onJoinChannelSuccess" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineEventHandlerBase_onJoinChannelSuccess" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onJoinChannelSuccess" "', argument " "3"" of type '" "agora::rtc::uid_t""'");
  } 
  arg3 = static_cast< agora::rtc::uid_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onJoinChannelSuccess" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onJoinChannelSuccess((char const *)arg2,arg3,arg4);
    } else {
      (arg1)->onJoinChannelSuccess((char const *)arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onLeaveChannel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::RtcStats *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onLeaveChannel", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onLeaveChannel" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__RtcStats,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineEventHandlerBase_onLeaveChannel" "', argument " "2"" of type '" "agora::rtc::RtcStats const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineEventHandlerBase_onLeaveChannel" "', argument " "2"" of type '" "agora::rtc::RtcStats const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::RtcStats * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onLeaveChannel((agora::rtc::RtcStats const &)*arg2);
    } else {
      (arg1)->onLeaveChannel((agora::rtc::RtcStats const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onRejoinChannelSuccess(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  agora::rtc::uid_t arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onRejoinChannelSuccess", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onRejoinChannelSuccess" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineEventHandlerBase_onRejoinChannelSuccess" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onRejoinChannelSuccess" "', argument " "3"" of type '" "agora::rtc::uid_t""'");
  } 
  arg3 = static_cast< agora::rtc::uid_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onRejoinChannelSuccess" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onRejoinChannelSuccess((char const *)arg2,arg3,arg4);
    } else {
      (arg1)->onRejoinChannelSuccess((char const *)arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onUserJoined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onUserJoined", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onUserJoined" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onUserJoined" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onUserJoined" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onUserJoined(arg2,arg3);
    } else {
      (arg1)->onUserJoined(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onClientRoleChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::CLIENT_ROLE_TYPE arg2 ;
  agora::rtc::CLIENT_ROLE_TYPE arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onClientRoleChanged", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onClientRoleChanged" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onClientRoleChanged" "', argument " "2"" of type '" "agora::rtc::CLIENT_ROLE_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::CLIENT_ROLE_TYPE >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onClientRoleChanged" "', argument " "3"" of type '" "agora::rtc::CLIENT_ROLE_TYPE""'");
  } 
  arg3 = static_cast< agora::rtc::CLIENT_ROLE_TYPE >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onClientRoleChanged(arg2,arg3);
    } else {
      (arg1)->onClientRoleChanged(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onUserOffline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  agora::rtc::USER_OFFLINE_REASON_TYPE arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onUserOffline", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onUserOffline" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onUserOffline" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onUserOffline" "', argument " "3"" of type '" "agora::rtc::USER_OFFLINE_REASON_TYPE""'");
  } 
  arg3 = static_cast< agora::rtc::USER_OFFLINE_REASON_TYPE >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onUserOffline(arg2,arg3);
    } else {
      (arg1)->onUserOffline(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onUserMuteAudio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onUserMuteAudio", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onUserMuteAudio" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onUserMuteAudio" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onUserMuteAudio" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onUserMuteAudio(arg2,arg3);
    } else {
      (arg1)->onUserMuteAudio(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onFirstRemoteVideoDecoded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onFirstRemoteVideoDecoded", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onFirstRemoteVideoDecoded" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onFirstRemoteVideoDecoded" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onFirstRemoteVideoDecoded" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onFirstRemoteVideoDecoded" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcEngineEventHandlerBase_onFirstRemoteVideoDecoded" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onFirstRemoteVideoDecoded(arg2,arg3,arg4,arg5);
    } else {
      (arg1)->onFirstRemoteVideoDecoded(arg2,arg3,arg4,arg5);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onUserMuteVideo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onUserMuteVideo", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onUserMuteVideo" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onUserMuteVideo" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onUserMuteVideo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onUserMuteVideo(arg2,arg3);
    } else {
      (arg1)->onUserMuteVideo(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onAudioRouteChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::AUDIO_ROUTE_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onAudioRouteChanged", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onAudioRouteChanged" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onAudioRouteChanged" "', argument " "2"" of type '" "agora::rtc::AUDIO_ROUTE_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::AUDIO_ROUTE_TYPE >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onAudioRouteChanged(arg2);
    } else {
      (arg1)->onAudioRouteChanged(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onConnectionLost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onConnectionLost" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onConnectionLost();
    } else {
      (arg1)->onConnectionLost();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onRequestToken(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onRequestToken" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onRequestToken();
    } else {
      (arg1)->onRequestToken();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onAudioVolumeIndication(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::AudioVolumeInfo *arg2 = (agora::rtc::AudioVolumeInfo *) 0 ;
  unsigned int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onAudioVolumeIndication", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onAudioVolumeIndication" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__AudioVolumeInfo, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineEventHandlerBase_onAudioVolumeIndication" "', argument " "2"" of type '" "agora::rtc::AudioVolumeInfo const *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::AudioVolumeInfo * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onAudioVolumeIndication" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onAudioVolumeIndication" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onAudioVolumeIndication((agora::rtc::AudioVolumeInfo const *)arg2,arg3,arg4);
    } else {
      (arg1)->onAudioVolumeIndication((agora::rtc::AudioVolumeInfo const *)arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onWarning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onWarning", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onWarning" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onWarning" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineEventHandlerBase_onWarning" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onWarning(arg2,(char const *)arg3);
    } else {
      (arg1)->onWarning(arg2,(char const *)arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onError", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onError" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onError" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineEventHandlerBase_onError" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onError(arg2,(char const *)arg3);
    } else {
      (arg1)->onError(arg2,(char const *)arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onRtcStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::RtcStats *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onRtcStats", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onRtcStats" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__RtcStats,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineEventHandlerBase_onRtcStats" "', argument " "2"" of type '" "agora::rtc::RtcStats const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineEventHandlerBase_onRtcStats" "', argument " "2"" of type '" "agora::rtc::RtcStats const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::RtcStats * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onRtcStats((agora::rtc::RtcStats const &)*arg2);
    } else {
      (arg1)->onRtcStats((agora::rtc::RtcStats const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onAudioMixingFinished(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onAudioMixingFinished" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onAudioMixingFinished();
    } else {
      (arg1)->onAudioMixingFinished();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onVideoSizeChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onVideoSizeChanged", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onVideoSizeChanged" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onVideoSizeChanged" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onVideoSizeChanged" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onVideoSizeChanged" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcEngineEventHandlerBase_onVideoSizeChanged" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onVideoSizeChanged(arg2,arg3,arg4,arg5);
    } else {
      (arg1)->onVideoSizeChanged(arg2,arg3,arg4,arg5);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onConnectionInterrupted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onConnectionInterrupted" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onConnectionInterrupted();
    } else {
      (arg1)->onConnectionInterrupted();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onMicrophoneEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onMicrophoneEnabled", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onMicrophoneEnabled" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onMicrophoneEnabled" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onMicrophoneEnabled(arg2);
    } else {
      (arg1)->onMicrophoneEnabled(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onAudioQuality(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  int arg3 ;
  unsigned short arg4 ;
  unsigned short arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onAudioQuality", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onAudioQuality" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onAudioQuality" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onAudioQuality" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onAudioQuality" "', argument " "4"" of type '" "unsigned short""'");
  } 
  arg4 = static_cast< unsigned short >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_short(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcEngineEventHandlerBase_onAudioQuality" "', argument " "5"" of type '" "unsigned short""'");
  } 
  arg5 = static_cast< unsigned short >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onAudioQuality(arg2,arg3,arg4,arg5);
    } else {
      (arg1)->onAudioQuality(arg2,arg3,arg4,arg5);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onRemoteVideoTransportStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  unsigned short arg3 ;
  unsigned short arg4 ;
  unsigned short arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onRemoteVideoTransportStats", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onRemoteVideoTransportStats" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onRemoteVideoTransportStats" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onRemoteVideoTransportStats" "', argument " "3"" of type '" "unsigned short""'");
  } 
  arg3 = static_cast< unsigned short >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onRemoteVideoTransportStats" "', argument " "4"" of type '" "unsigned short""'");
  } 
  arg4 = static_cast< unsigned short >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_short(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcEngineEventHandlerBase_onRemoteVideoTransportStats" "', argument " "5"" of type '" "unsigned short""'");
  } 
  arg5 = static_cast< unsigned short >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onRemoteVideoTransportStats(arg2,arg3,arg4,arg5);
    } else {
      (arg1)->onRemoteVideoTransportStats(arg2,arg3,arg4,arg5);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onRemoteAudioTransportStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  unsigned short arg3 ;
  unsigned short arg4 ;
  unsigned short arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onRemoteAudioTransportStats", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onRemoteAudioTransportStats" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onRemoteAudioTransportStats" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onRemoteAudioTransportStats" "', argument " "3"" of type '" "unsigned short""'");
  } 
  arg3 = static_cast< unsigned short >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onRemoteAudioTransportStats" "', argument " "4"" of type '" "unsigned short""'");
  } 
  arg4 = static_cast< unsigned short >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_short(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcEngineEventHandlerBase_onRemoteAudioTransportStats" "', argument " "5"" of type '" "unsigned short""'");
  } 
  arg5 = static_cast< unsigned short >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onRemoteAudioTransportStats(arg2,arg3,arg4,arg5);
    } else {
      (arg1)->onRemoteAudioTransportStats(arg2,arg3,arg4,arg5);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onStreamInjectedStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  agora::rtc::uid_t arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onStreamInjectedStatus", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onStreamInjectedStatus" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineEventHandlerBase_onStreamInjectedStatus" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onStreamInjectedStatus" "', argument " "3"" of type '" "agora::rtc::uid_t""'");
  } 
  arg3 = static_cast< agora::rtc::uid_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onStreamInjectedStatus" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onStreamInjectedStatus((char const *)arg2,arg3,arg4);
    } else {
      (arg1)->onStreamInjectedStatus((char const *)arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onTranscodingUpdated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onTranscodingUpdated" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onTranscodingUpdated();
    } else {
      (arg1)->onTranscodingUpdated();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onStreamUnpublished(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onStreamUnpublished", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onStreamUnpublished" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineEventHandlerBase_onStreamUnpublished" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onStreamUnpublished((char const *)arg2);
    } else {
      (arg1)->onStreamUnpublished((char const *)arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onStreamPublished(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onStreamPublished", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onStreamPublished" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineEventHandlerBase_onStreamPublished" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onStreamPublished" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onStreamPublished((char const *)arg2,arg3);
    } else {
      (arg1)->onStreamPublished((char const *)arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onAudioDeviceVolumeChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::MEDIA_DEVICE_TYPE arg2 ;
  int arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onAudioDeviceVolumeChanged", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onAudioDeviceVolumeChanged" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onAudioDeviceVolumeChanged" "', argument " "2"" of type '" "agora::rtc::MEDIA_DEVICE_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::MEDIA_DEVICE_TYPE >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onAudioDeviceVolumeChanged" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onAudioDeviceVolumeChanged" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onAudioDeviceVolumeChanged(arg2,arg3,arg4);
    } else {
      (arg1)->onAudioDeviceVolumeChanged(arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onActiveSpeaker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onActiveSpeaker", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onActiveSpeaker" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onActiveSpeaker" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onActiveSpeaker(arg2);
    } else {
      (arg1)->onActiveSpeaker(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onFirstRemoteAudioFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onFirstRemoteAudioFrame", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onFirstRemoteAudioFrame" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onFirstRemoteAudioFrame" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onFirstRemoteAudioFrame" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onFirstRemoteAudioFrame(arg2,arg3);
    } else {
      (arg1)->onFirstRemoteAudioFrame(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onFirstLocalAudioFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onFirstLocalAudioFrame", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onFirstLocalAudioFrame" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onFirstLocalAudioFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onFirstLocalAudioFrame(arg2);
    } else {
      (arg1)->onFirstLocalAudioFrame(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onMediaEngineStartCallSuccess(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onMediaEngineStartCallSuccess" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onMediaEngineStartCallSuccess();
    } else {
      (arg1)->onMediaEngineStartCallSuccess();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onMediaEngineLoadSuccess(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onMediaEngineLoadSuccess" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onMediaEngineLoadSuccess();
    } else {
      (arg1)->onMediaEngineLoadSuccess();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onStreamMessageError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onStreamMessageError", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onStreamMessageError" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onStreamMessageError" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onStreamMessageError" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onStreamMessageError" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcEngineEventHandlerBase_onStreamMessageError" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RtcEngineEventHandlerBase_onStreamMessageError" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onStreamMessageError(arg2,arg3,arg4,arg5,arg6);
    } else {
      (arg1)->onStreamMessageError(arg2,arg3,arg4,arg5,arg6);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onStreamMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  size_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onStreamMessage", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onStreamMessage" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onStreamMessage" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onStreamMessage" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RtcEngineEventHandlerBase_onStreamMessage" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_size_t(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcEngineEventHandlerBase_onStreamMessage" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onStreamMessage(arg2,arg3,(char const *)arg4,arg5);
    } else {
      (arg1)->onStreamMessage(arg2,arg3,(char const *)arg4,arg5);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onConnectionBanned(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onConnectionBanned" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onConnectionBanned();
    } else {
      (arg1)->onConnectionBanned();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onLastmileQuality(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onLastmileQuality", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onLastmileQuality" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onLastmileQuality" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onLastmileQuality(arg2);
    } else {
      (arg1)->onLastmileQuality(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onVideoStopped(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onVideoStopped" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onVideoStopped();
    } else {
      (arg1)->onVideoStopped();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onApiCallExecuted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onApiCallExecuted", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onApiCallExecuted" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onApiCallExecuted" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineEventHandlerBase_onApiCallExecuted" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RtcEngineEventHandlerBase_onApiCallExecuted" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onApiCallExecuted(arg2,(char const *)arg3,(char const *)arg4);
    } else {
      (arg1)->onApiCallExecuted(arg2,(char const *)arg3,(char const *)arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onTokenPrivilegeWillExpire(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onTokenPrivilegeWillExpire", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onTokenPrivilegeWillExpire" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineEventHandlerBase_onTokenPrivilegeWillExpire" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onTokenPrivilegeWillExpire((char const *)arg2);
    } else {
      (arg1)->onTokenPrivilegeWillExpire((char const *)arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onNetworkQuality(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onNetworkQuality", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onNetworkQuality" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onNetworkQuality" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onNetworkQuality" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onNetworkQuality" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onNetworkQuality(arg2,arg3,arg4);
    } else {
      (arg1)->onNetworkQuality(arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onLocalVideoStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::LocalVideoStats *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onLocalVideoStats", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onLocalVideoStats" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__LocalVideoStats,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineEventHandlerBase_onLocalVideoStats" "', argument " "2"" of type '" "agora::rtc::LocalVideoStats const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineEventHandlerBase_onLocalVideoStats" "', argument " "2"" of type '" "agora::rtc::LocalVideoStats const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::LocalVideoStats * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onLocalVideoStats((agora::rtc::LocalVideoStats const &)*arg2);
    } else {
      (arg1)->onLocalVideoStats((agora::rtc::LocalVideoStats const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onLocalAudioStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::LocalAudioStats *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onLocalAudioStats", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onLocalAudioStats" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__LocalAudioStats,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineEventHandlerBase_onLocalAudioStats" "', argument " "2"" of type '" "agora::rtc::LocalAudioStats const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineEventHandlerBase_onLocalAudioStats" "', argument " "2"" of type '" "agora::rtc::LocalAudioStats const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::LocalAudioStats * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onLocalAudioStats((agora::rtc::LocalAudioStats const &)*arg2);
    } else {
      (arg1)->onLocalAudioStats((agora::rtc::LocalAudioStats const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onRemoteVideoStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::RemoteVideoStats *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onRemoteVideoStats", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onRemoteVideoStats" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__RemoteVideoStats,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineEventHandlerBase_onRemoteVideoStats" "', argument " "2"" of type '" "agora::rtc::RemoteVideoStats const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineEventHandlerBase_onRemoteVideoStats" "', argument " "2"" of type '" "agora::rtc::RemoteVideoStats const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onRemoteVideoStats((agora::rtc::RemoteVideoStats const &)*arg2);
    } else {
      (arg1)->onRemoteVideoStats((agora::rtc::RemoteVideoStats const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onRemoteAudioStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::RemoteAudioStats *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onRemoteAudioStats", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onRemoteAudioStats" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__RemoteAudioStats,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineEventHandlerBase_onRemoteAudioStats" "', argument " "2"" of type '" "agora::rtc::RemoteAudioStats const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineEventHandlerBase_onRemoteAudioStats" "', argument " "2"" of type '" "agora::rtc::RemoteAudioStats const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onRemoteAudioStats((agora::rtc::RemoteAudioStats const &)*arg2);
    } else {
      (arg1)->onRemoteAudioStats((agora::rtc::RemoteAudioStats const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onFirstLocalVideoFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onFirstLocalVideoFrame", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onFirstLocalVideoFrame" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onFirstLocalVideoFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onFirstLocalVideoFrame" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onFirstLocalVideoFrame" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onFirstLocalVideoFrame(arg2,arg3,arg4);
    } else {
      (arg1)->onFirstLocalVideoFrame(arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onFirstRemoteVideoFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onFirstRemoteVideoFrame", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onFirstRemoteVideoFrame" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onFirstRemoteVideoFrame" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onFirstRemoteVideoFrame" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onFirstRemoteVideoFrame" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcEngineEventHandlerBase_onFirstRemoteVideoFrame" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onFirstRemoteVideoFrame(arg2,arg3,arg4,arg5);
    } else {
      (arg1)->onFirstRemoteVideoFrame(arg2,arg3,arg4,arg5);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onUserEnableVideo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onUserEnableVideo", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onUserEnableVideo" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onUserEnableVideo" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onUserEnableVideo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onUserEnableVideo(arg2,arg3);
    } else {
      (arg1)->onUserEnableVideo(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onAudioDeviceStateChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onAudioDeviceStateChanged", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onAudioDeviceStateChanged" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineEventHandlerBase_onAudioDeviceStateChanged" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onAudioDeviceStateChanged" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onAudioDeviceStateChanged" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onAudioDeviceStateChanged((char const *)arg2,arg3,arg4);
    } else {
      (arg1)->onAudioDeviceStateChanged((char const *)arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onCameraReady(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onCameraReady" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onCameraReady();
    } else {
      (arg1)->onCameraReady();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onCameraFocusAreaChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onCameraFocusAreaChanged", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onCameraFocusAreaChanged" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onCameraFocusAreaChanged" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onCameraFocusAreaChanged" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onCameraFocusAreaChanged" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcEngineEventHandlerBase_onCameraFocusAreaChanged" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onCameraFocusAreaChanged(arg2,arg3,arg4,arg5);
    } else {
      (arg1)->onCameraFocusAreaChanged(arg2,arg3,arg4,arg5);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onCameraExposureAreaChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onCameraExposureAreaChanged", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onCameraExposureAreaChanged" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onCameraExposureAreaChanged" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onCameraExposureAreaChanged" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onCameraExposureAreaChanged" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcEngineEventHandlerBase_onCameraExposureAreaChanged" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onCameraExposureAreaChanged(arg2,arg3,arg4,arg5);
    } else {
      (arg1)->onCameraExposureAreaChanged(arg2,arg3,arg4,arg5);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onRemoteAudioMixingBegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onRemoteAudioMixingBegin" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onRemoteAudioMixingBegin();
    } else {
      (arg1)->onRemoteAudioMixingBegin();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onRemoteAudioMixingEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onRemoteAudioMixingEnd" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onRemoteAudioMixingEnd();
    } else {
      (arg1)->onRemoteAudioMixingEnd();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onAudioEffectFinished(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onAudioEffectFinished", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onAudioEffectFinished" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onAudioEffectFinished" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onAudioEffectFinished(arg2);
    } else {
      (arg1)->onAudioEffectFinished(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onVideoDeviceStateChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onVideoDeviceStateChanged", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onVideoDeviceStateChanged" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineEventHandlerBase_onVideoDeviceStateChanged" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onVideoDeviceStateChanged" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onVideoDeviceStateChanged" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onVideoDeviceStateChanged((char const *)arg2,arg3,arg4);
    } else {
      (arg1)->onVideoDeviceStateChanged((char const *)arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onRemoteVideoStateChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  agora::rtc::REMOTE_VIDEO_STATE arg3 ;
  agora::rtc::REMOTE_VIDEO_STATE_REASON arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onRemoteVideoStateChanged", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onRemoteVideoStateChanged" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onRemoteVideoStateChanged" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onRemoteVideoStateChanged" "', argument " "3"" of type '" "agora::rtc::REMOTE_VIDEO_STATE""'");
  } 
  arg3 = static_cast< agora::rtc::REMOTE_VIDEO_STATE >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onRemoteVideoStateChanged" "', argument " "4"" of type '" "agora::rtc::REMOTE_VIDEO_STATE_REASON""'");
  } 
  arg4 = static_cast< agora::rtc::REMOTE_VIDEO_STATE_REASON >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcEngineEventHandlerBase_onRemoteVideoStateChanged" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onRemoteVideoStateChanged(arg2,arg3,arg4,arg5);
    } else {
      (arg1)->onRemoteVideoStateChanged(arg2,arg3,arg4,arg5);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onUserEnableLocalVideo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onUserEnableLocalVideo", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onUserEnableLocalVideo" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onUserEnableLocalVideo" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onUserEnableLocalVideo" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onUserEnableLocalVideo(arg2,arg3);
    } else {
      (arg1)->onUserEnableLocalVideo(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onLocalPublishFallbackToAudioOnly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onLocalPublishFallbackToAudioOnly", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onLocalPublishFallbackToAudioOnly" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onLocalPublishFallbackToAudioOnly" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onLocalPublishFallbackToAudioOnly(arg2);
    } else {
      (arg1)->onLocalPublishFallbackToAudioOnly(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onRemoteSubscribeFallbackToAudioOnly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onRemoteSubscribeFallbackToAudioOnly", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onRemoteSubscribeFallbackToAudioOnly" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onRemoteSubscribeFallbackToAudioOnly" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onRemoteSubscribeFallbackToAudioOnly" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onRemoteSubscribeFallbackToAudioOnly(arg2,arg3);
    } else {
      (arg1)->onRemoteSubscribeFallbackToAudioOnly(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onConnectionStateChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::CONNECTION_STATE_TYPE arg2 ;
  agora::rtc::CONNECTION_CHANGED_REASON_TYPE arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onConnectionStateChanged", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onConnectionStateChanged" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onConnectionStateChanged" "', argument " "2"" of type '" "agora::rtc::CONNECTION_STATE_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::CONNECTION_STATE_TYPE >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onConnectionStateChanged" "', argument " "3"" of type '" "agora::rtc::CONNECTION_CHANGED_REASON_TYPE""'");
  } 
  arg3 = static_cast< agora::rtc::CONNECTION_CHANGED_REASON_TYPE >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onConnectionStateChanged(arg2,arg3);
    } else {
      (arg1)->onConnectionStateChanged(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onFirstRemoteAudioDecoded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onFirstRemoteAudioDecoded", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onFirstRemoteAudioDecoded" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onFirstRemoteAudioDecoded" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onFirstRemoteAudioDecoded" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onFirstRemoteAudioDecoded(arg2,arg3);
    } else {
      (arg1)->onFirstRemoteAudioDecoded(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onLocalVideoStateChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::LOCAL_VIDEO_STREAM_STATE arg2 ;
  agora::rtc::LOCAL_VIDEO_STREAM_ERROR arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onLocalVideoStateChanged", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onLocalVideoStateChanged" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onLocalVideoStateChanged" "', argument " "2"" of type '" "agora::rtc::LOCAL_VIDEO_STREAM_STATE""'");
  } 
  arg2 = static_cast< agora::rtc::LOCAL_VIDEO_STREAM_STATE >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onLocalVideoStateChanged" "', argument " "3"" of type '" "agora::rtc::LOCAL_VIDEO_STREAM_ERROR""'");
  } 
  arg3 = static_cast< agora::rtc::LOCAL_VIDEO_STREAM_ERROR >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onLocalVideoStateChanged(arg2,arg3);
    } else {
      (arg1)->onLocalVideoStateChanged(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onRtmpStreamingStateChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  agora::rtc::RTMP_STREAM_PUBLISH_STATE arg3 ;
  agora::rtc::RTMP_STREAM_PUBLISH_ERROR arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onRtmpStreamingStateChanged", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onRtmpStreamingStateChanged" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineEventHandlerBase_onRtmpStreamingStateChanged" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onRtmpStreamingStateChanged" "', argument " "3"" of type '" "agora::rtc::RTMP_STREAM_PUBLISH_STATE""'");
  } 
  arg3 = static_cast< agora::rtc::RTMP_STREAM_PUBLISH_STATE >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onRtmpStreamingStateChanged" "', argument " "4"" of type '" "agora::rtc::RTMP_STREAM_PUBLISH_ERROR""'");
  } 
  arg4 = static_cast< agora::rtc::RTMP_STREAM_PUBLISH_ERROR >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onRtmpStreamingStateChanged((char const *)arg2,arg3,arg4);
    } else {
      (arg1)->onRtmpStreamingStateChanged((char const *)arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onNetworkTypeChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::NETWORK_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onNetworkTypeChanged", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onNetworkTypeChanged" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onNetworkTypeChanged" "', argument " "2"" of type '" "agora::rtc::NETWORK_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::NETWORK_TYPE >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onNetworkTypeChanged(arg2);
    } else {
      (arg1)->onNetworkTypeChanged(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onLastmileProbeResult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::LastmileProbeResult *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onLastmileProbeResult", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onLastmileProbeResult" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__LastmileProbeResult,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcEngineEventHandlerBase_onLastmileProbeResult" "', argument " "2"" of type '" "agora::rtc::LastmileProbeResult const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineEventHandlerBase_onLastmileProbeResult" "', argument " "2"" of type '" "agora::rtc::LastmileProbeResult const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::LastmileProbeResult * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onLastmileProbeResult((agora::rtc::LastmileProbeResult const &)*arg2);
    } else {
      (arg1)->onLastmileProbeResult((agora::rtc::LastmileProbeResult const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onLocalUserRegistered(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onLocalUserRegistered", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onLocalUserRegistered" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onLocalUserRegistered" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineEventHandlerBase_onLocalUserRegistered" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onLocalUserRegistered(arg2,(char const *)arg3);
    } else {
      (arg1)->onLocalUserRegistered(arg2,(char const *)arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onUserInfoUpdated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  agora::rtc::UserInfo *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onUserInfoUpdated", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onUserInfoUpdated" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onUserInfoUpdated" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_agora__rtc__UserInfo,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcEngineEventHandlerBase_onUserInfoUpdated" "', argument " "3"" of type '" "agora::rtc::UserInfo const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcEngineEventHandlerBase_onUserInfoUpdated" "', argument " "3"" of type '" "agora::rtc::UserInfo const &""'"); 
  }
  arg3 = reinterpret_cast< agora::rtc::UserInfo * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onUserInfoUpdated(arg2,(agora::rtc::UserInfo const &)*arg3);
    } else {
      (arg1)->onUserInfoUpdated(arg2,(agora::rtc::UserInfo const &)*arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onLocalAudioStateChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::LOCAL_AUDIO_STREAM_STATE arg2 ;
  agora::rtc::LOCAL_AUDIO_STREAM_ERROR arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onLocalAudioStateChanged", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onLocalAudioStateChanged" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onLocalAudioStateChanged" "', argument " "2"" of type '" "agora::rtc::LOCAL_AUDIO_STREAM_STATE""'");
  } 
  arg2 = static_cast< agora::rtc::LOCAL_AUDIO_STREAM_STATE >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onLocalAudioStateChanged" "', argument " "3"" of type '" "agora::rtc::LOCAL_AUDIO_STREAM_ERROR""'");
  } 
  arg3 = static_cast< agora::rtc::LOCAL_AUDIO_STREAM_ERROR >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onLocalAudioStateChanged(arg2,arg3);
    } else {
      (arg1)->onLocalAudioStateChanged(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onRemoteAudioStateChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::uid_t arg2 ;
  agora::rtc::REMOTE_AUDIO_STATE arg3 ;
  agora::rtc::REMOTE_AUDIO_STATE_REASON arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onRemoteAudioStateChanged", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onRemoteAudioStateChanged" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onRemoteAudioStateChanged" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onRemoteAudioStateChanged" "', argument " "3"" of type '" "agora::rtc::REMOTE_AUDIO_STATE""'");
  } 
  arg3 = static_cast< agora::rtc::REMOTE_AUDIO_STATE >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcEngineEventHandlerBase_onRemoteAudioStateChanged" "', argument " "4"" of type '" "agora::rtc::REMOTE_AUDIO_STATE_REASON""'");
  } 
  arg4 = static_cast< agora::rtc::REMOTE_AUDIO_STATE_REASON >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcEngineEventHandlerBase_onRemoteAudioStateChanged" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onRemoteAudioStateChanged(arg2,arg3,arg4,arg5);
    } else {
      (arg1)->onRemoteAudioStateChanged(arg2,arg3,arg4,arg5);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onChannelMediaRelayStateChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::CHANNEL_MEDIA_RELAY_STATE arg2 ;
  agora::rtc::CHANNEL_MEDIA_RELAY_ERROR arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onChannelMediaRelayStateChanged", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onChannelMediaRelayStateChanged" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onChannelMediaRelayStateChanged" "', argument " "2"" of type '" "agora::rtc::CHANNEL_MEDIA_RELAY_STATE""'");
  } 
  arg2 = static_cast< agora::rtc::CHANNEL_MEDIA_RELAY_STATE >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcEngineEventHandlerBase_onChannelMediaRelayStateChanged" "', argument " "3"" of type '" "agora::rtc::CHANNEL_MEDIA_RELAY_ERROR""'");
  } 
  arg3 = static_cast< agora::rtc::CHANNEL_MEDIA_RELAY_ERROR >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onChannelMediaRelayStateChanged(arg2,arg3);
    } else {
      (arg1)->onChannelMediaRelayStateChanged(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onChannelMediaRelayEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  agora::rtc::CHANNEL_MEDIA_RELAY_EVENT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcEngineEventHandlerBase_onChannelMediaRelayEvent", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onChannelMediaRelayEvent" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcEngineEventHandlerBase_onChannelMediaRelayEvent" "', argument " "2"" of type '" "agora::rtc::CHANNEL_MEDIA_RELAY_EVENT""'");
  } 
  arg2 = static_cast< agora::rtc::CHANNEL_MEDIA_RELAY_EVENT >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onChannelMediaRelayEvent(arg2);
    } else {
      (arg1)->onChannelMediaRelayEvent(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcEngineEventHandlerBase_onTestEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcEngineEventHandlerBase_onTestEnd" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcEngineEventHandlerBase::onTestEnd();
    } else {
      (arg1)->onTestEnd();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RtcEngineEventHandlerBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  agora::common::RtcEngineEventHandlerBase *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if ( arg1 != Py_None ) {
      /* subclassed */
      result = (agora::common::RtcEngineEventHandlerBase *)new SwigDirector_RtcEngineEventHandlerBase(arg1); 
    } else {
      result = (agora::common::RtcEngineEventHandlerBase *)new agora::common::RtcEngineEventHandlerBase(); 
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_RtcEngineEventHandlerBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineEventHandlerBase *arg1 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_RtcEngineEventHandlerBase" "', argument " "1"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RtcEngineEventHandlerBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RtcEngineEventHandlerBase_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_IChannelEventHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::IChannelEventHandler *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_IChannelEventHandler", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::IChannelEventHandler *)new agora::rtc::IChannelEventHandler();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__IChannelEventHandler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IChannelEventHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::IChannelEventHandler *arg1 = (agora::rtc::IChannelEventHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__IChannelEventHandler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IChannelEventHandler" "', argument " "1"" of type '" "agora::rtc::IChannelEventHandler *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::IChannelEventHandler * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IChannelEventHandler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__IChannelEventHandler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *IChannelEventHandler_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_RtcChannelEventHandlerBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RtcChannelEventHandlerBase" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onChannelWarning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onChannelWarning", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onChannelWarning" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onChannelWarning" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onChannelWarning" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RtcChannelEventHandlerBase_onChannelWarning" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onChannelWarning(arg2,arg3,(char const *)arg4);
    } else {
      (arg1)->onChannelWarning(arg2,arg3,(char const *)arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onChannelError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onChannelError", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onChannelError" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onChannelError" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onChannelError" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RtcChannelEventHandlerBase_onChannelError" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onChannelError(arg2,arg3,(char const *)arg4);
    } else {
      (arg1)->onChannelError(arg2,arg3,(char const *)arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onJoinChannelSuccess(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::uid_t arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onJoinChannelSuccess", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onJoinChannelSuccess" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onJoinChannelSuccess" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onJoinChannelSuccess" "', argument " "3"" of type '" "agora::rtc::uid_t""'");
  } 
  arg3 = static_cast< agora::rtc::uid_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelEventHandlerBase_onJoinChannelSuccess" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onJoinChannelSuccess(arg2,arg3,arg4);
    } else {
      (arg1)->onJoinChannelSuccess(arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onRejoinChannelSuccess(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::uid_t arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onRejoinChannelSuccess", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onRejoinChannelSuccess" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onRejoinChannelSuccess" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onRejoinChannelSuccess" "', argument " "3"" of type '" "agora::rtc::uid_t""'");
  } 
  arg3 = static_cast< agora::rtc::uid_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelEventHandlerBase_onRejoinChannelSuccess" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onRejoinChannelSuccess(arg2,arg3,arg4);
    } else {
      (arg1)->onRejoinChannelSuccess(arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onLeaveChannel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::RtcStats *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onLeaveChannel", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onLeaveChannel" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onLeaveChannel" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_agora__rtc__RtcStats,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcChannelEventHandlerBase_onLeaveChannel" "', argument " "3"" of type '" "agora::rtc::RtcStats const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcChannelEventHandlerBase_onLeaveChannel" "', argument " "3"" of type '" "agora::rtc::RtcStats const &""'"); 
  }
  arg3 = reinterpret_cast< agora::rtc::RtcStats * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onLeaveChannel(arg2,(agora::rtc::RtcStats const &)*arg3);
    } else {
      (arg1)->onLeaveChannel(arg2,(agora::rtc::RtcStats const &)*arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onClientRoleChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::CLIENT_ROLE_TYPE arg3 ;
  agora::rtc::CLIENT_ROLE_TYPE arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onClientRoleChanged", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onClientRoleChanged" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onClientRoleChanged" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onClientRoleChanged" "', argument " "3"" of type '" "agora::rtc::CLIENT_ROLE_TYPE""'");
  } 
  arg3 = static_cast< agora::rtc::CLIENT_ROLE_TYPE >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelEventHandlerBase_onClientRoleChanged" "', argument " "4"" of type '" "agora::rtc::CLIENT_ROLE_TYPE""'");
  } 
  arg4 = static_cast< agora::rtc::CLIENT_ROLE_TYPE >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onClientRoleChanged(arg2,arg3,arg4);
    } else {
      (arg1)->onClientRoleChanged(arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onUserJoined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::uid_t arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onUserJoined", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onUserJoined" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onUserJoined" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onUserJoined" "', argument " "3"" of type '" "agora::rtc::uid_t""'");
  } 
  arg3 = static_cast< agora::rtc::uid_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelEventHandlerBase_onUserJoined" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onUserJoined(arg2,arg3,arg4);
    } else {
      (arg1)->onUserJoined(arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onUserOffline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::uid_t arg3 ;
  agora::rtc::USER_OFFLINE_REASON_TYPE arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onUserOffline", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onUserOffline" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onUserOffline" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onUserOffline" "', argument " "3"" of type '" "agora::rtc::uid_t""'");
  } 
  arg3 = static_cast< agora::rtc::uid_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelEventHandlerBase_onUserOffline" "', argument " "4"" of type '" "agora::rtc::USER_OFFLINE_REASON_TYPE""'");
  } 
  arg4 = static_cast< agora::rtc::USER_OFFLINE_REASON_TYPE >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onUserOffline(arg2,arg3,arg4);
    } else {
      (arg1)->onUserOffline(arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onConnectionLost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onConnectionLost", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onConnectionLost" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onConnectionLost" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onConnectionLost(arg2);
    } else {
      (arg1)->onConnectionLost(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onRequestToken(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onRequestToken", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onRequestToken" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onRequestToken" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onRequestToken(arg2);
    } else {
      (arg1)->onRequestToken(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onTokenPrivilegeWillExpire(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onTokenPrivilegeWillExpire", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onTokenPrivilegeWillExpire" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onTokenPrivilegeWillExpire" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcChannelEventHandlerBase_onTokenPrivilegeWillExpire" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onTokenPrivilegeWillExpire(arg2,(char const *)arg3);
    } else {
      (arg1)->onTokenPrivilegeWillExpire(arg2,(char const *)arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onRtcStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::RtcStats *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onRtcStats", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onRtcStats" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onRtcStats" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_agora__rtc__RtcStats,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcChannelEventHandlerBase_onRtcStats" "', argument " "3"" of type '" "agora::rtc::RtcStats const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcChannelEventHandlerBase_onRtcStats" "', argument " "3"" of type '" "agora::rtc::RtcStats const &""'"); 
  }
  arg3 = reinterpret_cast< agora::rtc::RtcStats * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onRtcStats(arg2,(agora::rtc::RtcStats const &)*arg3);
    } else {
      (arg1)->onRtcStats(arg2,(agora::rtc::RtcStats const &)*arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onNetworkQuality(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::uid_t arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onNetworkQuality", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onNetworkQuality" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onNetworkQuality" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onNetworkQuality" "', argument " "3"" of type '" "agora::rtc::uid_t""'");
  } 
  arg3 = static_cast< agora::rtc::uid_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelEventHandlerBase_onNetworkQuality" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcChannelEventHandlerBase_onNetworkQuality" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onNetworkQuality(arg2,arg3,arg4,arg5);
    } else {
      (arg1)->onNetworkQuality(arg2,arg3,arg4,arg5);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onRemoteVideoStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::RemoteVideoStats *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onRemoteVideoStats", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onRemoteVideoStats" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onRemoteVideoStats" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_agora__rtc__RemoteVideoStats,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcChannelEventHandlerBase_onRemoteVideoStats" "', argument " "3"" of type '" "agora::rtc::RemoteVideoStats const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcChannelEventHandlerBase_onRemoteVideoStats" "', argument " "3"" of type '" "agora::rtc::RemoteVideoStats const &""'"); 
  }
  arg3 = reinterpret_cast< agora::rtc::RemoteVideoStats * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onRemoteVideoStats(arg2,(agora::rtc::RemoteVideoStats const &)*arg3);
    } else {
      (arg1)->onRemoteVideoStats(arg2,(agora::rtc::RemoteVideoStats const &)*arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onRemoteAudioStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::RemoteAudioStats *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onRemoteAudioStats", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onRemoteAudioStats" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onRemoteAudioStats" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_agora__rtc__RemoteAudioStats,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcChannelEventHandlerBase_onRemoteAudioStats" "', argument " "3"" of type '" "agora::rtc::RemoteAudioStats const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcChannelEventHandlerBase_onRemoteAudioStats" "', argument " "3"" of type '" "agora::rtc::RemoteAudioStats const &""'"); 
  }
  arg3 = reinterpret_cast< agora::rtc::RemoteAudioStats * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onRemoteAudioStats(arg2,(agora::rtc::RemoteAudioStats const &)*arg3);
    } else {
      (arg1)->onRemoteAudioStats(arg2,(agora::rtc::RemoteAudioStats const &)*arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onRemoteAudioStateChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::uid_t arg3 ;
  agora::rtc::REMOTE_AUDIO_STATE arg4 ;
  agora::rtc::REMOTE_AUDIO_STATE_REASON arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onRemoteAudioStateChanged", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onRemoteAudioStateChanged" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onRemoteAudioStateChanged" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onRemoteAudioStateChanged" "', argument " "3"" of type '" "agora::rtc::uid_t""'");
  } 
  arg3 = static_cast< agora::rtc::uid_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelEventHandlerBase_onRemoteAudioStateChanged" "', argument " "4"" of type '" "agora::rtc::REMOTE_AUDIO_STATE""'");
  } 
  arg4 = static_cast< agora::rtc::REMOTE_AUDIO_STATE >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcChannelEventHandlerBase_onRemoteAudioStateChanged" "', argument " "5"" of type '" "agora::rtc::REMOTE_AUDIO_STATE_REASON""'");
  } 
  arg5 = static_cast< agora::rtc::REMOTE_AUDIO_STATE_REASON >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RtcChannelEventHandlerBase_onRemoteAudioStateChanged" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onRemoteAudioStateChanged(arg2,arg3,arg4,arg5,arg6);
    } else {
      (arg1)->onRemoteAudioStateChanged(arg2,arg3,arg4,arg5,arg6);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onActiveSpeaker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::uid_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onActiveSpeaker", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onActiveSpeaker" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onActiveSpeaker" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onActiveSpeaker" "', argument " "3"" of type '" "agora::rtc::uid_t""'");
  } 
  arg3 = static_cast< agora::rtc::uid_t >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onActiveSpeaker(arg2,arg3);
    } else {
      (arg1)->onActiveSpeaker(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onVideoSizeChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::uid_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onVideoSizeChanged", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onVideoSizeChanged" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onVideoSizeChanged" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onVideoSizeChanged" "', argument " "3"" of type '" "agora::rtc::uid_t""'");
  } 
  arg3 = static_cast< agora::rtc::uid_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelEventHandlerBase_onVideoSizeChanged" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcChannelEventHandlerBase_onVideoSizeChanged" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RtcChannelEventHandlerBase_onVideoSizeChanged" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onVideoSizeChanged(arg2,arg3,arg4,arg5,arg6);
    } else {
      (arg1)->onVideoSizeChanged(arg2,arg3,arg4,arg5,arg6);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onRemoteVideoStateChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::uid_t arg3 ;
  agora::rtc::REMOTE_VIDEO_STATE arg4 ;
  agora::rtc::REMOTE_VIDEO_STATE_REASON arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onRemoteVideoStateChanged", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onRemoteVideoStateChanged" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onRemoteVideoStateChanged" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onRemoteVideoStateChanged" "', argument " "3"" of type '" "agora::rtc::uid_t""'");
  } 
  arg3 = static_cast< agora::rtc::uid_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelEventHandlerBase_onRemoteVideoStateChanged" "', argument " "4"" of type '" "agora::rtc::REMOTE_VIDEO_STATE""'");
  } 
  arg4 = static_cast< agora::rtc::REMOTE_VIDEO_STATE >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcChannelEventHandlerBase_onRemoteVideoStateChanged" "', argument " "5"" of type '" "agora::rtc::REMOTE_VIDEO_STATE_REASON""'");
  } 
  arg5 = static_cast< agora::rtc::REMOTE_VIDEO_STATE_REASON >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RtcChannelEventHandlerBase_onRemoteVideoStateChanged" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onRemoteVideoStateChanged(arg2,arg3,arg4,arg5,arg6);
    } else {
      (arg1)->onRemoteVideoStateChanged(arg2,arg3,arg4,arg5,arg6);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onStreamMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::uid_t arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  size_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  size_t val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onStreamMessage", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onStreamMessage" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onStreamMessage" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onStreamMessage" "', argument " "3"" of type '" "agora::rtc::uid_t""'");
  } 
  arg3 = static_cast< agora::rtc::uid_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelEventHandlerBase_onStreamMessage" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RtcChannelEventHandlerBase_onStreamMessage" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  ecode6 = SWIG_AsVal_size_t(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RtcChannelEventHandlerBase_onStreamMessage" "', argument " "6"" of type '" "size_t""'");
  } 
  arg6 = static_cast< size_t >(val6);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onStreamMessage(arg2,arg3,arg4,(char const *)arg5,arg6);
    } else {
      (arg1)->onStreamMessage(arg2,arg3,arg4,(char const *)arg5,arg6);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onStreamMessageError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::uid_t arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject *swig_obj[7] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onStreamMessageError", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onStreamMessageError" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onStreamMessageError" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onStreamMessageError" "', argument " "3"" of type '" "agora::rtc::uid_t""'");
  } 
  arg3 = static_cast< agora::rtc::uid_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelEventHandlerBase_onStreamMessageError" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcChannelEventHandlerBase_onStreamMessageError" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RtcChannelEventHandlerBase_onStreamMessageError" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RtcChannelEventHandlerBase_onStreamMessageError" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onStreamMessageError(arg2,arg3,arg4,arg5,arg6,arg7);
    } else {
      (arg1)->onStreamMessageError(arg2,arg3,arg4,arg5,arg6,arg7);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onChannelMediaRelayStateChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::CHANNEL_MEDIA_RELAY_STATE arg3 ;
  agora::rtc::CHANNEL_MEDIA_RELAY_ERROR arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onChannelMediaRelayStateChanged", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onChannelMediaRelayStateChanged" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onChannelMediaRelayStateChanged" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onChannelMediaRelayStateChanged" "', argument " "3"" of type '" "agora::rtc::CHANNEL_MEDIA_RELAY_STATE""'");
  } 
  arg3 = static_cast< agora::rtc::CHANNEL_MEDIA_RELAY_STATE >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelEventHandlerBase_onChannelMediaRelayStateChanged" "', argument " "4"" of type '" "agora::rtc::CHANNEL_MEDIA_RELAY_ERROR""'");
  } 
  arg4 = static_cast< agora::rtc::CHANNEL_MEDIA_RELAY_ERROR >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onChannelMediaRelayStateChanged(arg2,arg3,arg4);
    } else {
      (arg1)->onChannelMediaRelayStateChanged(arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onChannelMediaRelayEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::CHANNEL_MEDIA_RELAY_EVENT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onChannelMediaRelayEvent", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onChannelMediaRelayEvent" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onChannelMediaRelayEvent" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onChannelMediaRelayEvent" "', argument " "3"" of type '" "agora::rtc::CHANNEL_MEDIA_RELAY_EVENT""'");
  } 
  arg3 = static_cast< agora::rtc::CHANNEL_MEDIA_RELAY_EVENT >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onChannelMediaRelayEvent(arg2,arg3);
    } else {
      (arg1)->onChannelMediaRelayEvent(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onRtmpStreamingStateChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  char *arg3 = (char *) 0 ;
  agora::rtc::RTMP_STREAM_PUBLISH_STATE arg4 ;
  agora::rtc::RTMP_STREAM_PUBLISH_ERROR arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onRtmpStreamingStateChanged", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onRtmpStreamingStateChanged" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onRtmpStreamingStateChanged" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcChannelEventHandlerBase_onRtmpStreamingStateChanged" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelEventHandlerBase_onRtmpStreamingStateChanged" "', argument " "4"" of type '" "agora::rtc::RTMP_STREAM_PUBLISH_STATE""'");
  } 
  arg4 = static_cast< agora::rtc::RTMP_STREAM_PUBLISH_STATE >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcChannelEventHandlerBase_onRtmpStreamingStateChanged" "', argument " "5"" of type '" "agora::rtc::RTMP_STREAM_PUBLISH_ERROR""'");
  } 
  arg5 = static_cast< agora::rtc::RTMP_STREAM_PUBLISH_ERROR >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onRtmpStreamingStateChanged(arg2,(char const *)arg3,arg4,arg5);
    } else {
      (arg1)->onRtmpStreamingStateChanged(arg2,(char const *)arg3,arg4,arg5);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onTranscodingUpdated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onTranscodingUpdated", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onTranscodingUpdated" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onTranscodingUpdated" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onTranscodingUpdated(arg2);
    } else {
      (arg1)->onTranscodingUpdated(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onStreamInjectedStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  char *arg3 = (char *) 0 ;
  agora::rtc::uid_t arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onStreamInjectedStatus", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onStreamInjectedStatus" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onStreamInjectedStatus" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcChannelEventHandlerBase_onStreamInjectedStatus" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelEventHandlerBase_onStreamInjectedStatus" "', argument " "4"" of type '" "agora::rtc::uid_t""'");
  } 
  arg4 = static_cast< agora::rtc::uid_t >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RtcChannelEventHandlerBase_onStreamInjectedStatus" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onStreamInjectedStatus(arg2,(char const *)arg3,arg4,arg5);
    } else {
      (arg1)->onStreamInjectedStatus(arg2,(char const *)arg3,arg4,arg5);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onLocalPublishFallbackToAudioOnly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onLocalPublishFallbackToAudioOnly", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onLocalPublishFallbackToAudioOnly" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onLocalPublishFallbackToAudioOnly" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onLocalPublishFallbackToAudioOnly" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onLocalPublishFallbackToAudioOnly(arg2,arg3);
    } else {
      (arg1)->onLocalPublishFallbackToAudioOnly(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onRemoteSubscribeFallbackToAudioOnly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::uid_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onRemoteSubscribeFallbackToAudioOnly", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onRemoteSubscribeFallbackToAudioOnly" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onRemoteSubscribeFallbackToAudioOnly" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onRemoteSubscribeFallbackToAudioOnly" "', argument " "3"" of type '" "agora::rtc::uid_t""'");
  } 
  arg3 = static_cast< agora::rtc::uid_t >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelEventHandlerBase_onRemoteSubscribeFallbackToAudioOnly" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onRemoteSubscribeFallbackToAudioOnly(arg2,arg3,arg4);
    } else {
      (arg1)->onRemoteSubscribeFallbackToAudioOnly(arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onConnectionStateChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::rtc::CONNECTION_STATE_TYPE arg3 ;
  agora::rtc::CONNECTION_CHANGED_REASON_TYPE arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onConnectionStateChanged", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onConnectionStateChanged" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onConnectionStateChanged" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelEventHandlerBase_onConnectionStateChanged" "', argument " "3"" of type '" "agora::rtc::CONNECTION_STATE_TYPE""'");
  } 
  arg3 = static_cast< agora::rtc::CONNECTION_STATE_TYPE >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelEventHandlerBase_onConnectionStateChanged" "', argument " "4"" of type '" "agora::rtc::CONNECTION_CHANGED_REASON_TYPE""'");
  } 
  arg4 = static_cast< agora::rtc::CONNECTION_CHANGED_REASON_TYPE >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onConnectionStateChanged(arg2,arg3,arg4);
    } else {
      (arg1)->onConnectionStateChanged(arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelEventHandlerBase_onTestEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelEventHandlerBase_onTestEnd", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelEventHandlerBase_onTestEnd" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelEventHandlerBase_onTestEnd" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->agora::common::RtcChannelEventHandlerBase::onTestEnd(arg2);
    } else {
      (arg1)->onTestEnd(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RtcChannelEventHandlerBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  agora::common::RtcChannelEventHandlerBase *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if ( arg1 != Py_None ) {
      /* subclassed */
      result = (agora::common::RtcChannelEventHandlerBase *)new SwigDirector_RtcChannelEventHandlerBase(arg1); 
    } else {
      result = (agora::common::RtcChannelEventHandlerBase *)new agora::common::RtcChannelEventHandlerBase(); 
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_RtcChannelEventHandlerBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelEventHandlerBase *arg1 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_RtcChannelEventHandlerBase" "', argument " "1"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RtcChannelEventHandlerBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RtcChannelEventHandlerBase_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_createVideoCanvas(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint64_t arg1 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::VideoCanvas result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "createVideoCanvas" "', argument " "1"" of type '" "uint64_t""'");
  } 
  arg1 = static_cast< uint64_t >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = createVideoCanvas(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new agora::rtc::VideoCanvas(static_cast< const agora::rtc::VideoCanvas& >(result))), SWIGTYPE_p_agora__rtc__VideoCanvas, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_createRtcEngineBridge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "createRtcEngineBridge", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::common::RtcEngineBridge *)createRtcEngineBridge();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VideoFrameObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VideoFrameObserver *arg1 = (VideoFrameObserver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VideoFrameObserver, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VideoFrameObserver" "', argument " "1"" of type '" "VideoFrameObserver *""'"); 
  }
  arg1 = reinterpret_cast< VideoFrameObserver * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoFrameObserver_onCaptureVideoFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VideoFrameObserver *arg1 = (VideoFrameObserver *) 0 ;
  int arg2 ;
  int arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  unsigned long long val5 ;
  int ecode5 = 0 ;
  unsigned long long val6 ;
  int ecode6 = 0 ;
  PyObject *swig_obj[6] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoFrameObserver_onCaptureVideoFrame", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VideoFrameObserver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoFrameObserver_onCaptureVideoFrame" "', argument " "1"" of type '" "VideoFrameObserver *""'"); 
  }
  arg1 = reinterpret_cast< VideoFrameObserver * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VideoFrameObserver_onCaptureVideoFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VideoFrameObserver_onCaptureVideoFrame" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VideoFrameObserver_onCaptureVideoFrame" "', argument " "4"" of type '" "uint64_t""'");
  } 
  arg4 = static_cast< uint64_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VideoFrameObserver_onCaptureVideoFrame" "', argument " "5"" of type '" "uint64_t""'");
  } 
  arg5 = static_cast< uint64_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VideoFrameObserver_onCaptureVideoFrame" "', argument " "6"" of type '" "uint64_t""'");
  } 
  arg6 = static_cast< uint64_t >(val6);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("VideoFrameObserver::onCaptureVideoFrame");
    } else {
      (arg1)->onCaptureVideoFrame(arg2,arg3,arg4,arg5,arg6);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoFrameObserver_onRenderVideoFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VideoFrameObserver *arg1 = (VideoFrameObserver *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  int arg4 ;
  uint64_t arg5 ;
  uint64_t arg6 ;
  uint64_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  unsigned long long val5 ;
  int ecode5 = 0 ;
  unsigned long long val6 ;
  int ecode6 = 0 ;
  unsigned long long val7 ;
  int ecode7 = 0 ;
  PyObject *swig_obj[7] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoFrameObserver_onRenderVideoFrame", 7, 7, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VideoFrameObserver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoFrameObserver_onRenderVideoFrame" "', argument " "1"" of type '" "VideoFrameObserver *""'"); 
  }
  arg1 = reinterpret_cast< VideoFrameObserver * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VideoFrameObserver_onRenderVideoFrame" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VideoFrameObserver_onRenderVideoFrame" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VideoFrameObserver_onRenderVideoFrame" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VideoFrameObserver_onRenderVideoFrame" "', argument " "5"" of type '" "uint64_t""'");
  } 
  arg5 = static_cast< uint64_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VideoFrameObserver_onRenderVideoFrame" "', argument " "6"" of type '" "uint64_t""'");
  } 
  arg6 = static_cast< uint64_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "VideoFrameObserver_onRenderVideoFrame" "', argument " "7"" of type '" "uint64_t""'");
  } 
  arg7 = static_cast< uint64_t >(val7);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("VideoFrameObserver::onRenderVideoFrame");
    } else {
      (arg1)->onRenderVideoFrame(arg2,arg3,arg4,arg5,arg6,arg7);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoFrameObserver_privateData_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VideoFrameObserver *arg1 = (VideoFrameObserver *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoFrameObserver_privateData_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VideoFrameObserver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoFrameObserver_privateData_set" "', argument " "1"" of type '" "VideoFrameObserver *""'"); 
  }
  arg1 = reinterpret_cast< VideoFrameObserver * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VideoFrameObserver_privateData_set" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->privateData = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoFrameObserver_privateData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VideoFrameObserver *arg1 = (VideoFrameObserver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  void *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VideoFrameObserver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoFrameObserver_privateData_get" "', argument " "1"" of type '" "VideoFrameObserver *""'"); 
  }
  arg1 = reinterpret_cast< VideoFrameObserver * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (void *) ((arg1)->privateData);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VideoFrameObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  VideoFrameObserver *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if ( arg1 != Py_None ) {
      /* subclassed */
      result = (VideoFrameObserver *)new SwigDirector_VideoFrameObserver(arg1); 
    } else {
      SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
      SWIG_fail;
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VideoFrameObserver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_VideoFrameObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VideoFrameObserver *arg1 = (VideoFrameObserver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_VideoFrameObserver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_VideoFrameObserver" "', argument " "1"" of type '" "VideoFrameObserver *""'"); 
  }
  arg1 = reinterpret_cast< VideoFrameObserver * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VideoFrameObserver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_VideoFrameObserver, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VideoFrameObserver_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_registerVideoFrameObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  VideoFrameObserver *arg2 = (VideoFrameObserver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "registerVideoFrameObserver", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "registerVideoFrameObserver" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_VideoFrameObserver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "registerVideoFrameObserver" "', argument " "2"" of type '" "VideoFrameObserver *""'"); 
  }
  arg2 = reinterpret_cast< VideoFrameObserver * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    registerVideoFrameObserver(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unregisterVideoFrameObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  VideoFrameObserver *arg2 = (VideoFrameObserver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "unregisterVideoFrameObserver", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unregisterVideoFrameObserver" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_VideoFrameObserver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unregisterVideoFrameObserver" "', argument " "2"" of type '" "VideoFrameObserver *""'"); 
  }
  arg2 = reinterpret_cast< VideoFrameObserver * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    unregisterVideoFrameObserver(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AudioFrameObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AudioFrameObserver *arg1 = (AudioFrameObserver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioFrameObserver, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AudioFrameObserver" "', argument " "1"" of type '" "AudioFrameObserver *""'"); 
  }
  arg1 = reinterpret_cast< AudioFrameObserver * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioFrameObserver_onRecordAudioFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AudioFrameObserver *arg1 = (AudioFrameObserver *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  uint64_t arg7 ;
  int64_t arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  unsigned long long val7 ;
  int ecode7 = 0 ;
  long long val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  PyObject *swig_obj[9] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioFrameObserver_onRecordAudioFrame", 9, 9, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioFrameObserver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioFrameObserver_onRecordAudioFrame" "', argument " "1"" of type '" "AudioFrameObserver *""'"); 
  }
  arg1 = reinterpret_cast< AudioFrameObserver * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioFrameObserver_onRecordAudioFrame" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AudioFrameObserver_onRecordAudioFrame" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AudioFrameObserver_onRecordAudioFrame" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AudioFrameObserver_onRecordAudioFrame" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AudioFrameObserver_onRecordAudioFrame" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AudioFrameObserver_onRecordAudioFrame" "', argument " "7"" of type '" "uint64_t""'");
  } 
  arg7 = static_cast< uint64_t >(val7);
  ecode8 = SWIG_AsVal_long_SS_long(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "AudioFrameObserver_onRecordAudioFrame" "', argument " "8"" of type '" "int64_t""'");
  } 
  arg8 = static_cast< int64_t >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "AudioFrameObserver_onRecordAudioFrame" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("AudioFrameObserver::onRecordAudioFrame");
    } else {
      (arg1)->onRecordAudioFrame(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioFrameObserver_onPlaybackAudioFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AudioFrameObserver *arg1 = (AudioFrameObserver *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  uint64_t arg7 ;
  int64_t arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  unsigned long long val7 ;
  int ecode7 = 0 ;
  long long val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  PyObject *swig_obj[9] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioFrameObserver_onPlaybackAudioFrame", 9, 9, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioFrameObserver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioFrameObserver_onPlaybackAudioFrame" "', argument " "1"" of type '" "AudioFrameObserver *""'"); 
  }
  arg1 = reinterpret_cast< AudioFrameObserver * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioFrameObserver_onPlaybackAudioFrame" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AudioFrameObserver_onPlaybackAudioFrame" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AudioFrameObserver_onPlaybackAudioFrame" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AudioFrameObserver_onPlaybackAudioFrame" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AudioFrameObserver_onPlaybackAudioFrame" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AudioFrameObserver_onPlaybackAudioFrame" "', argument " "7"" of type '" "uint64_t""'");
  } 
  arg7 = static_cast< uint64_t >(val7);
  ecode8 = SWIG_AsVal_long_SS_long(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "AudioFrameObserver_onPlaybackAudioFrame" "', argument " "8"" of type '" "int64_t""'");
  } 
  arg8 = static_cast< int64_t >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "AudioFrameObserver_onPlaybackAudioFrame" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("AudioFrameObserver::onPlaybackAudioFrame");
    } else {
      (arg1)->onPlaybackAudioFrame(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioFrameObserver_onMixedAudioFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AudioFrameObserver *arg1 = (AudioFrameObserver *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  uint64_t arg7 ;
  int64_t arg8 ;
  int arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  unsigned long long val7 ;
  int ecode7 = 0 ;
  long long val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  PyObject *swig_obj[9] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioFrameObserver_onMixedAudioFrame", 9, 9, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioFrameObserver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioFrameObserver_onMixedAudioFrame" "', argument " "1"" of type '" "AudioFrameObserver *""'"); 
  }
  arg1 = reinterpret_cast< AudioFrameObserver * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioFrameObserver_onMixedAudioFrame" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AudioFrameObserver_onMixedAudioFrame" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AudioFrameObserver_onMixedAudioFrame" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AudioFrameObserver_onMixedAudioFrame" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AudioFrameObserver_onMixedAudioFrame" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AudioFrameObserver_onMixedAudioFrame" "', argument " "7"" of type '" "uint64_t""'");
  } 
  arg7 = static_cast< uint64_t >(val7);
  ecode8 = SWIG_AsVal_long_SS_long(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "AudioFrameObserver_onMixedAudioFrame" "', argument " "8"" of type '" "int64_t""'");
  } 
  arg8 = static_cast< int64_t >(val8);
  ecode9 = SWIG_AsVal_int(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "AudioFrameObserver_onMixedAudioFrame" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("AudioFrameObserver::onMixedAudioFrame");
    } else {
      (arg1)->onMixedAudioFrame(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioFrameObserver_onPlaybackAudioFrameBeforeMixing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AudioFrameObserver *arg1 = (AudioFrameObserver *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  uint64_t arg8 ;
  int64_t arg9 ;
  int arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  unsigned long long val8 ;
  int ecode8 = 0 ;
  long long val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  PyObject *swig_obj[10] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioFrameObserver_onPlaybackAudioFrameBeforeMixing", 10, 10, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioFrameObserver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioFrameObserver_onPlaybackAudioFrameBeforeMixing" "', argument " "1"" of type '" "AudioFrameObserver *""'"); 
  }
  arg1 = reinterpret_cast< AudioFrameObserver * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioFrameObserver_onPlaybackAudioFrameBeforeMixing" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AudioFrameObserver_onPlaybackAudioFrameBeforeMixing" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AudioFrameObserver_onPlaybackAudioFrameBeforeMixing" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AudioFrameObserver_onPlaybackAudioFrameBeforeMixing" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AudioFrameObserver_onPlaybackAudioFrameBeforeMixing" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AudioFrameObserver_onPlaybackAudioFrameBeforeMixing" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "AudioFrameObserver_onPlaybackAudioFrameBeforeMixing" "', argument " "8"" of type '" "uint64_t""'");
  } 
  arg8 = static_cast< uint64_t >(val8);
  ecode9 = SWIG_AsVal_long_SS_long(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "AudioFrameObserver_onPlaybackAudioFrameBeforeMixing" "', argument " "9"" of type '" "int64_t""'");
  } 
  arg9 = static_cast< int64_t >(val9);
  ecode10 = SWIG_AsVal_int(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "AudioFrameObserver_onPlaybackAudioFrameBeforeMixing" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("AudioFrameObserver::onPlaybackAudioFrameBeforeMixing");
    } else {
      (arg1)->onPlaybackAudioFrameBeforeMixing(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioFrameObserver_privateData_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AudioFrameObserver *arg1 = (AudioFrameObserver *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioFrameObserver_privateData_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioFrameObserver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioFrameObserver_privateData_set" "', argument " "1"" of type '" "AudioFrameObserver *""'"); 
  }
  arg1 = reinterpret_cast< AudioFrameObserver * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AudioFrameObserver_privateData_set" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->privateData = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioFrameObserver_privateData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AudioFrameObserver *arg1 = (AudioFrameObserver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  void *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioFrameObserver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioFrameObserver_privateData_get" "', argument " "1"" of type '" "AudioFrameObserver *""'"); 
  }
  arg1 = reinterpret_cast< AudioFrameObserver * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (void *) ((arg1)->privateData);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AudioFrameObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  AudioFrameObserver *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if ( arg1 != Py_None ) {
      /* subclassed */
      result = (AudioFrameObserver *)new SwigDirector_AudioFrameObserver(arg1); 
    } else {
      SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
      SWIG_fail;
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AudioFrameObserver, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_AudioFrameObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AudioFrameObserver *arg1 = (AudioFrameObserver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_AudioFrameObserver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_AudioFrameObserver" "', argument " "1"" of type '" "AudioFrameObserver *""'"); 
  }
  arg1 = reinterpret_cast< AudioFrameObserver * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AudioFrameObserver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_AudioFrameObserver, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *AudioFrameObserver_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_registerAudioFrameObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  AudioFrameObserver *arg2 = (AudioFrameObserver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "registerAudioFrameObserver", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "registerAudioFrameObserver" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_AudioFrameObserver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "registerAudioFrameObserver" "', argument " "2"" of type '" "AudioFrameObserver *""'"); 
  }
  arg2 = reinterpret_cast< AudioFrameObserver * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    registerAudioFrameObserver(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_unregisterAudioFrameObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcEngineBridge *arg1 = (agora::common::RtcEngineBridge *) 0 ;
  AudioFrameObserver *arg2 = (AudioFrameObserver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "unregisterAudioFrameObserver", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcEngineBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unregisterAudioFrameObserver" "', argument " "1"" of type '" "agora::common::RtcEngineBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcEngineBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_AudioFrameObserver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "unregisterAudioFrameObserver" "', argument " "2"" of type '" "AudioFrameObserver *""'"); 
  }
  arg2 = reinterpret_cast< AudioFrameObserver * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    unregisterAudioFrameObserver(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_APICaseHandler_handleAPICase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::APICaseHandler *arg1 = (agora::common::APICaseHandler *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "APICaseHandler_handleAPICase", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__APICaseHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "APICaseHandler_handleAPICase" "', argument " "1"" of type '" "agora::common::APICaseHandler *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::APICaseHandler * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "APICaseHandler_handleAPICase" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "APICaseHandler_handleAPICase" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      Swig::DirectorPureVirtualException::raise("agora::common::APICaseHandler::handleAPICase");
    } else {
      (arg1)->handleAPICase(arg2,(char const *)arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_APICaseHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::APICaseHandler *arg1 = (agora::common::APICaseHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__APICaseHandler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_APICaseHandler" "', argument " "1"" of type '" "agora::common::APICaseHandler *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::APICaseHandler * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_APICaseHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  agora::common::APICaseHandler *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if ( arg1 != Py_None ) {
      /* subclassed */
      result = (agora::common::APICaseHandler *)new SwigDirector_APICaseHandler(arg1); 
    } else {
      SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
      SWIG_fail;
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__common__APICaseHandler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_APICaseHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::APICaseHandler *arg1 = (agora::common::APICaseHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__APICaseHandler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_APICaseHandler" "', argument " "1"" of type '" "agora::common::APICaseHandler *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::APICaseHandler * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
      if (director) director->swig_disown();
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *APICaseHandler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__common__APICaseHandler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *APICaseHandler_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_BeginApiTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  agora::common::APICaseHandler *arg2 = (agora::common::APICaseHandler *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BeginApiTest", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BeginApiTest" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__common__APICaseHandler, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BeginApiTest" "', argument " "2"" of type '" "agora::common::APICaseHandler *""'"); 
  }
  arg2 = reinterpret_cast< agora::common::APICaseHandler * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    agora::common::BeginApiTest((char const *)arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompareAndDumpApiTestResult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  agora::common::APICaseHandler *arg3 = (agora::common::APICaseHandler *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "CompareAndDumpApiTestResult", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompareAndDumpApiTestResult" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CompareAndDumpApiTestResult" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_agora__common__APICaseHandler, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CompareAndDumpApiTestResult" "', argument " "3"" of type '" "agora::common::APICaseHandler *""'"); 
  }
  arg3 = reinterpret_cast< agora::common::APICaseHandler * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    agora::common::CompareAndDumpApiTestResult((char const *)arg1,(char const *)arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BeginRtcEngineEventTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  agora::common::RtcEngineEventHandlerBase *arg2 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BeginRtcEngineEventTest", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BeginRtcEngineEventTest" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BeginRtcEngineEventTest" "', argument " "2"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg2 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    agora::common::BeginRtcEngineEventTest((char const *)arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompareAndDumpRtcEngineEventTestResult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  agora::common::RtcEngineEventHandlerBase *arg3 = (agora::common::RtcEngineEventHandlerBase *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "CompareAndDumpRtcEngineEventTestResult", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompareAndDumpRtcEngineEventTestResult" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CompareAndDumpRtcEngineEventTestResult" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_agora__common__RtcEngineEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CompareAndDumpRtcEngineEventTestResult" "', argument " "3"" of type '" "agora::common::RtcEngineEventHandlerBase *""'"); 
  }
  arg3 = reinterpret_cast< agora::common::RtcEngineEventHandlerBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    agora::common::CompareAndDumpRtcEngineEventTestResult((char const *)arg1,(char const *)arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogEngineEventCase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LogEngineEventCase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogEngineEventCase" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LogEngineEventCase" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    agora::common::LogEngineEventCase((char const *)arg1,(char const *)arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BeginChannelEventTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  agora::rtc::IChannel *arg2 = (agora::rtc::IChannel *) 0 ;
  agora::common::RtcChannelEventHandlerBase *arg3 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BeginChannelEventTest", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BeginChannelEventTest" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BeginChannelEventTest" "', argument " "2"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannel * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BeginChannelEventTest" "', argument " "3"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg3 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    agora::common::BeginChannelEventTest((char const *)arg1,arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompareAndDumpChannelEventTestResult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  agora::rtc::IChannel *arg3 = (agora::rtc::IChannel *) 0 ;
  agora::common::RtcChannelEventHandlerBase *arg4 = (agora::common::RtcChannelEventHandlerBase *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args, "CompareAndDumpChannelEventTestResult", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompareAndDumpChannelEventTestResult" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CompareAndDumpChannelEventTestResult" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CompareAndDumpChannelEventTestResult" "', argument " "3"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg3 = reinterpret_cast< agora::rtc::IChannel * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_agora__common__RtcChannelEventHandlerBase, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CompareAndDumpChannelEventTestResult" "', argument " "4"" of type '" "agora::common::RtcChannelEventHandlerBase *""'"); 
  }
  arg4 = reinterpret_cast< agora::common::RtcChannelEventHandlerBase * >(argp4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    agora::common::CompareAndDumpChannelEventTestResult((char const *)arg1,(char const *)arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogChannelEventCase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LogChannelEventCase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogChannelEventCase" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LogChannelEventCase" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    agora::common::LogChannelEventCase((char const *)arg1,(char const *)arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IChannel_channelId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::IChannel *arg1 = (agora::rtc::IChannel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IChannel_channelId" "', argument " "1"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::IChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *)(arg1)->channelId();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IChannel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::IChannel *arg1 = (agora::rtc::IChannel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__IChannel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IChannel" "', argument " "1"" of type '" "agora::rtc::IChannel *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::IChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IChannel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__IChannel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ChannelMediaOptions_autoSubscribeAudio_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaOptions *arg1 = (agora::rtc::ChannelMediaOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ChannelMediaOptions_autoSubscribeAudio_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelMediaOptions_autoSubscribeAudio_set" "', argument " "1"" of type '" "agora::rtc::ChannelMediaOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ChannelMediaOptions_autoSubscribeAudio_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->autoSubscribeAudio = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelMediaOptions_autoSubscribeAudio_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaOptions *arg1 = (agora::rtc::ChannelMediaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelMediaOptions_autoSubscribeAudio_get" "', argument " "1"" of type '" "agora::rtc::ChannelMediaOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaOptions * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool) ((arg1)->autoSubscribeAudio);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelMediaOptions_autoSubscribeVideo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaOptions *arg1 = (agora::rtc::ChannelMediaOptions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ChannelMediaOptions_autoSubscribeVideo_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelMediaOptions_autoSubscribeVideo_set" "', argument " "1"" of type '" "agora::rtc::ChannelMediaOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaOptions * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ChannelMediaOptions_autoSubscribeVideo_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->autoSubscribeVideo = arg2;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChannelMediaOptions_autoSubscribeVideo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaOptions *arg1 = (agora::rtc::ChannelMediaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaOptions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChannelMediaOptions_autoSubscribeVideo_get" "', argument " "1"" of type '" "agora::rtc::ChannelMediaOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaOptions * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool) ((arg1)->autoSubscribeVideo);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ChannelMediaOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaOptions *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ChannelMediaOptions", 0, 0, 0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::ChannelMediaOptions *)new agora::rtc::ChannelMediaOptions();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__ChannelMediaOptions, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ChannelMediaOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::rtc::ChannelMediaOptions *arg1 = (agora::rtc::ChannelMediaOptions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__rtc__ChannelMediaOptions, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ChannelMediaOptions" "', argument " "1"" of type '" "agora::rtc::ChannelMediaOptions *""'"); 
  }
  arg1 = reinterpret_cast< agora::rtc::ChannelMediaOptions * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ChannelMediaOptions_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__rtc__ChannelMediaOptions, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ChannelMediaOptions_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_RtcChannelBridge_initChannelEventHandler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  agora::rtc::IChannelEventHandler *arg2 = (agora::rtc::IChannelEventHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_initChannelEventHandler", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_initChannelEventHandler" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IChannelEventHandler, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_initChannelEventHandler" "', argument " "2"" of type '" "agora::rtc::IChannelEventHandler *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IChannelEventHandler * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->initChannelEventHandler(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_release(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_release" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->release();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_joinChannel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  agora::rtc::uid_t arg4 ;
  agora::rtc::ChannelMediaOptions *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_joinChannel", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_joinChannel" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_joinChannel" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcChannelBridge_joinChannel" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelBridge_joinChannel" "', argument " "4"" of type '" "agora::rtc::uid_t""'");
  } 
  arg4 = static_cast< agora::rtc::uid_t >(val4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_agora__rtc__ChannelMediaOptions,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RtcChannelBridge_joinChannel" "', argument " "5"" of type '" "agora::rtc::ChannelMediaOptions const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcChannelBridge_joinChannel" "', argument " "5"" of type '" "agora::rtc::ChannelMediaOptions const &""'"); 
  }
  arg5 = reinterpret_cast< agora::rtc::ChannelMediaOptions * >(argp5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->joinChannel((char const *)arg2,(char const *)arg3,arg4,(agora::rtc::ChannelMediaOptions const &)*arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_joinChannelWithUserAccount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  agora::rtc::ChannelMediaOptions *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_joinChannelWithUserAccount", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_joinChannelWithUserAccount" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_joinChannelWithUserAccount" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcChannelBridge_joinChannelWithUserAccount" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_agora__rtc__ChannelMediaOptions,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RtcChannelBridge_joinChannelWithUserAccount" "', argument " "4"" of type '" "agora::rtc::ChannelMediaOptions const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcChannelBridge_joinChannelWithUserAccount" "', argument " "4"" of type '" "agora::rtc::ChannelMediaOptions const &""'"); 
  }
  arg4 = reinterpret_cast< agora::rtc::ChannelMediaOptions * >(argp4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->joinChannelWithUserAccount((char const *)arg2,(char const *)arg3,(agora::rtc::ChannelMediaOptions const &)*arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_leaveChannel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_leaveChannel" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->leaveChannel();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_publish(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_publish" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->publish();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_unpublish(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_unpublish" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->unpublish();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_channelId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_channelId" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (char *)(arg1)->channelId();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_getCallId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  agora::util::AString *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_getCallId", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_getCallId" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__util__AutoPtrT_agora__util__IString_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_getCallId" "', argument " "2"" of type '" "agora::util::AString &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcChannelBridge_getCallId" "', argument " "2"" of type '" "agora::util::AString &""'"); 
  }
  arg2 = reinterpret_cast< agora::util::AString * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getCallId(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_renewToken(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_renewToken", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_renewToken" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_renewToken" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->renewToken((char const *)arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_setEncryptionSecret(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_setEncryptionSecret", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_setEncryptionSecret" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_setEncryptionSecret" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setEncryptionSecret((char const *)arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_setEncryptionMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_setEncryptionMode", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_setEncryptionMode" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_setEncryptionMode" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setEncryptionMode((char const *)arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_registerPacketObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  agora::rtc::IPacketObserver *arg2 = (agora::rtc::IPacketObserver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_registerPacketObserver", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_registerPacketObserver" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IPacketObserver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_registerPacketObserver" "', argument " "2"" of type '" "agora::rtc::IPacketObserver *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IPacketObserver * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->registerPacketObserver(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_setClientRole(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  agora::rtc::CLIENT_ROLE_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_setClientRole", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_setClientRole" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcChannelBridge_setClientRole" "', argument " "2"" of type '" "agora::rtc::CLIENT_ROLE_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::CLIENT_ROLE_TYPE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setClientRole(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_setRemoteUserPriority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  agora::rtc::uid_t arg2 ;
  agora::rtc::PRIORITY_TYPE arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_setRemoteUserPriority", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_setRemoteUserPriority" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcChannelBridge_setRemoteUserPriority" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelBridge_setRemoteUserPriority" "', argument " "3"" of type '" "agora::rtc::PRIORITY_TYPE""'");
  } 
  arg3 = static_cast< agora::rtc::PRIORITY_TYPE >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setRemoteUserPriority(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_setRemoteVoicePosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  agora::rtc::uid_t arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_setRemoteVoicePosition", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_setRemoteVoicePosition" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcChannelBridge_setRemoteVoicePosition" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelBridge_setRemoteVoicePosition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelBridge_setRemoteVoicePosition" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setRemoteVoicePosition(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_setRemoteRenderMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  agora::rtc::uid_t arg2 ;
  agora::rtc::RENDER_MODE_TYPE arg3 ;
  agora::rtc::VIDEO_MIRROR_MODE_TYPE arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_setRemoteRenderMode", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_setRemoteRenderMode" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcChannelBridge_setRemoteRenderMode" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelBridge_setRemoteRenderMode" "', argument " "3"" of type '" "agora::rtc::RENDER_MODE_TYPE""'");
  } 
  arg3 = static_cast< agora::rtc::RENDER_MODE_TYPE >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelBridge_setRemoteRenderMode" "', argument " "4"" of type '" "agora::rtc::VIDEO_MIRROR_MODE_TYPE""'");
  } 
  arg4 = static_cast< agora::rtc::VIDEO_MIRROR_MODE_TYPE >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setRemoteRenderMode(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_setDefaultMuteAllRemoteAudioStreams(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_setDefaultMuteAllRemoteAudioStreams", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_setDefaultMuteAllRemoteAudioStreams" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcChannelBridge_setDefaultMuteAllRemoteAudioStreams" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setDefaultMuteAllRemoteAudioStreams(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_setDefaultMuteAllRemoteVideoStreams(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_setDefaultMuteAllRemoteVideoStreams", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_setDefaultMuteAllRemoteVideoStreams" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcChannelBridge_setDefaultMuteAllRemoteVideoStreams" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setDefaultMuteAllRemoteVideoStreams(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_muteAllRemoteAudioStreams(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_muteAllRemoteAudioStreams", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_muteAllRemoteAudioStreams" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcChannelBridge_muteAllRemoteAudioStreams" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->muteAllRemoteAudioStreams(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_adjustUserPlaybackSignalVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  agora::rtc::uid_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_adjustUserPlaybackSignalVolume", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_adjustUserPlaybackSignalVolume" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcChannelBridge_adjustUserPlaybackSignalVolume" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelBridge_adjustUserPlaybackSignalVolume" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->adjustUserPlaybackSignalVolume(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_muteRemoteAudioStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  agora::rtc::uid_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_muteRemoteAudioStream", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_muteRemoteAudioStream" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcChannelBridge_muteRemoteAudioStream" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelBridge_muteRemoteAudioStream" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->muteRemoteAudioStream(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_muteAllRemoteVideoStreams(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_muteAllRemoteVideoStreams", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_muteAllRemoteVideoStreams" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcChannelBridge_muteAllRemoteVideoStreams" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->muteAllRemoteVideoStreams(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_muteRemoteVideoStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  agora::rtc::uid_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_muteRemoteVideoStream", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_muteRemoteVideoStream" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcChannelBridge_muteRemoteVideoStream" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelBridge_muteRemoteVideoStream" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->muteRemoteVideoStream(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_setRemoteVideoStreamType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  agora::rtc::uid_t arg2 ;
  agora::rtc::REMOTE_VIDEO_STREAM_TYPE arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_setRemoteVideoStreamType", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_setRemoteVideoStreamType" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcChannelBridge_setRemoteVideoStreamType" "', argument " "2"" of type '" "agora::rtc::uid_t""'");
  } 
  arg2 = static_cast< agora::rtc::uid_t >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelBridge_setRemoteVideoStreamType" "', argument " "3"" of type '" "agora::rtc::REMOTE_VIDEO_STREAM_TYPE""'");
  } 
  arg3 = static_cast< agora::rtc::REMOTE_VIDEO_STREAM_TYPE >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setRemoteVideoStreamType(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_setRemoteDefaultVideoStreamType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  agora::rtc::REMOTE_VIDEO_STREAM_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_setRemoteDefaultVideoStreamType", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_setRemoteDefaultVideoStreamType" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcChannelBridge_setRemoteDefaultVideoStreamType" "', argument " "2"" of type '" "agora::rtc::REMOTE_VIDEO_STREAM_TYPE""'");
  } 
  arg2 = static_cast< agora::rtc::REMOTE_VIDEO_STREAM_TYPE >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setRemoteDefaultVideoStreamType(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_addPublishStreamUrl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_addPublishStreamUrl", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_addPublishStreamUrl" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_addPublishStreamUrl" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelBridge_addPublishStreamUrl" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->addPublishStreamUrl((char const *)arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_removePublishStreamUrl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_removePublishStreamUrl", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_removePublishStreamUrl" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_removePublishStreamUrl" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->removePublishStreamUrl((char const *)arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_setLiveTranscoding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  agora::rtc::LiveTranscoding *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_setLiveTranscoding", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_setLiveTranscoding" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__LiveTranscoding,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_setLiveTranscoding" "', argument " "2"" of type '" "agora::rtc::LiveTranscoding const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcChannelBridge_setLiveTranscoding" "', argument " "2"" of type '" "agora::rtc::LiveTranscoding const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::LiveTranscoding * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setLiveTranscoding((agora::rtc::LiveTranscoding const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_addInjectStreamUrl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  agora::rtc::InjectStreamConfig *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_addInjectStreamUrl", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_addInjectStreamUrl" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_addInjectStreamUrl" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_agora__rtc__InjectStreamConfig,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcChannelBridge_addInjectStreamUrl" "', argument " "3"" of type '" "agora::rtc::InjectStreamConfig const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcChannelBridge_addInjectStreamUrl" "', argument " "3"" of type '" "agora::rtc::InjectStreamConfig const &""'"); 
  }
  arg3 = reinterpret_cast< agora::rtc::InjectStreamConfig * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->addInjectStreamUrl((char const *)arg2,(agora::rtc::InjectStreamConfig const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_removeInjectStreamUrl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_removeInjectStreamUrl", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_removeInjectStreamUrl" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_removeInjectStreamUrl" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->removeInjectStreamUrl((char const *)arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_startChannelMediaRelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  agora::rtc::ChannelMediaRelayConfiguration *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_startChannelMediaRelay", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_startChannelMediaRelay" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__ChannelMediaRelayConfiguration,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_startChannelMediaRelay" "', argument " "2"" of type '" "agora::rtc::ChannelMediaRelayConfiguration const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcChannelBridge_startChannelMediaRelay" "', argument " "2"" of type '" "agora::rtc::ChannelMediaRelayConfiguration const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::ChannelMediaRelayConfiguration * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->startChannelMediaRelay((agora::rtc::ChannelMediaRelayConfiguration const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_updateChannelMediaRelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  agora::rtc::ChannelMediaRelayConfiguration *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_updateChannelMediaRelay", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_updateChannelMediaRelay" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_agora__rtc__ChannelMediaRelayConfiguration,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_updateChannelMediaRelay" "', argument " "2"" of type '" "agora::rtc::ChannelMediaRelayConfiguration const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcChannelBridge_updateChannelMediaRelay" "', argument " "2"" of type '" "agora::rtc::ChannelMediaRelayConfiguration const &""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::ChannelMediaRelayConfiguration * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->updateChannelMediaRelay((agora::rtc::ChannelMediaRelayConfiguration const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_stopChannelMediaRelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_stopChannelMediaRelay" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->stopChannelMediaRelay();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_createDataStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  int *arg2 = (int *) 0 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_createDataStream", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_createDataStream" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_createDataStream" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RtcChannelBridge_createDataStream" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelBridge_createDataStream" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->createDataStream(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_sendStreamMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_sendStreamMessage", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_sendStreamMessage" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcChannelBridge_sendStreamMessage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcChannelBridge_sendStreamMessage" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelBridge_sendStreamMessage" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->sendStreamMessage(arg2,(char const *)arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_getConnectionState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::CONNECTION_STATE_TYPE result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_getConnectionState" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::CONNECTION_STATE_TYPE)(arg1)->getConnectionState();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_registerMediaMetadataObserver__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  agora::rtc::IMetadataObserver *arg2 = (agora::rtc::IMetadataObserver *) 0 ;
  agora::rtc::IMetadataObserver::METADATA_TYPE arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_registerMediaMetadataObserver" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IMetadataObserver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_registerMediaMetadataObserver" "', argument " "2"" of type '" "agora::rtc::IMetadataObserver *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IMetadataObserver * >(argp2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_agora__rtc__IMetadataObserver__METADATA_TYPE,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcChannelBridge_registerMediaMetadataObserver" "', argument " "3"" of type '" "agora::rtc::IMetadataObserver::METADATA_TYPE""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcChannelBridge_registerMediaMetadataObserver" "', argument " "3"" of type '" "agora::rtc::IMetadataObserver::METADATA_TYPE""'");
    } else {
      agora::rtc::IMetadataObserver::METADATA_TYPE * temp = reinterpret_cast< agora::rtc::IMetadataObserver::METADATA_TYPE * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RtcChannelBridge_registerMediaMetadataObserver" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->registerMediaMetadataObserver(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_registerMediaMetadataObserver__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  agora::rtc::IMetadataObserver *arg2 = (agora::rtc::IMetadataObserver *) 0 ;
  agora::rtc::IMetadataObserver::METADATA_TYPE arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_registerMediaMetadataObserver" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IMetadataObserver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_registerMediaMetadataObserver" "', argument " "2"" of type '" "agora::rtc::IMetadataObserver *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IMetadataObserver * >(argp2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_agora__rtc__IMetadataObserver__METADATA_TYPE,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RtcChannelBridge_registerMediaMetadataObserver" "', argument " "3"" of type '" "agora::rtc::IMetadataObserver::METADATA_TYPE""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RtcChannelBridge_registerMediaMetadataObserver" "', argument " "3"" of type '" "agora::rtc::IMetadataObserver::METADATA_TYPE""'");
    } else {
      agora::rtc::IMetadataObserver::METADATA_TYPE * temp = reinterpret_cast< agora::rtc::IMetadataObserver::METADATA_TYPE * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->registerMediaMetadataObserver(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_registerMediaMetadataObserver(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RtcChannelBridge_registerMediaMetadataObserver", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_agora__common__RtcChannelBridge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_agora__rtc__IMetadataObserver, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_agora__rtc__IMetadataObserver__METADATA_TYPE, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RtcChannelBridge_registerMediaMetadataObserver__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_agora__common__RtcChannelBridge, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_agora__rtc__IMetadataObserver, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_agora__rtc__IMetadataObserver__METADATA_TYPE, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RtcChannelBridge_registerMediaMetadataObserver__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RtcChannelBridge_registerMediaMetadataObserver'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    agora::common::RtcChannelBridge::registerMediaMetadataObserver(agora::rtc::IMetadataObserver *,agora::rtc::IMetadataObserver::METADATA_TYPE,bool)\n"
    "    agora::common::RtcChannelBridge::registerMediaMetadataObserver(agora::rtc::IMetadataObserver *,agora::rtc::IMetadataObserver::METADATA_TYPE)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_sendMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  agora::rtc::IMetadataObserver::Metadata *arg2 = (agora::rtc::IMetadataObserver::Metadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_sendMetadata", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_sendMetadata" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_agora__rtc__IMetadataObserver__Metadata, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RtcChannelBridge_sendMetadata" "', argument " "2"" of type '" "agora::rtc::IMetadataObserver::Metadata *""'"); 
  }
  arg2 = reinterpret_cast< agora::rtc::IMetadataObserver::Metadata * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->sendMetadata(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_setMaxMetadataSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "RtcChannelBridge_setMaxMetadataSize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_setMaxMetadataSize" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RtcChannelBridge_setMaxMetadataSize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setMaxMetadataSize(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RtcChannelBridge_getChannel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  agora::rtc::IChannel *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RtcChannelBridge_getChannel" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (agora::rtc::IChannel *)(arg1)->getChannel();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_agora__rtc__IChannel, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RtcChannelBridge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::RtcChannelBridge *arg1 = (agora::common::RtcChannelBridge *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__RtcChannelBridge, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RtcChannelBridge" "', argument " "1"" of type '" "agora::common::RtcChannelBridge *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::RtcChannelBridge * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RtcChannelBridge_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__common__RtcChannelBridge, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VideoDeviceManager_startDeviceTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::VideoDeviceManager *arg1 = (agora::common::VideoDeviceManager *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoDeviceManager_startDeviceTest", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__VideoDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoDeviceManager_startDeviceTest" "', argument " "1"" of type '" "agora::common::VideoDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::VideoDeviceManager * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VideoDeviceManager_startDeviceTest" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->startDeviceTest(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoDeviceManager_stopDeviceTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::VideoDeviceManager *arg1 = (agora::common::VideoDeviceManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__VideoDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoDeviceManager_stopDeviceTest" "', argument " "1"" of type '" "agora::common::VideoDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::VideoDeviceManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->stopDeviceTest();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoDeviceManager_getDeviceCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::VideoDeviceManager *arg1 = (agora::common::VideoDeviceManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__VideoDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoDeviceManager_getDeviceCount" "', argument " "1"" of type '" "agora::common::VideoDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::VideoDeviceManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getDeviceCount();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoDeviceManager_setDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::VideoDeviceManager *arg1 = (agora::common::VideoDeviceManager *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[512] ;
  int res2 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoDeviceManager_setDevice", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__VideoDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoDeviceManager_setDevice" "', argument " "1"" of type '" "agora::common::VideoDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::VideoDeviceManager * >(argp1);
  res2 = SWIG_AsCharArray(swig_obj[1], temp2, 512);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VideoDeviceManager_setDevice" "', argument " "2"" of type '" "char const [512]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setDevice((char const (*))arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoDeviceManager_getCurrentDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::VideoDeviceManager *arg1 = (agora::common::VideoDeviceManager *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char temp2[512+1] ;
  char *t2 = 0 ;
  size_t n2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoDeviceManager_getCurrentDevice", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__VideoDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoDeviceManager_getCurrentDevice" "', argument " "1"" of type '" "agora::common::VideoDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::VideoDeviceManager * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &t2, &n2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VideoDeviceManager_getCurrentDevice" "', argument " "2"" of type '" "char deviceId_output[512]""'");
  }
  if ( n2 > (size_t) 512 ) n2 = (size_t) 512;
  memcpy(temp2, t2, sizeof(char)*n2);
  if (alloc2 == SWIG_NEWOBJ) delete[] t2;
  temp2[n2 - 1] = 0;                                                             
  arg2 = (char *) temp2;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getCurrentDevice(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  arg2[512] = 0;
  resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtr(arg2));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoDeviceManager_getDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::VideoDeviceManager *arg1 = (agora::common::VideoDeviceManager *) 0 ;
  int arg2 ;
  char *arg3 ;
  char *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char temp3[512+1] ;
  char *t3 = 0 ;
  size_t n3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char temp4[512+1] ;
  char *t4 = 0 ;
  size_t n4 = 0 ;
  int alloc4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "VideoDeviceManager_getDevice", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__VideoDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoDeviceManager_getDevice" "', argument " "1"" of type '" "agora::common::VideoDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::VideoDeviceManager * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VideoDeviceManager_getDevice" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &t3, &n3, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VideoDeviceManager_getDevice" "', argument " "3"" of type '" "char deviceName_output[512]""'");
  }
  if ( n3 > (size_t) 512 ) n3 = (size_t) 512;
  memcpy(temp3, t3, sizeof(char)*n3);
  if (alloc3 == SWIG_NEWOBJ) delete[] t3;
  temp3[n3 - 1] = 0;                                                             
  arg3 = (char *) temp3;
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &t4, &n4, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VideoDeviceManager_getDevice" "', argument " "4"" of type '" "char deviceId_output[512]""'");
  }
  if ( n4 > (size_t) 512 ) n4 = (size_t) 512;
  memcpy(temp4, t4, sizeof(char)*n4);
  if (alloc4 == SWIG_NEWOBJ) delete[] t4;
  temp4[n4 - 1] = 0;                                                             
  arg4 = (char *) temp4;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getDevice(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  arg3[512] = 0;
  resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtr(arg3));
  arg4[512] = 0;
  resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtr(arg4));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VideoDeviceManager_release(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::VideoDeviceManager *arg1 = (agora::common::VideoDeviceManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__VideoDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VideoDeviceManager_release" "', argument " "1"" of type '" "agora::common::VideoDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::VideoDeviceManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->release();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VideoDeviceManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::VideoDeviceManager *arg1 = (agora::common::VideoDeviceManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__VideoDeviceManager, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VideoDeviceManager" "', argument " "1"" of type '" "agora::common::VideoDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::VideoDeviceManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VideoDeviceManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__common__VideoDeviceManager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_AudioPlaybackDeviceManager_release(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioPlaybackDeviceManager *arg1 = (agora::common::AudioPlaybackDeviceManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioPlaybackDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioPlaybackDeviceManager_release" "', argument " "1"" of type '" "agora::common::AudioPlaybackDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioPlaybackDeviceManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->release();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioPlaybackDeviceManager_getCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioPlaybackDeviceManager *arg1 = (agora::common::AudioPlaybackDeviceManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioPlaybackDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioPlaybackDeviceManager_getCount" "', argument " "1"" of type '" "agora::common::AudioPlaybackDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioPlaybackDeviceManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getCount();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioPlaybackDeviceManager_getDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioPlaybackDeviceManager *arg1 = (agora::common::AudioPlaybackDeviceManager *) 0 ;
  int arg2 ;
  char *arg3 ;
  char *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char temp3[512+1] ;
  char *t3 = 0 ;
  size_t n3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char temp4[512+1] ;
  char *t4 = 0 ;
  size_t n4 = 0 ;
  int alloc4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioPlaybackDeviceManager_getDevice", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioPlaybackDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioPlaybackDeviceManager_getDevice" "', argument " "1"" of type '" "agora::common::AudioPlaybackDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioPlaybackDeviceManager * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioPlaybackDeviceManager_getDevice" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &t3, &n3, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AudioPlaybackDeviceManager_getDevice" "', argument " "3"" of type '" "char deviceName_output[512]""'");
  }
  if ( n3 > (size_t) 512 ) n3 = (size_t) 512;
  memcpy(temp3, t3, sizeof(char)*n3);
  if (alloc3 == SWIG_NEWOBJ) delete[] t3;
  temp3[n3 - 1] = 0;                                                             
  arg3 = (char *) temp3;
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &t4, &n4, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AudioPlaybackDeviceManager_getDevice" "', argument " "4"" of type '" "char deviceId_output[512]""'");
  }
  if ( n4 > (size_t) 512 ) n4 = (size_t) 512;
  memcpy(temp4, t4, sizeof(char)*n4);
  if (alloc4 == SWIG_NEWOBJ) delete[] t4;
  temp4[n4 - 1] = 0;                                                             
  arg4 = (char *) temp4;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getDevice(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  arg3[512] = 0;
  resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtr(arg3));
  arg4[512] = 0;
  resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtr(arg4));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioPlaybackDeviceManager_getCurrentDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioPlaybackDeviceManager *arg1 = (agora::common::AudioPlaybackDeviceManager *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char temp2[512+1] ;
  char *t2 = 0 ;
  size_t n2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioPlaybackDeviceManager_getCurrentDevice", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioPlaybackDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioPlaybackDeviceManager_getCurrentDevice" "', argument " "1"" of type '" "agora::common::AudioPlaybackDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioPlaybackDeviceManager * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &t2, &n2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AudioPlaybackDeviceManager_getCurrentDevice" "', argument " "2"" of type '" "char deviceId_output[512]""'");
  }
  if ( n2 > (size_t) 512 ) n2 = (size_t) 512;
  memcpy(temp2, t2, sizeof(char)*n2);
  if (alloc2 == SWIG_NEWOBJ) delete[] t2;
  temp2[n2 - 1] = 0;                                                             
  arg2 = (char *) temp2;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getCurrentDevice(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  arg2[512] = 0;
  resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtr(arg2));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioPlaybackDeviceManager_getCurrentDeviceInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioPlaybackDeviceManager *arg1 = (agora::common::AudioPlaybackDeviceManager *) 0 ;
  char *arg2 ;
  char *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char temp2[512+1] ;
  char *t2 = 0 ;
  size_t n2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char temp3[512+1] ;
  char *t3 = 0 ;
  size_t n3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioPlaybackDeviceManager_getCurrentDeviceInfo", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioPlaybackDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioPlaybackDeviceManager_getCurrentDeviceInfo" "', argument " "1"" of type '" "agora::common::AudioPlaybackDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioPlaybackDeviceManager * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &t2, &n2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AudioPlaybackDeviceManager_getCurrentDeviceInfo" "', argument " "2"" of type '" "char deviceId_output[512]""'");
  }
  if ( n2 > (size_t) 512 ) n2 = (size_t) 512;
  memcpy(temp2, t2, sizeof(char)*n2);
  if (alloc2 == SWIG_NEWOBJ) delete[] t2;
  temp2[n2 - 1] = 0;                                                             
  arg2 = (char *) temp2;
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &t3, &n3, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AudioPlaybackDeviceManager_getCurrentDeviceInfo" "', argument " "3"" of type '" "char deviceName_output[512]""'");
  }
  if ( n3 > (size_t) 512 ) n3 = (size_t) 512;
  memcpy(temp3, t3, sizeof(char)*n3);
  if (alloc3 == SWIG_NEWOBJ) delete[] t3;
  temp3[n3 - 1] = 0;                                                             
  arg3 = (char *) temp3;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getCurrentDeviceInfo(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  arg2[512] = 0;
  resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtr(arg2));
  arg3[512] = 0;
  resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtr(arg3));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioPlaybackDeviceManager_setDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioPlaybackDeviceManager *arg1 = (agora::common::AudioPlaybackDeviceManager *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[512] ;
  int res2 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioPlaybackDeviceManager_setDevice", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioPlaybackDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioPlaybackDeviceManager_setDevice" "', argument " "1"" of type '" "agora::common::AudioPlaybackDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioPlaybackDeviceManager * >(argp1);
  res2 = SWIG_AsCharArray(swig_obj[1], temp2, 512);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AudioPlaybackDeviceManager_setDevice" "', argument " "2"" of type '" "char const [512]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setDevice((char const (*))arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  arg2[512] = 0;
  resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtr(arg2));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioPlaybackDeviceManager_setDeviceVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioPlaybackDeviceManager *arg1 = (agora::common::AudioPlaybackDeviceManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioPlaybackDeviceManager_setDeviceVolume", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioPlaybackDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioPlaybackDeviceManager_setDeviceVolume" "', argument " "1"" of type '" "agora::common::AudioPlaybackDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioPlaybackDeviceManager * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioPlaybackDeviceManager_setDeviceVolume" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setDeviceVolume(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioPlaybackDeviceManager_getDeviceVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioPlaybackDeviceManager *arg1 = (agora::common::AudioPlaybackDeviceManager *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  int result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioPlaybackDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioPlaybackDeviceManager_getDeviceVolume" "', argument " "1"" of type '" "agora::common::AudioPlaybackDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioPlaybackDeviceManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getDeviceVolume(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioPlaybackDeviceManager_setDeviceMute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioPlaybackDeviceManager *arg1 = (agora::common::AudioPlaybackDeviceManager *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioPlaybackDeviceManager_setDeviceMute", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioPlaybackDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioPlaybackDeviceManager_setDeviceMute" "', argument " "1"" of type '" "agora::common::AudioPlaybackDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioPlaybackDeviceManager * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioPlaybackDeviceManager_setDeviceMute" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setDeviceMute(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioPlaybackDeviceManager_getDeviceMute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioPlaybackDeviceManager *arg1 = (agora::common::AudioPlaybackDeviceManager *) 0 ;
  bool *arg2 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  int result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioPlaybackDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioPlaybackDeviceManager_getDeviceMute" "', argument " "1"" of type '" "agora::common::AudioPlaybackDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioPlaybackDeviceManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getDeviceMute(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_bool((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_bool, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioPlaybackDeviceManager_startDeviceTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioPlaybackDeviceManager *arg1 = (agora::common::AudioPlaybackDeviceManager *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioPlaybackDeviceManager_startDeviceTest", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioPlaybackDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioPlaybackDeviceManager_startDeviceTest" "', argument " "1"" of type '" "agora::common::AudioPlaybackDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioPlaybackDeviceManager * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AudioPlaybackDeviceManager_startDeviceTest" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->startDeviceTest((char const *)arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioPlaybackDeviceManager_stopDeviceTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioPlaybackDeviceManager *arg1 = (agora::common::AudioPlaybackDeviceManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioPlaybackDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioPlaybackDeviceManager_stopDeviceTest" "', argument " "1"" of type '" "agora::common::AudioPlaybackDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioPlaybackDeviceManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->stopDeviceTest();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioPlaybackDeviceManager_startAudioDeviceLoopbackTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioPlaybackDeviceManager *arg1 = (agora::common::AudioPlaybackDeviceManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioPlaybackDeviceManager_startAudioDeviceLoopbackTest", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioPlaybackDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioPlaybackDeviceManager_startAudioDeviceLoopbackTest" "', argument " "1"" of type '" "agora::common::AudioPlaybackDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioPlaybackDeviceManager * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioPlaybackDeviceManager_startAudioDeviceLoopbackTest" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->startAudioDeviceLoopbackTest(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioPlaybackDeviceManager_stopAudioDeviceLoopbackTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioPlaybackDeviceManager *arg1 = (agora::common::AudioPlaybackDeviceManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioPlaybackDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioPlaybackDeviceManager_stopAudioDeviceLoopbackTest" "', argument " "1"" of type '" "agora::common::AudioPlaybackDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioPlaybackDeviceManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->stopAudioDeviceLoopbackTest();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AudioPlaybackDeviceManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioPlaybackDeviceManager *arg1 = (agora::common::AudioPlaybackDeviceManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioPlaybackDeviceManager, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AudioPlaybackDeviceManager" "', argument " "1"" of type '" "agora::common::AudioPlaybackDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioPlaybackDeviceManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AudioPlaybackDeviceManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__common__AudioPlaybackDeviceManager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_AudioRecordingDeviceManager_release(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioRecordingDeviceManager *arg1 = (agora::common::AudioRecordingDeviceManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioRecordingDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioRecordingDeviceManager_release" "', argument " "1"" of type '" "agora::common::AudioRecordingDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioRecordingDeviceManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->release();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioRecordingDeviceManager_getCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioRecordingDeviceManager *arg1 = (agora::common::AudioRecordingDeviceManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioRecordingDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioRecordingDeviceManager_getCount" "', argument " "1"" of type '" "agora::common::AudioRecordingDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioRecordingDeviceManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getCount();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioRecordingDeviceManager_getDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioRecordingDeviceManager *arg1 = (agora::common::AudioRecordingDeviceManager *) 0 ;
  int arg2 ;
  char *arg3 ;
  char *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char temp3[512+1] ;
  char *t3 = 0 ;
  size_t n3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char temp4[512+1] ;
  char *t4 = 0 ;
  size_t n4 = 0 ;
  int alloc4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioRecordingDeviceManager_getDevice", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioRecordingDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioRecordingDeviceManager_getDevice" "', argument " "1"" of type '" "agora::common::AudioRecordingDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioRecordingDeviceManager * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioRecordingDeviceManager_getDevice" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &t3, &n3, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AudioRecordingDeviceManager_getDevice" "', argument " "3"" of type '" "char deviceName_output[512]""'");
  }
  if ( n3 > (size_t) 512 ) n3 = (size_t) 512;
  memcpy(temp3, t3, sizeof(char)*n3);
  if (alloc3 == SWIG_NEWOBJ) delete[] t3;
  temp3[n3 - 1] = 0;                                                             
  arg3 = (char *) temp3;
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &t4, &n4, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AudioRecordingDeviceManager_getDevice" "', argument " "4"" of type '" "char deviceId_output[512]""'");
  }
  if ( n4 > (size_t) 512 ) n4 = (size_t) 512;
  memcpy(temp4, t4, sizeof(char)*n4);
  if (alloc4 == SWIG_NEWOBJ) delete[] t4;
  temp4[n4 - 1] = 0;                                                             
  arg4 = (char *) temp4;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getDevice(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  arg3[512] = 0;
  resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtr(arg3));
  arg4[512] = 0;
  resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtr(arg4));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioRecordingDeviceManager_getCurrentDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioRecordingDeviceManager *arg1 = (agora::common::AudioRecordingDeviceManager *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char temp2[512+1] ;
  char *t2 = 0 ;
  size_t n2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioRecordingDeviceManager_getCurrentDevice", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioRecordingDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioRecordingDeviceManager_getCurrentDevice" "', argument " "1"" of type '" "agora::common::AudioRecordingDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioRecordingDeviceManager * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &t2, &n2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AudioRecordingDeviceManager_getCurrentDevice" "', argument " "2"" of type '" "char deviceId_output[512]""'");
  }
  if ( n2 > (size_t) 512 ) n2 = (size_t) 512;
  memcpy(temp2, t2, sizeof(char)*n2);
  if (alloc2 == SWIG_NEWOBJ) delete[] t2;
  temp2[n2 - 1] = 0;                                                             
  arg2 = (char *) temp2;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getCurrentDevice(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  arg2[512] = 0;
  resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtr(arg2));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioRecordingDeviceManager_getCurrentDeviceInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioRecordingDeviceManager *arg1 = (agora::common::AudioRecordingDeviceManager *) 0 ;
  char *arg2 ;
  char *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char temp2[512+1] ;
  char *t2 = 0 ;
  size_t n2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char temp3[512+1] ;
  char *t3 = 0 ;
  size_t n3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioRecordingDeviceManager_getCurrentDeviceInfo", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioRecordingDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioRecordingDeviceManager_getCurrentDeviceInfo" "', argument " "1"" of type '" "agora::common::AudioRecordingDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioRecordingDeviceManager * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &t2, &n2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AudioRecordingDeviceManager_getCurrentDeviceInfo" "', argument " "2"" of type '" "char deviceId_output[512]""'");
  }
  if ( n2 > (size_t) 512 ) n2 = (size_t) 512;
  memcpy(temp2, t2, sizeof(char)*n2);
  if (alloc2 == SWIG_NEWOBJ) delete[] t2;
  temp2[n2 - 1] = 0;                                                             
  arg2 = (char *) temp2;
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &t3, &n3, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AudioRecordingDeviceManager_getCurrentDeviceInfo" "', argument " "3"" of type '" "char deviceName_output[512]""'");
  }
  if ( n3 > (size_t) 512 ) n3 = (size_t) 512;
  memcpy(temp3, t3, sizeof(char)*n3);
  if (alloc3 == SWIG_NEWOBJ) delete[] t3;
  temp3[n3 - 1] = 0;                                                             
  arg3 = (char *) temp3;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getCurrentDeviceInfo(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  arg2[512] = 0;
  resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtr(arg2));
  arg3[512] = 0;
  resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtr(arg3));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioRecordingDeviceManager_setDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioRecordingDeviceManager *arg1 = (agora::common::AudioRecordingDeviceManager *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[512] ;
  int res2 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioRecordingDeviceManager_setDevice", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioRecordingDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioRecordingDeviceManager_setDevice" "', argument " "1"" of type '" "agora::common::AudioRecordingDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioRecordingDeviceManager * >(argp1);
  res2 = SWIG_AsCharArray(swig_obj[1], temp2, 512);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AudioRecordingDeviceManager_setDevice" "', argument " "2"" of type '" "char const [512]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setDevice((char const (*))arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  arg2[512] = 0;
  resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_FromCharPtr(arg2));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioRecordingDeviceManager_setDeviceVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioRecordingDeviceManager *arg1 = (agora::common::AudioRecordingDeviceManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioRecordingDeviceManager_setDeviceVolume", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioRecordingDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioRecordingDeviceManager_setDeviceVolume" "', argument " "1"" of type '" "agora::common::AudioRecordingDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioRecordingDeviceManager * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioRecordingDeviceManager_setDeviceVolume" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setDeviceVolume(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioRecordingDeviceManager_getDeviceVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioRecordingDeviceManager *arg1 = (agora::common::AudioRecordingDeviceManager *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  int result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioRecordingDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioRecordingDeviceManager_getDeviceVolume" "', argument " "1"" of type '" "agora::common::AudioRecordingDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioRecordingDeviceManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getDeviceVolume(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioRecordingDeviceManager_setDeviceMute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioRecordingDeviceManager *arg1 = (agora::common::AudioRecordingDeviceManager *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioRecordingDeviceManager_setDeviceMute", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioRecordingDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioRecordingDeviceManager_setDeviceMute" "', argument " "1"" of type '" "agora::common::AudioRecordingDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioRecordingDeviceManager * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioRecordingDeviceManager_setDeviceMute" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->setDeviceMute(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioRecordingDeviceManager_getDeviceMute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioRecordingDeviceManager *arg1 = (agora::common::AudioRecordingDeviceManager *) 0 ;
  bool *arg2 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  int result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioRecordingDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioRecordingDeviceManager_getDeviceMute" "', argument " "1"" of type '" "agora::common::AudioRecordingDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioRecordingDeviceManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->getDeviceMute(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_bool((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_bool, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioRecordingDeviceManager_startDeviceTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioRecordingDeviceManager *arg1 = (agora::common::AudioRecordingDeviceManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioRecordingDeviceManager_startDeviceTest", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioRecordingDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioRecordingDeviceManager_startDeviceTest" "', argument " "1"" of type '" "agora::common::AudioRecordingDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioRecordingDeviceManager * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioRecordingDeviceManager_startDeviceTest" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->startDeviceTest(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioRecordingDeviceManager_stopDeviceTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioRecordingDeviceManager *arg1 = (agora::common::AudioRecordingDeviceManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioRecordingDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioRecordingDeviceManager_stopDeviceTest" "', argument " "1"" of type '" "agora::common::AudioRecordingDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioRecordingDeviceManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->stopDeviceTest();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioRecordingDeviceManager_startAudioDeviceLoopbackTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioRecordingDeviceManager *arg1 = (agora::common::AudioRecordingDeviceManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AudioRecordingDeviceManager_startAudioDeviceLoopbackTest", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioRecordingDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioRecordingDeviceManager_startAudioDeviceLoopbackTest" "', argument " "1"" of type '" "agora::common::AudioRecordingDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioRecordingDeviceManager * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AudioRecordingDeviceManager_startAudioDeviceLoopbackTest" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->startAudioDeviceLoopbackTest(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AudioRecordingDeviceManager_stopAudioDeviceLoopbackTest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioRecordingDeviceManager *arg1 = (agora::common::AudioRecordingDeviceManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioRecordingDeviceManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AudioRecordingDeviceManager_stopAudioDeviceLoopbackTest" "', argument " "1"" of type '" "agora::common::AudioRecordingDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioRecordingDeviceManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->stopAudioDeviceLoopbackTest();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AudioRecordingDeviceManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  agora::common::AudioRecordingDeviceManager *arg1 = (agora::common::AudioRecordingDeviceManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_agora__common__AudioRecordingDeviceManager, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AudioRecordingDeviceManager" "', argument " "1"" of type '" "agora::common::AudioRecordingDeviceManager *""'"); 
  }
  arg1 = reinterpret_cast< agora::common::AudioRecordingDeviceManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AudioRecordingDeviceManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_agora__common__AudioRecordingDeviceManager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "IString_empty", _wrap_IString_empty, METH_O, NULL},
	 { "IString_c_str", _wrap_IString_c_str, METH_O, NULL},
	 { "IString_data", _wrap_IString_data, METH_O, NULL},
	 { "IString_length", _wrap_IString_length, METH_O, NULL},
	 { "IString_release", _wrap_IString_release, METH_O, NULL},
	 { "IString_swigregister", IString_swigregister, METH_O, NULL},
	 { "LastmileProbeOneWayResult_packetLossRate_set", _wrap_LastmileProbeOneWayResult_packetLossRate_set, METH_VARARGS, " The packet loss rate (%)."},
	 { "LastmileProbeOneWayResult_packetLossRate_get", _wrap_LastmileProbeOneWayResult_packetLossRate_get, METH_O, " The packet loss rate (%)."},
	 { "LastmileProbeOneWayResult_jitter_set", _wrap_LastmileProbeOneWayResult_jitter_set, METH_VARARGS, " The network jitter (ms)."},
	 { "LastmileProbeOneWayResult_jitter_get", _wrap_LastmileProbeOneWayResult_jitter_get, METH_O, " The network jitter (ms)."},
	 { "LastmileProbeOneWayResult_availableBandwidth_set", _wrap_LastmileProbeOneWayResult_availableBandwidth_set, METH_VARARGS, NULL},
	 { "LastmileProbeOneWayResult_availableBandwidth_get", _wrap_LastmileProbeOneWayResult_availableBandwidth_get, METH_O, NULL},
	 { "new_LastmileProbeOneWayResult", _wrap_new_LastmileProbeOneWayResult, METH_NOARGS, NULL},
	 { "delete_LastmileProbeOneWayResult", _wrap_delete_LastmileProbeOneWayResult, METH_O, NULL},
	 { "LastmileProbeOneWayResult_swigregister", LastmileProbeOneWayResult_swigregister, METH_O, NULL},
	 { "LastmileProbeOneWayResult_swiginit", LastmileProbeOneWayResult_swiginit, METH_VARARGS, NULL},
	 { "LastmileProbeResult_state_set", _wrap_LastmileProbeResult_state_set, METH_VARARGS, " The state of the probe test."},
	 { "LastmileProbeResult_state_get", _wrap_LastmileProbeResult_state_get, METH_O, " The state of the probe test."},
	 { "LastmileProbeResult_uplinkReport_set", _wrap_LastmileProbeResult_uplinkReport_set, METH_VARARGS, " The uplink last-mile network probe test result."},
	 { "LastmileProbeResult_uplinkReport_get", _wrap_LastmileProbeResult_uplinkReport_get, METH_O, " The uplink last-mile network probe test result."},
	 { "LastmileProbeResult_downlinkReport_set", _wrap_LastmileProbeResult_downlinkReport_set, METH_VARARGS, " The downlink last-mile network probe test result."},
	 { "LastmileProbeResult_downlinkReport_get", _wrap_LastmileProbeResult_downlinkReport_get, METH_O, " The downlink last-mile network probe test result."},
	 { "LastmileProbeResult_rtt_set", _wrap_LastmileProbeResult_rtt_set, METH_VARARGS, " The round-trip delay time (ms)."},
	 { "LastmileProbeResult_rtt_get", _wrap_LastmileProbeResult_rtt_get, METH_O, " The round-trip delay time (ms)."},
	 { "new_LastmileProbeResult", _wrap_new_LastmileProbeResult, METH_NOARGS, NULL},
	 { "delete_LastmileProbeResult", _wrap_delete_LastmileProbeResult, METH_O, NULL},
	 { "LastmileProbeResult_swigregister", LastmileProbeResult_swigregister, METH_O, NULL},
	 { "LastmileProbeResult_swiginit", LastmileProbeResult_swiginit, METH_VARARGS, NULL},
	 { "LastmileProbeConfig_probeUplink_set", _wrap_LastmileProbeConfig_probeUplink_set, METH_VARARGS, "\n"
		"Sets whether or not to test the uplink network. Some users, for example, the audience in a `LIVE_BROADCASTING` channel, do not need such a test:\n"
		" - true: test.\n"
		" - false: do not test.\n"
		""},
	 { "LastmileProbeConfig_probeUplink_get", _wrap_LastmileProbeConfig_probeUplink_get, METH_O, "\n"
		"Sets whether or not to test the uplink network. Some users, for example, the audience in a `LIVE_BROADCASTING` channel, do not need such a test:\n"
		" - true: test.\n"
		" - false: do not test.\n"
		""},
	 { "LastmileProbeConfig_probeDownlink_set", _wrap_LastmileProbeConfig_probeDownlink_set, METH_VARARGS, "\n"
		"Sets whether or not to test the downlink network:\n"
		" - true: test.\n"
		" - false: do not test.\n"
		""},
	 { "LastmileProbeConfig_probeDownlink_get", _wrap_LastmileProbeConfig_probeDownlink_get, METH_O, "\n"
		"Sets whether or not to test the downlink network:\n"
		" - true: test.\n"
		" - false: do not test.\n"
		""},
	 { "LastmileProbeConfig_expectedUplinkBitrate_set", _wrap_LastmileProbeConfig_expectedUplinkBitrate_set, METH_VARARGS, " The expected maximum sending bitrate (bps) of the local user. The value ranges between 100000 and 5000000. We recommend setting this parameter according to the bitrate value set by 'setVideoEncoderConfiguration'."},
	 { "LastmileProbeConfig_expectedUplinkBitrate_get", _wrap_LastmileProbeConfig_expectedUplinkBitrate_get, METH_O, " The expected maximum sending bitrate (bps) of the local user. The value ranges between 100000 and 5000000. We recommend setting this parameter according to the bitrate value set by 'setVideoEncoderConfiguration'."},
	 { "LastmileProbeConfig_expectedDownlinkBitrate_set", _wrap_LastmileProbeConfig_expectedDownlinkBitrate_set, METH_VARARGS, " The expected maximum receiving bitrate (bps) of the local user. The value ranges between 100000 and 5000000."},
	 { "LastmileProbeConfig_expectedDownlinkBitrate_get", _wrap_LastmileProbeConfig_expectedDownlinkBitrate_get, METH_O, " The expected maximum receiving bitrate (bps) of the local user. The value ranges between 100000 and 5000000."},
	 { "new_LastmileProbeConfig", _wrap_new_LastmileProbeConfig, METH_NOARGS, NULL},
	 { "delete_LastmileProbeConfig", _wrap_delete_LastmileProbeConfig, METH_O, NULL},
	 { "LastmileProbeConfig_swigregister", LastmileProbeConfig_swigregister, METH_O, NULL},
	 { "LastmileProbeConfig_swiginit", LastmileProbeConfig_swiginit, METH_VARARGS, NULL},
	 { "AudioVolumeInfo_uid_set", _wrap_AudioVolumeInfo_uid_set, METH_VARARGS, "    User ID of the speaker. The uid of the local user is 0."},
	 { "AudioVolumeInfo_uid_get", _wrap_AudioVolumeInfo_uid_get, METH_O, "    User ID of the speaker. The uid of the local user is 0."},
	 { "AudioVolumeInfo_volume_set", _wrap_AudioVolumeInfo_volume_set, METH_VARARGS, " The volume of the speaker. The volume ranges between 0 (lowest volume) and 255 (highest volume)."},
	 { "AudioVolumeInfo_volume_get", _wrap_AudioVolumeInfo_volume_get, METH_O, " The volume of the speaker. The volume ranges between 0 (lowest volume) and 255 (highest volume)."},
	 { "AudioVolumeInfo_vad_set", _wrap_AudioVolumeInfo_vad_set, METH_VARARGS, "\n"
		" Voice activity status of the local user.\n"
		"- 0: The local user is not speaking.\n"
		"- 1: The local user is speaking.\n"
		"\n"
		"Notes: \n"
		"- The `vad` parameter cannot report the voice activity status of the remote users. In the remote users' callback, `vad` = 0.\n"
		"- Ensure that you set `report_vad`(true) in the 'agora::rtc::IRtcEngine::enableAudioVolumeIndication(int', int, bool) \"enableAudioVolumeIndication\" method to enable the voice activity detection of the local user.\n"
		""},
	 { "AudioVolumeInfo_vad_get", _wrap_AudioVolumeInfo_vad_get, METH_O, "\n"
		" Voice activity status of the local user.\n"
		"- 0: The local user is not speaking.\n"
		"- 1: The local user is speaking.\n"
		"\n"
		"Notes: \n"
		"- The `vad` parameter cannot report the voice activity status of the remote users. In the remote users' callback, `vad` = 0.\n"
		"- Ensure that you set `report_vad`(true) in the 'agora::rtc::IRtcEngine::enableAudioVolumeIndication(int', int, bool) \"enableAudioVolumeIndication\" method to enable the voice activity detection of the local user.\n"
		""},
	 { "AudioVolumeInfo_channelId_set", _wrap_AudioVolumeInfo_channelId_set, METH_VARARGS, " The channel ID, which indicates which channel the speaker is in."},
	 { "AudioVolumeInfo_channelId_get", _wrap_AudioVolumeInfo_channelId_get, METH_O, " The channel ID, which indicates which channel the speaker is in."},
	 { "new_AudioVolumeInfo", _wrap_new_AudioVolumeInfo, METH_NOARGS, NULL},
	 { "delete_AudioVolumeInfo", _wrap_delete_AudioVolumeInfo, METH_O, NULL},
	 { "AudioVolumeInfo_swigregister", AudioVolumeInfo_swigregister, METH_O, NULL},
	 { "AudioVolumeInfo_swiginit", AudioVolumeInfo_swiginit, METH_VARARGS, NULL},
	 { "RtcStats_duration_set", _wrap_RtcStats_duration_set, METH_VARARGS, "   Call duration (s), represented by an aggregate value."},
	 { "RtcStats_duration_get", _wrap_RtcStats_duration_get, METH_O, "   Call duration (s), represented by an aggregate value."},
	 { "RtcStats_txBytes_set", _wrap_RtcStats_txBytes_set, METH_VARARGS, "     Total number of bytes transmitted, represented by an aggregate value."},
	 { "RtcStats_txBytes_get", _wrap_RtcStats_txBytes_get, METH_O, "     Total number of bytes transmitted, represented by an aggregate value."},
	 { "RtcStats_rxBytes_set", _wrap_RtcStats_rxBytes_set, METH_VARARGS, "     Total number of bytes received, represented by an aggregate value."},
	 { "RtcStats_rxBytes_get", _wrap_RtcStats_rxBytes_get, METH_O, "     Total number of bytes received, represented by an aggregate value."},
	 { "RtcStats_txAudioBytes_set", _wrap_RtcStats_txAudioBytes_set, METH_VARARGS, "\n"
		" Total number of audio bytes sent (bytes), represented\n"
		"by an aggregate value.\n"
		""},
	 { "RtcStats_txAudioBytes_get", _wrap_RtcStats_txAudioBytes_get, METH_O, "\n"
		" Total number of audio bytes sent (bytes), represented\n"
		"by an aggregate value.\n"
		""},
	 { "RtcStats_txVideoBytes_set", _wrap_RtcStats_txVideoBytes_set, METH_VARARGS, "\n"
		" Total number of video bytes sent (bytes), represented\n"
		"by an aggregate value.\n"
		""},
	 { "RtcStats_txVideoBytes_get", _wrap_RtcStats_txVideoBytes_get, METH_O, "\n"
		" Total number of video bytes sent (bytes), represented\n"
		"by an aggregate value.\n"
		""},
	 { "RtcStats_rxAudioBytes_set", _wrap_RtcStats_rxAudioBytes_set, METH_VARARGS, "\n"
		" Total number of audio bytes received (bytes) before\n"
		"network countermeasures, represented by an aggregate value.\n"
		""},
	 { "RtcStats_rxAudioBytes_get", _wrap_RtcStats_rxAudioBytes_get, METH_O, "\n"
		" Total number of audio bytes received (bytes) before\n"
		"network countermeasures, represented by an aggregate value.\n"
		""},
	 { "RtcStats_rxVideoBytes_set", _wrap_RtcStats_rxVideoBytes_set, METH_VARARGS, "\n"
		" Total number of video bytes received (bytes),\n"
		"represented by an aggregate value.\n"
		""},
	 { "RtcStats_rxVideoBytes_get", _wrap_RtcStats_rxVideoBytes_get, METH_O, "\n"
		" Total number of video bytes received (bytes),\n"
		"represented by an aggregate value.\n"
		""},
	 { "RtcStats_txKBitRate_set", _wrap_RtcStats_txKBitRate_set, METH_VARARGS, "     Transmission bitrate (Kbps), represented by an instantaneous value."},
	 { "RtcStats_txKBitRate_get", _wrap_RtcStats_txKBitRate_get, METH_O, "     Transmission bitrate (Kbps), represented by an instantaneous value."},
	 { "RtcStats_rxKBitRate_set", _wrap_RtcStats_rxKBitRate_set, METH_VARARGS, "     Receive bitrate (Kbps), represented by an instantaneous value."},
	 { "RtcStats_rxKBitRate_get", _wrap_RtcStats_rxKBitRate_get, METH_O, "     Receive bitrate (Kbps), represented by an instantaneous value."},
	 { "RtcStats_rxAudioKBitRate_set", _wrap_RtcStats_rxAudioKBitRate_set, METH_VARARGS, "     Audio receive bitrate (Kbps), represented by an instantaneous value."},
	 { "RtcStats_rxAudioKBitRate_get", _wrap_RtcStats_rxAudioKBitRate_get, METH_O, "     Audio receive bitrate (Kbps), represented by an instantaneous value."},
	 { "RtcStats_txAudioKBitRate_set", _wrap_RtcStats_txAudioKBitRate_set, METH_VARARGS, "     Audio transmission bitrate (Kbps), represented by an instantaneous value."},
	 { "RtcStats_txAudioKBitRate_get", _wrap_RtcStats_txAudioKBitRate_get, METH_O, "     Audio transmission bitrate (Kbps), represented by an instantaneous value."},
	 { "RtcStats_rxVideoKBitRate_set", _wrap_RtcStats_rxVideoKBitRate_set, METH_VARARGS, "     Video receive bitrate (Kbps), represented by an instantaneous value."},
	 { "RtcStats_rxVideoKBitRate_get", _wrap_RtcStats_rxVideoKBitRate_get, METH_O, "     Video receive bitrate (Kbps), represented by an instantaneous value."},
	 { "RtcStats_txVideoKBitRate_set", _wrap_RtcStats_txVideoKBitRate_set, METH_VARARGS, "     Video transmission bitrate (Kbps), represented by an instantaneous value."},
	 { "RtcStats_txVideoKBitRate_get", _wrap_RtcStats_txVideoKBitRate_get, METH_O, "     Video transmission bitrate (Kbps), represented by an instantaneous value."},
	 { "RtcStats_lastmileDelay_set", _wrap_RtcStats_lastmileDelay_set, METH_VARARGS, " Client-server latency (ms)"},
	 { "RtcStats_lastmileDelay_get", _wrap_RtcStats_lastmileDelay_get, METH_O, " Client-server latency (ms)"},
	 { "RtcStats_txPacketLossRate_set", _wrap_RtcStats_txPacketLossRate_set, METH_VARARGS, "\n"
		" The packet loss rate (%) from the local client to Agora's edge server,\n"
		"before using the anti-packet-loss method.\n"
		""},
	 { "RtcStats_txPacketLossRate_get", _wrap_RtcStats_txPacketLossRate_get, METH_O, "\n"
		" The packet loss rate (%) from the local client to Agora's edge server,\n"
		"before using the anti-packet-loss method.\n"
		""},
	 { "RtcStats_rxPacketLossRate_set", _wrap_RtcStats_rxPacketLossRate_set, METH_VARARGS, "\n"
		" The packet loss rate (%) from Agora's edge server to the local client,\n"
		"before using the anti-packet-loss method.\n"
		""},
	 { "RtcStats_rxPacketLossRate_get", _wrap_RtcStats_rxPacketLossRate_get, METH_O, "\n"
		" The packet loss rate (%) from Agora's edge server to the local client,\n"
		"before using the anti-packet-loss method.\n"
		""},
	 { "RtcStats_userCount_set", _wrap_RtcStats_userCount_set, METH_VARARGS, "\n"
		"Number of users in the channel.\n"
		"\n"
		"    - `COMMUNICATION` profile: The number of users in the channel.\n"
		"    - `LIVE_BROADCASTING` profile:\n"
		"\n"
		"        -  If the local user is an audience: The number of users in the channel = The number of hosts in the channel + 1.\n"
		"        -  If the user is a host: The number of users in the channel = The number of hosts in the channel.\n"
		""},
	 { "RtcStats_userCount_get", _wrap_RtcStats_userCount_get, METH_O, "\n"
		"Number of users in the channel.\n"
		"\n"
		"    - `COMMUNICATION` profile: The number of users in the channel.\n"
		"    - `LIVE_BROADCASTING` profile:\n"
		"\n"
		"        -  If the local user is an audience: The number of users in the channel = The number of hosts in the channel + 1.\n"
		"        -  If the user is a host: The number of users in the channel = The number of hosts in the channel.\n"
		""},
	 { "RtcStats_cpuAppUsage_set", _wrap_RtcStats_cpuAppUsage_set, METH_VARARGS, "     Application CPU usage (%)."},
	 { "RtcStats_cpuAppUsage_get", _wrap_RtcStats_cpuAppUsage_get, METH_O, "     Application CPU usage (%)."},
	 { "RtcStats_cpuTotalUsage_set", _wrap_RtcStats_cpuTotalUsage_set, METH_VARARGS, "\n"
		"System CPU usage (%).\n"
		"\n"
		"In the multi-kernel environment, this member represents the average CPU usage.\n"
		"The value **=** 100 **-** System Idle Progress in Task Manager (%).\n"
		""},
	 { "RtcStats_cpuTotalUsage_get", _wrap_RtcStats_cpuTotalUsage_get, METH_O, "\n"
		"System CPU usage (%).\n"
		"\n"
		"In the multi-kernel environment, this member represents the average CPU usage.\n"
		"The value **=** 100 **-** System Idle Progress in Task Manager (%).\n"
		""},
	 { "RtcStats_gatewayRtt_set", _wrap_RtcStats_gatewayRtt_set, METH_VARARGS, " The round-trip time delay from the client to the local router."},
	 { "RtcStats_gatewayRtt_get", _wrap_RtcStats_gatewayRtt_get, METH_O, " The round-trip time delay from the client to the local router."},
	 { "RtcStats_memoryAppUsageRatio_set", _wrap_RtcStats_memoryAppUsageRatio_set, METH_VARARGS, "\n"
		"The memory usage ratio of the app (%).\n"
		"Notes: This value is for reference only. Due to system limitations, you may not get the value of this member.\n"
		""},
	 { "RtcStats_memoryAppUsageRatio_get", _wrap_RtcStats_memoryAppUsageRatio_get, METH_O, "\n"
		"The memory usage ratio of the app (%).\n"
		"Notes: This value is for reference only. Due to system limitations, you may not get the value of this member.\n"
		""},
	 { "RtcStats_memoryTotalUsageRatio_set", _wrap_RtcStats_memoryTotalUsageRatio_set, METH_VARARGS, "\n"
		"The memory usage ratio of the system (%).\n"
		"Notes: This value is for reference only. Due to system limitations, you may not get the value of this member.\n"
		""},
	 { "RtcStats_memoryTotalUsageRatio_get", _wrap_RtcStats_memoryTotalUsageRatio_get, METH_O, "\n"
		"The memory usage ratio of the system (%).\n"
		"Notes: This value is for reference only. Due to system limitations, you may not get the value of this member.\n"
		""},
	 { "RtcStats_memoryAppUsageInKbytes_set", _wrap_RtcStats_memoryAppUsageInKbytes_set, METH_VARARGS, "\n"
		"The memory usage of the app (KB).\n"
		"Notes: This value is for reference only. Due to system limitations, you may not get the value of this member.\n"
		""},
	 { "RtcStats_memoryAppUsageInKbytes_get", _wrap_RtcStats_memoryAppUsageInKbytes_get, METH_O, "\n"
		"The memory usage of the app (KB).\n"
		"Notes: This value is for reference only. Due to system limitations, you may not get the value of this member.\n"
		""},
	 { "new_RtcStats", _wrap_new_RtcStats, METH_NOARGS, NULL},
	 { "delete_RtcStats", _wrap_delete_RtcStats, METH_O, NULL},
	 { "RtcStats_swigregister", RtcStats_swigregister, METH_O, NULL},
	 { "RtcStats_swiginit", RtcStats_swiginit, METH_VARARGS, NULL},
	 { "LocalVideoStats_sentBitrate_set", _wrap_LocalVideoStats_sentBitrate_set, METH_VARARGS, "\n"
		" Bitrate (Kbps) sent in the reported interval, which does not include\n"
		"the bitrate of the retransmission video after packet loss.\n"
		""},
	 { "LocalVideoStats_sentBitrate_get", _wrap_LocalVideoStats_sentBitrate_get, METH_O, "\n"
		" Bitrate (Kbps) sent in the reported interval, which does not include\n"
		"the bitrate of the retransmission video after packet loss.\n"
		""},
	 { "LocalVideoStats_sentFrameRate_set", _wrap_LocalVideoStats_sentFrameRate_set, METH_VARARGS, "\n"
		" Frame rate (fps) sent in the reported interval, which does not include\n"
		"the frame rate of the retransmission video after packet loss.\n"
		""},
	 { "LocalVideoStats_sentFrameRate_get", _wrap_LocalVideoStats_sentFrameRate_get, METH_O, "\n"
		" Frame rate (fps) sent in the reported interval, which does not include\n"
		"the frame rate of the retransmission video after packet loss.\n"
		""},
	 { "LocalVideoStats_encoderOutputFrameRate_set", _wrap_LocalVideoStats_encoderOutputFrameRate_set, METH_VARARGS, " The encoder output frame rate (fps) of the local video."},
	 { "LocalVideoStats_encoderOutputFrameRate_get", _wrap_LocalVideoStats_encoderOutputFrameRate_get, METH_O, " The encoder output frame rate (fps) of the local video."},
	 { "LocalVideoStats_rendererOutputFrameRate_set", _wrap_LocalVideoStats_rendererOutputFrameRate_set, METH_VARARGS, " The render output frame rate (fps) of the local video."},
	 { "LocalVideoStats_rendererOutputFrameRate_get", _wrap_LocalVideoStats_rendererOutputFrameRate_get, METH_O, " The render output frame rate (fps) of the local video."},
	 { "LocalVideoStats_targetBitrate_set", _wrap_LocalVideoStats_targetBitrate_set, METH_VARARGS, " The target bitrate (Kbps) of the current encoder. This value is estimated by the SDK based on the current network conditions."},
	 { "LocalVideoStats_targetBitrate_get", _wrap_LocalVideoStats_targetBitrate_get, METH_O, " The target bitrate (Kbps) of the current encoder. This value is estimated by the SDK based on the current network conditions."},
	 { "LocalVideoStats_targetFrameRate_set", _wrap_LocalVideoStats_targetFrameRate_set, METH_VARARGS, " The target frame rate (fps) of the current encoder."},
	 { "LocalVideoStats_targetFrameRate_get", _wrap_LocalVideoStats_targetFrameRate_get, METH_O, " The target frame rate (fps) of the current encoder."},
	 { "LocalVideoStats_qualityAdaptIndication_set", _wrap_LocalVideoStats_qualityAdaptIndication_set, METH_VARARGS, "\n"
		" Quality change of the local video in terms of target frame rate and\n"
		"target bit rate in this reported interval. See #QUALITY_ADAPT_INDICATION.\n"
		""},
	 { "LocalVideoStats_qualityAdaptIndication_get", _wrap_LocalVideoStats_qualityAdaptIndication_get, METH_O, "\n"
		" Quality change of the local video in terms of target frame rate and\n"
		"target bit rate in this reported interval. See #QUALITY_ADAPT_INDICATION.\n"
		""},
	 { "LocalVideoStats_encodedBitrate_set", _wrap_LocalVideoStats_encodedBitrate_set, METH_VARARGS, "\n"
		" The encoding bitrate (Kbps), which does not include the bitrate of the\n"
		"re-transmission video after packet loss.\n"
		""},
	 { "LocalVideoStats_encodedBitrate_get", _wrap_LocalVideoStats_encodedBitrate_get, METH_O, "\n"
		" The encoding bitrate (Kbps), which does not include the bitrate of the\n"
		"re-transmission video after packet loss.\n"
		""},
	 { "LocalVideoStats_encodedFrameWidth_set", _wrap_LocalVideoStats_encodedFrameWidth_set, METH_VARARGS, " The width of the encoding frame (px)."},
	 { "LocalVideoStats_encodedFrameWidth_get", _wrap_LocalVideoStats_encodedFrameWidth_get, METH_O, " The width of the encoding frame (px)."},
	 { "LocalVideoStats_encodedFrameHeight_set", _wrap_LocalVideoStats_encodedFrameHeight_set, METH_VARARGS, " The height of the encoding frame (px)."},
	 { "LocalVideoStats_encodedFrameHeight_get", _wrap_LocalVideoStats_encodedFrameHeight_get, METH_O, " The height of the encoding frame (px)."},
	 { "LocalVideoStats_encodedFrameCount_set", _wrap_LocalVideoStats_encodedFrameCount_set, METH_VARARGS, " The value of the sent frames, represented by an aggregate value."},
	 { "LocalVideoStats_encodedFrameCount_get", _wrap_LocalVideoStats_encodedFrameCount_get, METH_O, " The value of the sent frames, represented by an aggregate value."},
	 { "LocalVideoStats_codecType_set", _wrap_LocalVideoStats_codecType_set, METH_VARARGS, "\n"
		" The codec type of the local video:\n"
		"- VIDEO_CODEC_VP8 = 1: VP8.\n"
		"- VIDEO_CODEC_H264 = 2: (Default) H.264.\n"
		""},
	 { "LocalVideoStats_codecType_get", _wrap_LocalVideoStats_codecType_get, METH_O, "\n"
		" The codec type of the local video:\n"
		"- VIDEO_CODEC_VP8 = 1: VP8.\n"
		"- VIDEO_CODEC_H264 = 2: (Default) H.264.\n"
		""},
	 { "LocalVideoStats_txPacketLossRate_set", _wrap_LocalVideoStats_txPacketLossRate_set, METH_VARARGS, " The video packet loss rate (%) from the local client to the Agora edge server before applying the anti-packet loss strategies."},
	 { "LocalVideoStats_txPacketLossRate_get", _wrap_LocalVideoStats_txPacketLossRate_get, METH_O, " The video packet loss rate (%) from the local client to the Agora edge server before applying the anti-packet loss strategies."},
	 { "LocalVideoStats_captureFrameRate_set", _wrap_LocalVideoStats_captureFrameRate_set, METH_VARARGS, " The capture frame rate (fps) of the local video."},
	 { "LocalVideoStats_captureFrameRate_get", _wrap_LocalVideoStats_captureFrameRate_get, METH_O, " The capture frame rate (fps) of the local video."},
	 { "new_LocalVideoStats", _wrap_new_LocalVideoStats, METH_NOARGS, NULL},
	 { "delete_LocalVideoStats", _wrap_delete_LocalVideoStats, METH_O, NULL},
	 { "LocalVideoStats_swigregister", LocalVideoStats_swigregister, METH_O, NULL},
	 { "LocalVideoStats_swiginit", LocalVideoStats_swiginit, METH_VARARGS, NULL},
	 { "RemoteVideoStats_uid_set", _wrap_RemoteVideoStats_uid_set, METH_VARARGS, " User ID of the remote user sending the video streams."},
	 { "RemoteVideoStats_uid_get", _wrap_RemoteVideoStats_uid_get, METH_O, " User ID of the remote user sending the video streams."},
	 { "RemoteVideoStats_delay_set", _wrap_RemoteVideoStats_delay_set, METH_VARARGS, "\n"
		"DEPRECATED** Time delay (ms).\n"
		"\n"
		"In scenarios where audio and video is synchronized, you can use the value of\n"
		"`networkTransportDelay` and `jitterBufferDelay` in `RemoteAudioStats` to know the delay statistics of the remote video.\n"
		""},
	 { "RemoteVideoStats_delay_get", _wrap_RemoteVideoStats_delay_get, METH_O, "\n"
		"DEPRECATED** Time delay (ms).\n"
		"\n"
		"In scenarios where audio and video is synchronized, you can use the value of\n"
		"`networkTransportDelay` and `jitterBufferDelay` in `RemoteAudioStats` to know the delay statistics of the remote video.\n"
		""},
	 { "RemoteVideoStats_width_set", _wrap_RemoteVideoStats_width_set, METH_VARARGS, " Width (pixels) of the video stream."},
	 { "RemoteVideoStats_width_get", _wrap_RemoteVideoStats_width_get, METH_O, " Width (pixels) of the video stream."},
	 { "RemoteVideoStats_height_set", _wrap_RemoteVideoStats_height_set, METH_VARARGS, " Height (pixels) of the video stream."},
	 { "RemoteVideoStats_height_get", _wrap_RemoteVideoStats_height_get, METH_O, " Height (pixels) of the video stream."},
	 { "RemoteVideoStats_receivedBitrate_set", _wrap_RemoteVideoStats_receivedBitrate_set, METH_VARARGS, " Bitrate (Kbps) received since the last count."},
	 { "RemoteVideoStats_receivedBitrate_get", _wrap_RemoteVideoStats_receivedBitrate_get, METH_O, " Bitrate (Kbps) received since the last count."},
	 { "RemoteVideoStats_decoderOutputFrameRate_set", _wrap_RemoteVideoStats_decoderOutputFrameRate_set, METH_VARARGS, " The decoder output frame rate (fps) of the remote video."},
	 { "RemoteVideoStats_decoderOutputFrameRate_get", _wrap_RemoteVideoStats_decoderOutputFrameRate_get, METH_O, " The decoder output frame rate (fps) of the remote video."},
	 { "RemoteVideoStats_rendererOutputFrameRate_set", _wrap_RemoteVideoStats_rendererOutputFrameRate_set, METH_VARARGS, " The render output frame rate (fps) of the remote video."},
	 { "RemoteVideoStats_rendererOutputFrameRate_get", _wrap_RemoteVideoStats_rendererOutputFrameRate_get, METH_O, " The render output frame rate (fps) of the remote video."},
	 { "RemoteVideoStats_packetLossRate_set", _wrap_RemoteVideoStats_packetLossRate_set, METH_VARARGS, " Packet loss rate (%) of the remote video stream after using the anti-packet-loss method."},
	 { "RemoteVideoStats_packetLossRate_get", _wrap_RemoteVideoStats_packetLossRate_get, METH_O, " Packet loss rate (%) of the remote video stream after using the anti-packet-loss method."},
	 { "RemoteVideoStats_rxStreamType_set", _wrap_RemoteVideoStats_rxStreamType_set, METH_VARARGS, " The type of the remote video stream: #REMOTE_VIDEO_STREAM_TYPE"},
	 { "RemoteVideoStats_rxStreamType_get", _wrap_RemoteVideoStats_rxStreamType_get, METH_O, " The type of the remote video stream: #REMOTE_VIDEO_STREAM_TYPE"},
	 { "RemoteVideoStats_totalFrozenTime_set", _wrap_RemoteVideoStats_totalFrozenTime_set, METH_VARARGS, "\n"
		"The total freeze time (ms) of the remote video stream after the remote user joins the channel.\n"
		"In a video session where the frame rate is set to no less than 5 fps, video freeze occurs when\n"
		"the time interval between two adjacent renderable video frames is more than 500 ms.\n"
		""},
	 { "RemoteVideoStats_totalFrozenTime_get", _wrap_RemoteVideoStats_totalFrozenTime_get, METH_O, "\n"
		"The total freeze time (ms) of the remote video stream after the remote user joins the channel.\n"
		"In a video session where the frame rate is set to no less than 5 fps, video freeze occurs when\n"
		"the time interval between two adjacent renderable video frames is more than 500 ms.\n"
		""},
	 { "RemoteVideoStats_frozenRate_set", _wrap_RemoteVideoStats_frozenRate_set, METH_VARARGS, " The total video freeze time as a percentage (%) of the total time when the video is available."},
	 { "RemoteVideoStats_frozenRate_get", _wrap_RemoteVideoStats_frozenRate_get, METH_O, " The total video freeze time as a percentage (%) of the total time when the video is available."},
	 { "RemoteVideoStats_totalActiveTime_set", _wrap_RemoteVideoStats_totalActiveTime_set, METH_VARARGS, "\n"
		"The total time (ms) when the remote user in the Communication profile or the remote\n"
		"broadcaster in the Live-broadcast profile neither stops sending the video stream nor\n"
		"disables the video module after joining the channel.\n"
		"\n"
		"Since: v3.0.1\n"
		""},
	 { "RemoteVideoStats_totalActiveTime_get", _wrap_RemoteVideoStats_totalActiveTime_get, METH_O, "\n"
		"The total time (ms) when the remote user in the Communication profile or the remote\n"
		"broadcaster in the Live-broadcast profile neither stops sending the video stream nor\n"
		"disables the video module after joining the channel.\n"
		"\n"
		"Since: v3.0.1\n"
		""},
	 { "RemoteVideoStats_publishDuration_set", _wrap_RemoteVideoStats_publishDuration_set, METH_VARARGS, "The total publish duration (ms) of the remote video stream."},
	 { "RemoteVideoStats_publishDuration_get", _wrap_RemoteVideoStats_publishDuration_get, METH_O, "The total publish duration (ms) of the remote video stream."},
	 { "new_RemoteVideoStats", _wrap_new_RemoteVideoStats, METH_NOARGS, NULL},
	 { "delete_RemoteVideoStats", _wrap_delete_RemoteVideoStats, METH_O, NULL},
	 { "RemoteVideoStats_swigregister", RemoteVideoStats_swigregister, METH_O, NULL},
	 { "RemoteVideoStats_swiginit", RemoteVideoStats_swiginit, METH_VARARGS, NULL},
	 { "LocalAudioStats_numChannels_set", _wrap_LocalAudioStats_numChannels_set, METH_VARARGS, " The number of channels."},
	 { "LocalAudioStats_numChannels_get", _wrap_LocalAudioStats_numChannels_get, METH_O, " The number of channels."},
	 { "LocalAudioStats_sentSampleRate_set", _wrap_LocalAudioStats_sentSampleRate_set, METH_VARARGS, " The sample rate (Hz)."},
	 { "LocalAudioStats_sentSampleRate_get", _wrap_LocalAudioStats_sentSampleRate_get, METH_O, " The sample rate (Hz)."},
	 { "LocalAudioStats_sentBitrate_set", _wrap_LocalAudioStats_sentBitrate_set, METH_VARARGS, " The average sending bitrate (Kbps)."},
	 { "LocalAudioStats_sentBitrate_get", _wrap_LocalAudioStats_sentBitrate_get, METH_O, " The average sending bitrate (Kbps)."},
	 { "LocalAudioStats_txPacketLossRate_set", _wrap_LocalAudioStats_txPacketLossRate_set, METH_VARARGS, " The audio packet loss rate (%) from the local client to the Agora edge server before applying the anti-packet loss strategies."},
	 { "LocalAudioStats_txPacketLossRate_get", _wrap_LocalAudioStats_txPacketLossRate_get, METH_O, " The audio packet loss rate (%) from the local client to the Agora edge server before applying the anti-packet loss strategies."},
	 { "new_LocalAudioStats", _wrap_new_LocalAudioStats, METH_NOARGS, NULL},
	 { "delete_LocalAudioStats", _wrap_delete_LocalAudioStats, METH_O, NULL},
	 { "LocalAudioStats_swigregister", LocalAudioStats_swigregister, METH_O, NULL},
	 { "LocalAudioStats_swiginit", LocalAudioStats_swiginit, METH_VARARGS, NULL},
	 { "RemoteAudioStats_uid_set", _wrap_RemoteAudioStats_uid_set, METH_VARARGS, " User ID of the remote user sending the audio streams."},
	 { "RemoteAudioStats_uid_get", _wrap_RemoteAudioStats_uid_get, METH_O, " User ID of the remote user sending the audio streams."},
	 { "RemoteAudioStats_quality_set", _wrap_RemoteAudioStats_quality_set, METH_VARARGS, " Audio quality received by the user: #QUALITY_TYPE."},
	 { "RemoteAudioStats_quality_get", _wrap_RemoteAudioStats_quality_get, METH_O, " Audio quality received by the user: #QUALITY_TYPE."},
	 { "RemoteAudioStats_networkTransportDelay_set", _wrap_RemoteAudioStats_networkTransportDelay_set, METH_VARARGS, " Network delay (ms) from the sender to the receiver."},
	 { "RemoteAudioStats_networkTransportDelay_get", _wrap_RemoteAudioStats_networkTransportDelay_get, METH_O, " Network delay (ms) from the sender to the receiver."},
	 { "RemoteAudioStats_jitterBufferDelay_set", _wrap_RemoteAudioStats_jitterBufferDelay_set, METH_VARARGS, " Network delay (ms) from the receiver to the jitter buffer."},
	 { "RemoteAudioStats_jitterBufferDelay_get", _wrap_RemoteAudioStats_jitterBufferDelay_get, METH_O, " Network delay (ms) from the receiver to the jitter buffer."},
	 { "RemoteAudioStats_audioLossRate_set", _wrap_RemoteAudioStats_audioLossRate_set, METH_VARARGS, " The audio frame loss rate in the reported interval."},
	 { "RemoteAudioStats_audioLossRate_get", _wrap_RemoteAudioStats_audioLossRate_get, METH_O, " The audio frame loss rate in the reported interval."},
	 { "RemoteAudioStats_numChannels_set", _wrap_RemoteAudioStats_numChannels_set, METH_VARARGS, " The number of channels."},
	 { "RemoteAudioStats_numChannels_get", _wrap_RemoteAudioStats_numChannels_get, METH_O, " The number of channels."},
	 { "RemoteAudioStats_receivedSampleRate_set", _wrap_RemoteAudioStats_receivedSampleRate_set, METH_VARARGS, "\n"
		" The sample rate (Hz) of the received audio stream in the reported\n"
		"interval.\n"
		""},
	 { "RemoteAudioStats_receivedSampleRate_get", _wrap_RemoteAudioStats_receivedSampleRate_get, METH_O, "\n"
		" The sample rate (Hz) of the received audio stream in the reported\n"
		"interval.\n"
		""},
	 { "RemoteAudioStats_receivedBitrate_set", _wrap_RemoteAudioStats_receivedBitrate_set, METH_VARARGS, "\n"
		" The average bitrate (Kbps) of the received audio stream in the\n"
		"reported interval.\n"
		""},
	 { "RemoteAudioStats_receivedBitrate_get", _wrap_RemoteAudioStats_receivedBitrate_get, METH_O, "\n"
		" The average bitrate (Kbps) of the received audio stream in the\n"
		"reported interval.\n"
		""},
	 { "RemoteAudioStats_totalFrozenTime_set", _wrap_RemoteAudioStats_totalFrozenTime_set, METH_VARARGS, " The total freeze time (ms) of the remote audio stream after the remote user joins the channel. In a session, audio freeze occurs when the audio frame loss rate reaches 4%."},
	 { "RemoteAudioStats_totalFrozenTime_get", _wrap_RemoteAudioStats_totalFrozenTime_get, METH_O, " The total freeze time (ms) of the remote audio stream after the remote user joins the channel. In a session, audio freeze occurs when the audio frame loss rate reaches 4%."},
	 { "RemoteAudioStats_frozenRate_set", _wrap_RemoteAudioStats_frozenRate_set, METH_VARARGS, " The total audio freeze time as a percentage (%) of the total time when the audio is available."},
	 { "RemoteAudioStats_frozenRate_get", _wrap_RemoteAudioStats_frozenRate_get, METH_O, " The total audio freeze time as a percentage (%) of the total time when the audio is available."},
	 { "RemoteAudioStats_totalActiveTime_set", _wrap_RemoteAudioStats_totalActiveTime_set, METH_VARARGS, "\n"
		"The total time (ms) when the remote user in the `COMMUNICATION` profile or the remote host in\n"
		"    the `LIVE_BROADCASTING` profile neither stops sending the audio stream nor disables the audio module after joining the channel.\n"
		""},
	 { "RemoteAudioStats_totalActiveTime_get", _wrap_RemoteAudioStats_totalActiveTime_get, METH_O, "\n"
		"The total time (ms) when the remote user in the `COMMUNICATION` profile or the remote host in\n"
		"    the `LIVE_BROADCASTING` profile neither stops sending the audio stream nor disables the audio module after joining the channel.\n"
		""},
	 { "RemoteAudioStats_publishDuration_set", _wrap_RemoteAudioStats_publishDuration_set, METH_VARARGS, "The total publish duration (ms) of the remote audio stream."},
	 { "RemoteAudioStats_publishDuration_get", _wrap_RemoteAudioStats_publishDuration_get, METH_O, "The total publish duration (ms) of the remote audio stream."},
	 { "new_RemoteAudioStats", _wrap_new_RemoteAudioStats, METH_NOARGS, NULL},
	 { "delete_RemoteAudioStats", _wrap_delete_RemoteAudioStats, METH_O, NULL},
	 { "RemoteAudioStats_swigregister", RemoteAudioStats_swigregister, METH_O, NULL},
	 { "RemoteAudioStats_swiginit", RemoteAudioStats_swiginit, METH_VARARGS, NULL},
	 { "VideoDimensions_width_set", _wrap_VideoDimensions_width_set, METH_VARARGS, " Width (pixels) of the video."},
	 { "VideoDimensions_width_get", _wrap_VideoDimensions_width_get, METH_O, " Width (pixels) of the video."},
	 { "VideoDimensions_height_set", _wrap_VideoDimensions_height_set, METH_VARARGS, " Height (pixels) of the video."},
	 { "VideoDimensions_height_get", _wrap_VideoDimensions_height_get, METH_O, " Height (pixels) of the video."},
	 { "new_VideoDimensions", _wrap_new_VideoDimensions, METH_VARARGS, NULL},
	 { "delete_VideoDimensions", _wrap_delete_VideoDimensions, METH_O, NULL},
	 { "VideoDimensions_swigregister", VideoDimensions_swigregister, METH_O, NULL},
	 { "VideoDimensions_swiginit", VideoDimensions_swiginit, METH_VARARGS, NULL},
	 { "VideoEncoderConfiguration_dimensions_set", _wrap_VideoEncoderConfiguration_dimensions_set, METH_VARARGS, " The video frame dimensions (px) used to specify the video quality and measured by the total number of pixels along a frame's width and height: VideoDimensions. The default value is 640 x 360."},
	 { "VideoEncoderConfiguration_dimensions_get", _wrap_VideoEncoderConfiguration_dimensions_get, METH_O, " The video frame dimensions (px) used to specify the video quality and measured by the total number of pixels along a frame's width and height: VideoDimensions. The default value is 640 x 360."},
	 { "VideoEncoderConfiguration_frameRate_set", _wrap_VideoEncoderConfiguration_frameRate_set, METH_VARARGS, "\n"
		"The frame rate of the video: #FRAME_RATE. The default value is 15.\n"
		"\n"
		"    Note that we do not recommend setting this to a value greater than 30.\n"
		""},
	 { "VideoEncoderConfiguration_frameRate_get", _wrap_VideoEncoderConfiguration_frameRate_get, METH_O, "\n"
		"The frame rate of the video: #FRAME_RATE. The default value is 15.\n"
		"\n"
		"    Note that we do not recommend setting this to a value greater than 30.\n"
		""},
	 { "VideoEncoderConfiguration_minFrameRate_set", _wrap_VideoEncoderConfiguration_minFrameRate_set, METH_VARARGS, " The minimum frame rate of the video. The default value is -1."},
	 { "VideoEncoderConfiguration_minFrameRate_get", _wrap_VideoEncoderConfiguration_minFrameRate_get, METH_O, " The minimum frame rate of the video. The default value is -1."},
	 { "VideoEncoderConfiguration_bitrate_set", _wrap_VideoEncoderConfiguration_bitrate_set, METH_VARARGS, "\n"
		"The video encoding bitrate (Kbps).\n"
		"\n"
		"    Choose one of the following options:\n"
		"\n"
		"    - #STANDARD_BITRATE: (Recommended) The standard bitrate.\n"
		"       - the `COMMUNICATION` profile: the encoding bitrate equals the base bitrate.\n"
		"       - the `LIVE_BROADCASTING` profile: the encoding bitrate is twice the base bitrate.\n"
		"    - #COMPATIBLE_BITRATE: The compatible bitrate: the bitrate stays the same regardless of the profile.\n"
		"\n"
		"    the `COMMUNICATION` profile prioritizes smoothness, while the `LIVE_BROADCASTING` profile prioritizes video quality (requiring a higher bitrate). We recommend setting the bitrate mode as #STANDARD_BITRATE to address this difference.\n"
		"\n"
		"    The following table lists the recommended video encoder configurations, where the base bitrate applies to the `COMMUNICATION` profile. Set your bitrate based on this table. If you set a bitrate beyond the proper range, the SDK automatically sets it to within the range.\n"
		"\n"
		"    Notes: \n"
		"    In the following table, **Base Bitrate** applies to the `COMMUNICATION` profile, and **Live Bitrate** applies to the `LIVE_BROADCASTING` profile.\n"
		"\n"
		"    | Resolution             | Frame Rate (fps) | Base Bitrate (Kbps)                    | Live Bitrate (Kbps)                    |\n"
		"    |------------------------|------------------|----------------------------------------|----------------------------------------|\n"
		"    | 160 * 120              | 15               | 65                                     | 130                                    |\n"
		"    | 120 * 120              | 15               | 50                                     | 100                                    |\n"
		"    | 320 * 180              | 15               | 140                                    | 280                                    |\n"
		"    | 180 * 180              | 15               | 100                                    | 200                                    |\n"
		"    | 240 * 180              | 15               | 120                                    | 240                                    |\n"
		"    | 320 * 240              | 15               | 200                                    | 400                                    |\n"
		"    | 240 * 240              | 15               | 140                                    | 280                                    |\n"
		"    | 424 * 240              | 15               | 220                                    | 440                                    |\n"
		"    | 640 * 360              | 15               | 400                                    | 800                                    |\n"
		"    | 360 * 360              | 15               | 260                                    | 520                                    |\n"
		"    | 640 * 360              | 30               | 600                                    | 1200                                   |\n"
		"    | 360 * 360              | 30               | 400                                    | 800                                    |\n"
		"    | 480 * 360              | 15               | 320                                    | 640                                    |\n"
		"    | 480 * 360              | 30               | 490                                    | 980                                    |\n"
		"    | 640 * 480              | 15               | 500                                    | 1000                                   |\n"
		"    | 480 * 480              | 15               | 400                                    | 800                                    |\n"
		"    | 640 * 480              | 30               | 750                                    | 1500                                   |\n"
		"    | 480 * 480              | 30               | 600                                    | 1200                                   |\n"
		"    | 848 * 480              | 15               | 610                                    | 1220                                   |\n"
		"    | 848 * 480              | 30               | 930                                    | 1860                                   |\n"
		"    | 640 * 480              | 10               | 400                                    | 800                                    |\n"
		"    | 1280 * 720             | 15               | 1130                                   | 2260                                   |\n"
		"    | 1280 * 720             | 30               | 1710                                   | 3420                                   |\n"
		"    | 960 * 720              | 15               | 910                                    | 1820                                   |\n"
		"    | 960 * 720              | 30               | 1380                                   | 2760                                   |\n"
		"    | 1920 * 1080            | 15               | 2080                                   | 4160                                   |\n"
		"    | 1920 * 1080            | 30               | 3150                                   | 6300                                   |\n"
		"    | 1920 * 1080            | 60               | 4780                                   | 6500                                   |\n"
		"    | 2560 * 1440            | 30               | 4850                                   | 6500                                   |\n"
		"    | 2560 * 1440            | 60               | 6500                                   | 6500                                   |\n"
		"    | 3840 * 2160            | 30               | 6500                                   | 6500                                   |\n"
		"    | 3840 * 2160            | 60               | 6500                                   | 6500                                   |\n"
		""},
	 { "VideoEncoderConfiguration_bitrate_get", _wrap_VideoEncoderConfiguration_bitrate_get, METH_O, "\n"
		"The video encoding bitrate (Kbps).\n"
		"\n"
		"    Choose one of the following options:\n"
		"\n"
		"    - #STANDARD_BITRATE: (Recommended) The standard bitrate.\n"
		"       - the `COMMUNICATION` profile: the encoding bitrate equals the base bitrate.\n"
		"       - the `LIVE_BROADCASTING` profile: the encoding bitrate is twice the base bitrate.\n"
		"    - #COMPATIBLE_BITRATE: The compatible bitrate: the bitrate stays the same regardless of the profile.\n"
		"\n"
		"    the `COMMUNICATION` profile prioritizes smoothness, while the `LIVE_BROADCASTING` profile prioritizes video quality (requiring a higher bitrate). We recommend setting the bitrate mode as #STANDARD_BITRATE to address this difference.\n"
		"\n"
		"    The following table lists the recommended video encoder configurations, where the base bitrate applies to the `COMMUNICATION` profile. Set your bitrate based on this table. If you set a bitrate beyond the proper range, the SDK automatically sets it to within the range.\n"
		"\n"
		"    Notes: \n"
		"    In the following table, **Base Bitrate** applies to the `COMMUNICATION` profile, and **Live Bitrate** applies to the `LIVE_BROADCASTING` profile.\n"
		"\n"
		"    | Resolution             | Frame Rate (fps) | Base Bitrate (Kbps)                    | Live Bitrate (Kbps)                    |\n"
		"    |------------------------|------------------|----------------------------------------|----------------------------------------|\n"
		"    | 160 * 120              | 15               | 65                                     | 130                                    |\n"
		"    | 120 * 120              | 15               | 50                                     | 100                                    |\n"
		"    | 320 * 180              | 15               | 140                                    | 280                                    |\n"
		"    | 180 * 180              | 15               | 100                                    | 200                                    |\n"
		"    | 240 * 180              | 15               | 120                                    | 240                                    |\n"
		"    | 320 * 240              | 15               | 200                                    | 400                                    |\n"
		"    | 240 * 240              | 15               | 140                                    | 280                                    |\n"
		"    | 424 * 240              | 15               | 220                                    | 440                                    |\n"
		"    | 640 * 360              | 15               | 400                                    | 800                                    |\n"
		"    | 360 * 360              | 15               | 260                                    | 520                                    |\n"
		"    | 640 * 360              | 30               | 600                                    | 1200                                   |\n"
		"    | 360 * 360              | 30               | 400                                    | 800                                    |\n"
		"    | 480 * 360              | 15               | 320                                    | 640                                    |\n"
		"    | 480 * 360              | 30               | 490                                    | 980                                    |\n"
		"    | 640 * 480              | 15               | 500                                    | 1000                                   |\n"
		"    | 480 * 480              | 15               | 400                                    | 800                                    |\n"
		"    | 640 * 480              | 30               | 750                                    | 1500                                   |\n"
		"    | 480 * 480              | 30               | 600                                    | 1200                                   |\n"
		"    | 848 * 480              | 15               | 610                                    | 1220                                   |\n"
		"    | 848 * 480              | 30               | 930                                    | 1860                                   |\n"
		"    | 640 * 480              | 10               | 400                                    | 800                                    |\n"
		"    | 1280 * 720             | 15               | 1130                                   | 2260                                   |\n"
		"    | 1280 * 720             | 30               | 1710                                   | 3420                                   |\n"
		"    | 960 * 720              | 15               | 910                                    | 1820                                   |\n"
		"    | 960 * 720              | 30               | 1380                                   | 2760                                   |\n"
		"    | 1920 * 1080            | 15               | 2080                                   | 4160                                   |\n"
		"    | 1920 * 1080            | 30               | 3150                                   | 6300                                   |\n"
		"    | 1920 * 1080            | 60               | 4780                                   | 6500                                   |\n"
		"    | 2560 * 1440            | 30               | 4850                                   | 6500                                   |\n"
		"    | 2560 * 1440            | 60               | 6500                                   | 6500                                   |\n"
		"    | 3840 * 2160            | 30               | 6500                                   | 6500                                   |\n"
		"    | 3840 * 2160            | 60               | 6500                                   | 6500                                   |\n"
		""},
	 { "VideoEncoderConfiguration_minBitrate_set", _wrap_VideoEncoderConfiguration_minBitrate_set, METH_VARARGS, "\n"
		"The minimum encoding bitrate (Kbps).\n"
		"\n"
		"    The SDK automatically adjusts the encoding bitrate to adapt to the network conditions. Using a value greater than the default value forces the video encoder to output high-quality images but may cause more packet loss and hence sacrifice the smoothness of the video transmission. That said, unless you have special requirements for image quality, Agora does not recommend changing this value.\n"
		"\n"
		"    Notes: This parameter applies only to the `LIVE_BROADCASTING` profile.\n"
		""},
	 { "VideoEncoderConfiguration_minBitrate_get", _wrap_VideoEncoderConfiguration_minBitrate_get, METH_O, "\n"
		"The minimum encoding bitrate (Kbps).\n"
		"\n"
		"    The SDK automatically adjusts the encoding bitrate to adapt to the network conditions. Using a value greater than the default value forces the video encoder to output high-quality images but may cause more packet loss and hence sacrifice the smoothness of the video transmission. That said, unless you have special requirements for image quality, Agora does not recommend changing this value.\n"
		"\n"
		"    Notes: This parameter applies only to the `LIVE_BROADCASTING` profile.\n"
		""},
	 { "VideoEncoderConfiguration_orientationMode_set", _wrap_VideoEncoderConfiguration_orientationMode_set, METH_VARARGS, " The video orientation mode of the video: #ORIENTATION_MODE."},
	 { "VideoEncoderConfiguration_orientationMode_get", _wrap_VideoEncoderConfiguration_orientationMode_get, METH_O, " The video orientation mode of the video: #ORIENTATION_MODE."},
	 { "VideoEncoderConfiguration_degradationPreference_set", _wrap_VideoEncoderConfiguration_degradationPreference_set, METH_VARARGS, " The video encoding degradation preference under limited bandwidth: #DEGRADATION_PREFERENCE."},
	 { "VideoEncoderConfiguration_degradationPreference_get", _wrap_VideoEncoderConfiguration_degradationPreference_get, METH_O, " The video encoding degradation preference under limited bandwidth: #DEGRADATION_PREFERENCE."},
	 { "VideoEncoderConfiguration_mirrorMode_set", _wrap_VideoEncoderConfiguration_mirrorMode_set, METH_VARARGS, "\n"
		"Sets the mirror mode of the published local video stream. It only affects the video that the remote user sees. See #VIDEO_MIRROR_MODE_TYPE\n"
		"\n"
		"   Notes: : The SDK disables the mirror mode by default.\n"
		""},
	 { "VideoEncoderConfiguration_mirrorMode_get", _wrap_VideoEncoderConfiguration_mirrorMode_get, METH_O, "\n"
		"Sets the mirror mode of the published local video stream. It only affects the video that the remote user sees. See #VIDEO_MIRROR_MODE_TYPE\n"
		"\n"
		"   Notes: : The SDK disables the mirror mode by default.\n"
		""},
	 { "new_VideoEncoderConfiguration", _wrap_new_VideoEncoderConfiguration, METH_VARARGS, NULL},
	 { "delete_VideoEncoderConfiguration", _wrap_delete_VideoEncoderConfiguration, METH_O, NULL},
	 { "VideoEncoderConfiguration_swigregister", VideoEncoderConfiguration_swigregister, METH_O, NULL},
	 { "VideoEncoderConfiguration_swiginit", VideoEncoderConfiguration_swiginit, METH_VARARGS, NULL},
	 { "TranscodingUser_uid_set", _wrap_TranscodingUser_uid_set, METH_VARARGS, " User ID of the user displaying the video in the CDN live."},
	 { "TranscodingUser_uid_get", _wrap_TranscodingUser_uid_get, METH_O, " User ID of the user displaying the video in the CDN live."},
	 { "TranscodingUser_x_set", _wrap_TranscodingUser_x_set, METH_VARARGS, " Horizontal position (pixel) of the video frame relative to the top left corner."},
	 { "TranscodingUser_x_get", _wrap_TranscodingUser_x_get, METH_O, " Horizontal position (pixel) of the video frame relative to the top left corner."},
	 { "TranscodingUser_y_set", _wrap_TranscodingUser_y_set, METH_VARARGS, " Vertical position (pixel) of the video frame relative to the top left corner."},
	 { "TranscodingUser_y_get", _wrap_TranscodingUser_y_get, METH_O, " Vertical position (pixel) of the video frame relative to the top left corner."},
	 { "TranscodingUser_width_set", _wrap_TranscodingUser_width_set, METH_VARARGS, " Width (pixel) of the video frame. The default value is 360."},
	 { "TranscodingUser_width_get", _wrap_TranscodingUser_width_get, METH_O, " Width (pixel) of the video frame. The default value is 360."},
	 { "TranscodingUser_height_set", _wrap_TranscodingUser_height_set, METH_VARARGS, " Height (pixel) of the video frame. The default value is 640."},
	 { "TranscodingUser_height_get", _wrap_TranscodingUser_height_get, METH_O, " Height (pixel) of the video frame. The default value is 640."},
	 { "TranscodingUser_zOrder_set", _wrap_TranscodingUser_zOrder_set, METH_VARARGS, "\n"
		"The layer index of the video frame. An integer. The value range is [0, 100].\n"
		"\n"
		"    - 0: (Default) Bottom layer.\n"
		"    - 100: Top layer.\n"
		"\n"
		"    Notes: \n"
		"    - If zOrder is beyond this range, the SDK reports #ERR_INVALID_ARGUMENT.\n"
		"    - As of v2.3, the SDK supports zOrder = 0.\n"
		""},
	 { "TranscodingUser_zOrder_get", _wrap_TranscodingUser_zOrder_get, METH_O, "\n"
		"The layer index of the video frame. An integer. The value range is [0, 100].\n"
		"\n"
		"    - 0: (Default) Bottom layer.\n"
		"    - 100: Top layer.\n"
		"\n"
		"    Notes: \n"
		"    - If zOrder is beyond this range, the SDK reports #ERR_INVALID_ARGUMENT.\n"
		"    - As of v2.3, the SDK supports zOrder = 0.\n"
		""},
	 { "TranscodingUser_alpha_set", _wrap_TranscodingUser_alpha_set, METH_VARARGS, "\n"
		"The transparency level of the user's video. The value ranges between 0 and 1.0:\n"
		"\n"
		"    - 0: Completely transparent\n"
		"    - 1.0: (Default) Opaque\n"
		""},
	 { "TranscodingUser_alpha_get", _wrap_TranscodingUser_alpha_get, METH_O, "\n"
		"The transparency level of the user's video. The value ranges between 0 and 1.0:\n"
		"\n"
		"    - 0: Completely transparent\n"
		"    - 1.0: (Default) Opaque\n"
		""},
	 { "TranscodingUser_audioChannel_set", _wrap_TranscodingUser_audioChannel_set, METH_VARARGS, "\n"
		"The audio channel of the sound. The default value is 0:\n"
		"\n"
		"    - 0: (Default) Supports dual channels at most, depending on the upstream of the host.\n"
		"    - 1: The audio stream of the host uses the FL audio channel. If the upstream of the host uses multiple audio channels, these channels are mixed into mono first.\n"
		"    - 2: The audio stream of the host uses the FC audio channel. If the upstream of the host uses multiple audio channels, these channels are mixed into mono first.\n"
		"    - 3: The audio stream of the host uses the FR audio channel. If the upstream of the host uses multiple audio channels, these channels are mixed into mono first.\n"
		"    - 4: The audio stream of the host uses the BL audio channel. If the upstream of the host uses multiple audio channels, these channels are mixed into mono first.\n"
		"    - 5: The audio stream of the host uses the BR audio channel. If the upstream of the host uses multiple audio channels, these channels are mixed into mono first.\n"
		"\n"
		"    Notes: If your setting is not 0, you may need a specialized player.\n"
		""},
	 { "TranscodingUser_audioChannel_get", _wrap_TranscodingUser_audioChannel_get, METH_O, "\n"
		"The audio channel of the sound. The default value is 0:\n"
		"\n"
		"    - 0: (Default) Supports dual channels at most, depending on the upstream of the host.\n"
		"    - 1: The audio stream of the host uses the FL audio channel. If the upstream of the host uses multiple audio channels, these channels are mixed into mono first.\n"
		"    - 2: The audio stream of the host uses the FC audio channel. If the upstream of the host uses multiple audio channels, these channels are mixed into mono first.\n"
		"    - 3: The audio stream of the host uses the FR audio channel. If the upstream of the host uses multiple audio channels, these channels are mixed into mono first.\n"
		"    - 4: The audio stream of the host uses the BL audio channel. If the upstream of the host uses multiple audio channels, these channels are mixed into mono first.\n"
		"    - 5: The audio stream of the host uses the BR audio channel. If the upstream of the host uses multiple audio channels, these channels are mixed into mono first.\n"
		"\n"
		"    Notes: If your setting is not 0, you may need a specialized player.\n"
		""},
	 { "new_TranscodingUser", _wrap_new_TranscodingUser, METH_NOARGS, NULL},
	 { "delete_TranscodingUser", _wrap_delete_TranscodingUser, METH_O, NULL},
	 { "TranscodingUser_swigregister", TranscodingUser_swigregister, METH_O, NULL},
	 { "TranscodingUser_swiginit", TranscodingUser_swiginit, METH_VARARGS, NULL},
	 { "new_RtcImage", _wrap_new_RtcImage, METH_NOARGS, NULL},
	 { "RtcImage_url_set", _wrap_RtcImage_url_set, METH_VARARGS, " HTTP/HTTPS URL address of the image on the live video. The maximum length of this parameter is 1024 bytes."},
	 { "RtcImage_url_get", _wrap_RtcImage_url_get, METH_O, " HTTP/HTTPS URL address of the image on the live video. The maximum length of this parameter is 1024 bytes."},
	 { "RtcImage_x_set", _wrap_RtcImage_x_set, METH_VARARGS, " Horizontal position of the image from the upper left of the live video."},
	 { "RtcImage_x_get", _wrap_RtcImage_x_get, METH_O, " Horizontal position of the image from the upper left of the live video."},
	 { "RtcImage_y_set", _wrap_RtcImage_y_set, METH_VARARGS, " Vertical position of the image from the upper left of the live video."},
	 { "RtcImage_y_get", _wrap_RtcImage_y_get, METH_O, " Vertical position of the image from the upper left of the live video."},
	 { "RtcImage_width_set", _wrap_RtcImage_width_set, METH_VARARGS, " Width of the image on the live video."},
	 { "RtcImage_width_get", _wrap_RtcImage_width_get, METH_O, " Width of the image on the live video."},
	 { "RtcImage_height_set", _wrap_RtcImage_height_set, METH_VARARGS, " Height of the image on the live video."},
	 { "RtcImage_height_get", _wrap_RtcImage_height_get, METH_O, " Height of the image on the live video."},
	 { "delete_RtcImage", _wrap_delete_RtcImage, METH_O, NULL},
	 { "RtcImage_swigregister", RtcImage_swigregister, METH_O, NULL},
	 { "RtcImage_swiginit", RtcImage_swiginit, METH_VARARGS, NULL},
	 { "new_LiveStreamAdvancedFeature", _wrap_new_LiveStreamAdvancedFeature, METH_NOARGS, NULL},
	 { "LiveStreamAdvancedFeature_LBHQ_set", _wrap_LiveStreamAdvancedFeature_LBHQ_set, METH_VARARGS, " The advanced feature for high-quality video with a lower bitrate."},
	 { "LiveStreamAdvancedFeature_LBHQ_get", _wrap_LiveStreamAdvancedFeature_LBHQ_get, METH_O, " The advanced feature for high-quality video with a lower bitrate."},
	 { "LiveStreamAdvancedFeature_VEO_set", _wrap_LiveStreamAdvancedFeature_VEO_set, METH_VARARGS, " The advanced feature for the optimized video encoder."},
	 { "LiveStreamAdvancedFeature_VEO_get", _wrap_LiveStreamAdvancedFeature_VEO_get, METH_O, " The advanced feature for the optimized video encoder."},
	 { "LiveStreamAdvancedFeature_featureName_set", _wrap_LiveStreamAdvancedFeature_featureName_set, METH_VARARGS, " The name of the advanced feature. It contains LBHQ and VEO."},
	 { "LiveStreamAdvancedFeature_featureName_get", _wrap_LiveStreamAdvancedFeature_featureName_get, METH_O, " The name of the advanced feature. It contains LBHQ and VEO."},
	 { "LiveStreamAdvancedFeature_opened_set", _wrap_LiveStreamAdvancedFeature_opened_set, METH_VARARGS, "\n"
		" Whether to enable the advanced feature:\n"
		"- true: Enable the advanced feature.\n"
		"- false: (Default) Disable the advanced feature.\n"
		""},
	 { "LiveStreamAdvancedFeature_opened_get", _wrap_LiveStreamAdvancedFeature_opened_get, METH_O, "\n"
		" Whether to enable the advanced feature:\n"
		"- true: Enable the advanced feature.\n"
		"- false: (Default) Disable the advanced feature.\n"
		""},
	 { "delete_LiveStreamAdvancedFeature", _wrap_delete_LiveStreamAdvancedFeature, METH_O, NULL},
	 { "LiveStreamAdvancedFeature_swigregister", LiveStreamAdvancedFeature_swigregister, METH_O, NULL},
	 { "LiveStreamAdvancedFeature_swiginit", LiveStreamAdvancedFeature_swiginit, METH_VARARGS, NULL},
	 { "LiveTranscoding_width_set", _wrap_LiveTranscoding_width_set, METH_VARARGS, "\n"
		" The width of the video in pixels. The default value is 360.\n"
		"- When pushing video streams to the CDN, ensure that `width` is at least 64; otherwise, the Agora server adjusts the value to 64.\n"
		"- When pushing audio streams to the CDN, set `width` and `height` as 0.\n"
		""},
	 { "LiveTranscoding_width_get", _wrap_LiveTranscoding_width_get, METH_O, "\n"
		" The width of the video in pixels. The default value is 360.\n"
		"- When pushing video streams to the CDN, ensure that `width` is at least 64; otherwise, the Agora server adjusts the value to 64.\n"
		"- When pushing audio streams to the CDN, set `width` and `height` as 0.\n"
		""},
	 { "LiveTranscoding_height_set", _wrap_LiveTranscoding_height_set, METH_VARARGS, "\n"
		" The height of the video in pixels. The default value is 640.\n"
		"- When pushing video streams to the CDN, ensure that `height` is at least 64; otherwise, the Agora server adjusts the value to 64.\n"
		"- When pushing audio streams to the CDN, set `width` and `height` as 0.\n"
		""},
	 { "LiveTranscoding_height_get", _wrap_LiveTranscoding_height_get, METH_O, "\n"
		" The height of the video in pixels. The default value is 640.\n"
		"- When pushing video streams to the CDN, ensure that `height` is at least 64; otherwise, the Agora server adjusts the value to 64.\n"
		"- When pushing audio streams to the CDN, set `width` and `height` as 0.\n"
		""},
	 { "LiveTranscoding_videoBitrate_set", _wrap_LiveTranscoding_videoBitrate_set, METH_VARARGS, "\n"
		"Bitrate of the CDN live output video stream. The default value is 400 Kbps.\n"
		"\n"
		"   Set this parameter according to the Video Bitrate Table. If you set a bitrate beyond the proper range, the SDK automatically adapts it to a value within the range.\n"
		""},
	 { "LiveTranscoding_videoBitrate_get", _wrap_LiveTranscoding_videoBitrate_get, METH_O, "\n"
		"Bitrate of the CDN live output video stream. The default value is 400 Kbps.\n"
		"\n"
		"   Set this parameter according to the Video Bitrate Table. If you set a bitrate beyond the proper range, the SDK automatically adapts it to a value within the range.\n"
		""},
	 { "LiveTranscoding_videoFramerate_set", _wrap_LiveTranscoding_videoFramerate_set, METH_VARARGS, "\n"
		"Frame rate of the output video stream set for the CDN live streaming. The default value is 15 fps, and the value range is (0,30].\n"
		"\n"
		"   Notes: The Agora server adjusts any value over 30 to 30.\n"
		""},
	 { "LiveTranscoding_videoFramerate_get", _wrap_LiveTranscoding_videoFramerate_get, METH_O, "\n"
		"Frame rate of the output video stream set for the CDN live streaming. The default value is 15 fps, and the value range is (0,30].\n"
		"\n"
		"   Notes: The Agora server adjusts any value over 30 to 30.\n"
		""},
	 { "LiveTranscoding_lowLatency_set", _wrap_LiveTranscoding_lowLatency_set, METH_VARARGS, "\n"
		"DEPRECATED** Latency mode:\n"
		"\n"
		"     - true: Low latency with unassured quality.\n"
		"     - false: (Default) High latency with assured quality.\n"
		""},
	 { "LiveTranscoding_lowLatency_get", _wrap_LiveTranscoding_lowLatency_get, METH_O, "\n"
		"DEPRECATED** Latency mode:\n"
		"\n"
		"     - true: Low latency with unassured quality.\n"
		"     - false: (Default) High latency with assured quality.\n"
		""},
	 { "LiveTranscoding_videoGop_set", _wrap_LiveTranscoding_videoGop_set, METH_VARARGS, " Video GOP in frames. The default value is 30 fps."},
	 { "LiveTranscoding_videoGop_get", _wrap_LiveTranscoding_videoGop_get, METH_O, " Video GOP in frames. The default value is 30 fps."},
	 { "LiveTranscoding_videoCodecProfile_set", _wrap_LiveTranscoding_videoCodecProfile_set, METH_VARARGS, "\n"
		"Self-defined video codec profile: #VIDEO_CODEC_PROFILE_TYPE.\n"
		"\n"
		"   Notes: If you set this parameter to other values, Agora adjusts it to the default value of 100.\n"
		""},
	 { "LiveTranscoding_videoCodecProfile_get", _wrap_LiveTranscoding_videoCodecProfile_get, METH_O, "\n"
		"Self-defined video codec profile: #VIDEO_CODEC_PROFILE_TYPE.\n"
		"\n"
		"   Notes: If you set this parameter to other values, Agora adjusts it to the default value of 100.\n"
		""},
	 { "LiveTranscoding_backgroundColor_set", _wrap_LiveTranscoding_backgroundColor_set, METH_VARARGS, " The background color in RGB hex value. Value only. Do not include a preceeding #. For example, 0xFFB6C1 (light pink). The default value is 0x000000 (black)."},
	 { "LiveTranscoding_backgroundColor_get", _wrap_LiveTranscoding_backgroundColor_get, METH_O, " The background color in RGB hex value. Value only. Do not include a preceeding #. For example, 0xFFB6C1 (light pink). The default value is 0x000000 (black)."},
	 { "LiveTranscoding_userCount_set", _wrap_LiveTranscoding_userCount_set, METH_VARARGS, " The number of users in the live interactive streaming."},
	 { "LiveTranscoding_userCount_get", _wrap_LiveTranscoding_userCount_get, METH_O, " The number of users in the live interactive streaming."},
	 { "LiveTranscoding_transcodingUsers_set", _wrap_LiveTranscoding_transcodingUsers_set, METH_VARARGS, " TranscodingUser"},
	 { "LiveTranscoding_transcodingUsers_get", _wrap_LiveTranscoding_transcodingUsers_get, METH_O, " TranscodingUser"},
	 { "LiveTranscoding_transcodingExtraInfo_set", _wrap_LiveTranscoding_transcodingExtraInfo_set, METH_VARARGS, "\n"
		"Reserved property. Extra user-defined information to send SEI for the H.264/H.265 video stream to the CDN live client. Maximum length: 4096 Bytes.\n"
		"\n"
		"    For more information on SEI frame, see [SEI-related questions](https://docs.agora.io/en/faq/sei).\n"
		""},
	 { "LiveTranscoding_transcodingExtraInfo_get", _wrap_LiveTranscoding_transcodingExtraInfo_get, METH_O, "\n"
		"Reserved property. Extra user-defined information to send SEI for the H.264/H.265 video stream to the CDN live client. Maximum length: 4096 Bytes.\n"
		"\n"
		"    For more information on SEI frame, see [SEI-related questions](https://docs.agora.io/en/faq/sei).\n"
		""},
	 { "LiveTranscoding_metadata_set", _wrap_LiveTranscoding_metadata_set, METH_VARARGS, "DEPRECATED** The metadata sent to the CDN live client defined by the RTMP or HTTP-FLV metadata."},
	 { "LiveTranscoding_metadata_get", _wrap_LiveTranscoding_metadata_get, METH_O, "DEPRECATED** The metadata sent to the CDN live client defined by the RTMP or HTTP-FLV metadata."},
	 { "LiveTranscoding_watermark_set", _wrap_LiveTranscoding_watermark_set, METH_VARARGS, "\n"
		"The watermark image added to the CDN live publishing stream.\n"
		"\n"
		"   Ensure that the format of the image is PNG. Once a watermark image is added, the audience of the CDN live publishing stream can see the watermark image. See RtcImage.\n"
		""},
	 { "LiveTranscoding_watermark_get", _wrap_LiveTranscoding_watermark_get, METH_O, "\n"
		"The watermark image added to the CDN live publishing stream.\n"
		"\n"
		"   Ensure that the format of the image is PNG. Once a watermark image is added, the audience of the CDN live publishing stream can see the watermark image. See RtcImage.\n"
		""},
	 { "LiveTranscoding_backgroundImage_set", _wrap_LiveTranscoding_backgroundImage_set, METH_VARARGS, "\n"
		"The background image added to the CDN live publishing stream.\n"
		"\n"
		"    Once a background image is added, the audience of the CDN live publishing stream can see the background image. See RtcImage.\n"
		""},
	 { "LiveTranscoding_backgroundImage_get", _wrap_LiveTranscoding_backgroundImage_get, METH_O, "\n"
		"The background image added to the CDN live publishing stream.\n"
		"\n"
		"    Once a background image is added, the audience of the CDN live publishing stream can see the background image. See RtcImage.\n"
		""},
	 { "LiveTranscoding_audioSampleRate_set", _wrap_LiveTranscoding_audioSampleRate_set, METH_VARARGS, " Self-defined audio-sample rate: #AUDIO_SAMPLE_RATE_TYPE."},
	 { "LiveTranscoding_audioSampleRate_get", _wrap_LiveTranscoding_audioSampleRate_get, METH_O, " Self-defined audio-sample rate: #AUDIO_SAMPLE_RATE_TYPE."},
	 { "LiveTranscoding_audioBitrate_set", _wrap_LiveTranscoding_audioBitrate_set, METH_VARARGS, " Bitrate of the CDN live audio output stream. The default value is 48 Kbps, and the highest value is 128."},
	 { "LiveTranscoding_audioBitrate_get", _wrap_LiveTranscoding_audioBitrate_get, METH_O, " Bitrate of the CDN live audio output stream. The default value is 48 Kbps, and the highest value is 128."},
	 { "LiveTranscoding_audioChannels_set", _wrap_LiveTranscoding_audioChannels_set, METH_VARARGS, "\n"
		"The numbder of audio channels for the CDN live stream. Agora recommends choosing 1 (mono), or 2 (stereo) audio channels. Special players are required if you choose option 3, 4, or 5:\n"
		"\n"
		"    - 1: (Default) Mono.\n"
		"    - 2: Stereo.\n"
		"    - 3: Three audio channels.\n"
		"    - 4: Four audio channels.\n"
		"    - 5: Five audio channels.\n"
		""},
	 { "LiveTranscoding_audioChannels_get", _wrap_LiveTranscoding_audioChannels_get, METH_O, "\n"
		"The numbder of audio channels for the CDN live stream. Agora recommends choosing 1 (mono), or 2 (stereo) audio channels. Special players are required if you choose option 3, 4, or 5:\n"
		"\n"
		"    - 1: (Default) Mono.\n"
		"    - 2: Stereo.\n"
		"    - 3: Three audio channels.\n"
		"    - 4: Four audio channels.\n"
		"    - 5: Five audio channels.\n"
		""},
	 { "LiveTranscoding_audioCodecProfile_set", _wrap_LiveTranscoding_audioCodecProfile_set, METH_VARARGS, " Self-defined audio codec profile: #AUDIO_CODEC_PROFILE_TYPE."},
	 { "LiveTranscoding_audioCodecProfile_get", _wrap_LiveTranscoding_audioCodecProfile_get, METH_O, " Self-defined audio codec profile: #AUDIO_CODEC_PROFILE_TYPE."},
	 { "LiveTranscoding_advancedFeatures_set", _wrap_LiveTranscoding_advancedFeatures_set, METH_VARARGS, "\n"
		" Advanced features of the RTMP streaming with transcoding. See LiveStreamAdvancedFeature.\n"
		"\n"
		"Since: v3.1.0\n"
		""},
	 { "LiveTranscoding_advancedFeatures_get", _wrap_LiveTranscoding_advancedFeatures_get, METH_O, "\n"
		" Advanced features of the RTMP streaming with transcoding. See LiveStreamAdvancedFeature.\n"
		"\n"
		"Since: v3.1.0\n"
		""},
	 { "LiveTranscoding_advancedFeatureCount_set", _wrap_LiveTranscoding_advancedFeatureCount_set, METH_VARARGS, " The number of enabled advanced features. The default value is 0."},
	 { "LiveTranscoding_advancedFeatureCount_get", _wrap_LiveTranscoding_advancedFeatureCount_get, METH_O, " The number of enabled advanced features. The default value is 0."},
	 { "new_LiveTranscoding", _wrap_new_LiveTranscoding, METH_NOARGS, NULL},
	 { "delete_LiveTranscoding", _wrap_delete_LiveTranscoding, METH_O, NULL},
	 { "LiveTranscoding_swigregister", LiveTranscoding_swigregister, METH_O, NULL},
	 { "LiveTranscoding_swiginit", LiveTranscoding_swiginit, METH_VARARGS, NULL},
	 { "CameraCapturerConfiguration_preference_set", _wrap_CameraCapturerConfiguration_preference_set, METH_VARARGS, " Camera capturer preference settings. See: #CAPTURER_OUTPUT_PREFERENCE."},
	 { "CameraCapturerConfiguration_preference_get", _wrap_CameraCapturerConfiguration_preference_get, METH_O, " Camera capturer preference settings. See: #CAPTURER_OUTPUT_PREFERENCE."},
	 { "new_CameraCapturerConfiguration", _wrap_new_CameraCapturerConfiguration, METH_NOARGS, NULL},
	 { "delete_CameraCapturerConfiguration", _wrap_delete_CameraCapturerConfiguration, METH_O, NULL},
	 { "CameraCapturerConfiguration_swigregister", CameraCapturerConfiguration_swigregister, METH_O, NULL},
	 { "CameraCapturerConfiguration_swiginit", CameraCapturerConfiguration_swiginit, METH_VARARGS, NULL},
	 { "InjectStreamConfig_width_set", _wrap_InjectStreamConfig_width_set, METH_VARARGS, " Width of the injected stream in the live interactive streaming. The default value is 0 (same width as the original stream)."},
	 { "InjectStreamConfig_width_get", _wrap_InjectStreamConfig_width_get, METH_O, " Width of the injected stream in the live interactive streaming. The default value is 0 (same width as the original stream)."},
	 { "InjectStreamConfig_height_set", _wrap_InjectStreamConfig_height_set, METH_VARARGS, " Height of the injected stream in the live interactive streaming. The default value is 0 (same height as the original stream)."},
	 { "InjectStreamConfig_height_get", _wrap_InjectStreamConfig_height_get, METH_O, " Height of the injected stream in the live interactive streaming. The default value is 0 (same height as the original stream)."},
	 { "InjectStreamConfig_videoGop_set", _wrap_InjectStreamConfig_videoGop_set, METH_VARARGS, " Video GOP (in frames) of the injected stream in the live interactive streaming. The default value is 30 fps."},
	 { "InjectStreamConfig_videoGop_get", _wrap_InjectStreamConfig_videoGop_get, METH_O, " Video GOP (in frames) of the injected stream in the live interactive streaming. The default value is 30 fps."},
	 { "InjectStreamConfig_videoFramerate_set", _wrap_InjectStreamConfig_videoFramerate_set, METH_VARARGS, " Video frame rate of the injected stream in the live interactive streaming. The default value is 15 fps."},
	 { "InjectStreamConfig_videoFramerate_get", _wrap_InjectStreamConfig_videoFramerate_get, METH_O, " Video frame rate of the injected stream in the live interactive streaming. The default value is 15 fps."},
	 { "InjectStreamConfig_videoBitrate_set", _wrap_InjectStreamConfig_videoBitrate_set, METH_VARARGS, "\n"
		"Video bitrate of the injected stream in the live interactive streaming. The default value is 400 Kbps.\n"
		"\n"
		"    Notes: The setting of the video bitrate is closely linked to the resolution. If the video bitrate you set is beyond a reasonable range, the SDK sets it within a reasonable range.\n"
		""},
	 { "InjectStreamConfig_videoBitrate_get", _wrap_InjectStreamConfig_videoBitrate_get, METH_O, "\n"
		"Video bitrate of the injected stream in the live interactive streaming. The default value is 400 Kbps.\n"
		"\n"
		"    Notes: The setting of the video bitrate is closely linked to the resolution. If the video bitrate you set is beyond a reasonable range, the SDK sets it within a reasonable range.\n"
		""},
	 { "InjectStreamConfig_audioSampleRate_set", _wrap_InjectStreamConfig_audioSampleRate_set, METH_VARARGS, "\n"
		"Audio-sample rate of the injected stream in the live interactive streaming: #AUDIO_SAMPLE_RATE_TYPE. The default value is 48000 Hz.\n"
		"\n"
		"    Notes: We recommend setting the default value.\n"
		""},
	 { "InjectStreamConfig_audioSampleRate_get", _wrap_InjectStreamConfig_audioSampleRate_get, METH_O, "\n"
		"Audio-sample rate of the injected stream in the live interactive streaming: #AUDIO_SAMPLE_RATE_TYPE. The default value is 48000 Hz.\n"
		"\n"
		"    Notes: We recommend setting the default value.\n"
		""},
	 { "InjectStreamConfig_audioBitrate_set", _wrap_InjectStreamConfig_audioBitrate_set, METH_VARARGS, "\n"
		"Audio bitrate of the injected stream in the live interactive streaming. The default value is 48.\n"
		"\n"
		"    Notes: We recommend setting the default value.\n"
		""},
	 { "InjectStreamConfig_audioBitrate_get", _wrap_InjectStreamConfig_audioBitrate_get, METH_O, "\n"
		"Audio bitrate of the injected stream in the live interactive streaming. The default value is 48.\n"
		"\n"
		"    Notes: We recommend setting the default value.\n"
		""},
	 { "InjectStreamConfig_audioChannels_set", _wrap_InjectStreamConfig_audioChannels_set, METH_VARARGS, "\n"
		"Audio channels in the live interactive streaming.\n"
		"\n"
		"    - 1: (Default) Mono\n"
		"    - 2: Two-channel stereo\n"
		"\n"
		"    Notes: We recommend setting the default value.\n"
		""},
	 { "InjectStreamConfig_audioChannels_get", _wrap_InjectStreamConfig_audioChannels_get, METH_O, "\n"
		"Audio channels in the live interactive streaming.\n"
		"\n"
		"    - 1: (Default) Mono\n"
		"    - 2: Two-channel stereo\n"
		"\n"
		"    Notes: We recommend setting the default value.\n"
		""},
	 { "new_InjectStreamConfig", _wrap_new_InjectStreamConfig, METH_NOARGS, NULL},
	 { "delete_InjectStreamConfig", _wrap_delete_InjectStreamConfig, METH_O, NULL},
	 { "InjectStreamConfig_swigregister", InjectStreamConfig_swigregister, METH_O, NULL},
	 { "InjectStreamConfig_swiginit", InjectStreamConfig_swiginit, METH_VARARGS, NULL},
	 { "ChannelMediaInfo_channelName_set", _wrap_ChannelMediaInfo_channelName_set, METH_VARARGS, " The channel name."},
	 { "ChannelMediaInfo_channelName_get", _wrap_ChannelMediaInfo_channelName_get, METH_O, " The channel name."},
	 { "ChannelMediaInfo_token_set", _wrap_ChannelMediaInfo_token_set, METH_VARARGS, " The token that enables the user to join the channel."},
	 { "ChannelMediaInfo_token_get", _wrap_ChannelMediaInfo_token_get, METH_O, " The token that enables the user to join the channel."},
	 { "ChannelMediaInfo_uid_set", _wrap_ChannelMediaInfo_uid_set, METH_VARARGS, " The user ID."},
	 { "ChannelMediaInfo_uid_get", _wrap_ChannelMediaInfo_uid_get, METH_O, " The user ID."},
	 { "new_ChannelMediaInfo", _wrap_new_ChannelMediaInfo, METH_NOARGS, NULL},
	 { "delete_ChannelMediaInfo", _wrap_delete_ChannelMediaInfo, METH_O, NULL},
	 { "ChannelMediaInfo_swigregister", ChannelMediaInfo_swigregister, METH_O, NULL},
	 { "ChannelMediaInfo_swiginit", ChannelMediaInfo_swiginit, METH_VARARGS, NULL},
	 { "ChannelMediaRelayConfiguration_srcInfo_set", _wrap_ChannelMediaRelayConfiguration_srcInfo_set, METH_VARARGS, "\n"
		" Pointer to the information of the source channel: ChannelMediaInfo. It contains the following members:\n"
		"- `channelName`: The name of the source channel. The default value is `NULL`, which means the SDK applies the name of the current channel.\n"
		"- `uid`: ID of the host whose media stream you want to relay. The default value is 0, which means the SDK generates a random UID. You must set it as 0.\n"
		"- `token`: The token for joining the source channel. It is generated with the `channelName` and `uid` you set in `srcInfo`.\n"
		"  - If you have not enabled the App Certificate, set this parameter as the default value `NULL`, which means the SDK applies the App ID.\n"
		"  - If you have enabled the App Certificate, you must use the `token` generated with the `channelName` and `uid`, and the `uid` must be set as 0.\n"
		""},
	 { "ChannelMediaRelayConfiguration_srcInfo_get", _wrap_ChannelMediaRelayConfiguration_srcInfo_get, METH_O, "\n"
		" Pointer to the information of the source channel: ChannelMediaInfo. It contains the following members:\n"
		"- `channelName`: The name of the source channel. The default value is `NULL`, which means the SDK applies the name of the current channel.\n"
		"- `uid`: ID of the host whose media stream you want to relay. The default value is 0, which means the SDK generates a random UID. You must set it as 0.\n"
		"- `token`: The token for joining the source channel. It is generated with the `channelName` and `uid` you set in `srcInfo`.\n"
		"  - If you have not enabled the App Certificate, set this parameter as the default value `NULL`, which means the SDK applies the App ID.\n"
		"  - If you have enabled the App Certificate, you must use the `token` generated with the `channelName` and `uid`, and the `uid` must be set as 0.\n"
		""},
	 { "ChannelMediaRelayConfiguration_destInfos_set", _wrap_ChannelMediaRelayConfiguration_destInfos_set, METH_VARARGS, "\n"
		" Pointer to the information of the destination channel: ChannelMediaInfo. It contains the following members:\n"
		"- `channelName`: The name of the destination channel.\n"
		"- `uid`: ID of the host in the destination channel. The value ranges from 0 to (2 32-1). To avoid UID conflicts, this `uid` must be different from any other UIDs in the destination channel. The default value is 0, which means the SDK generates a random UID.\n"
		"- `token`: The token for joining the destination channel. It is generated with the `channelName` and `uid` you set in `destInfos`.\n"
		"  - If you have not enabled the App Certificate, set this parameter as the default value `NULL`, which means the SDK applies the App ID.\n"
		"  - If you have enabled the App Certificate, you must use the `token` generated with the `channelName` and `uid`.\n"
		""},
	 { "ChannelMediaRelayConfiguration_destInfos_get", _wrap_ChannelMediaRelayConfiguration_destInfos_get, METH_O, "\n"
		" Pointer to the information of the destination channel: ChannelMediaInfo. It contains the following members:\n"
		"- `channelName`: The name of the destination channel.\n"
		"- `uid`: ID of the host in the destination channel. The value ranges from 0 to (2 32-1). To avoid UID conflicts, this `uid` must be different from any other UIDs in the destination channel. The default value is 0, which means the SDK generates a random UID.\n"
		"- `token`: The token for joining the destination channel. It is generated with the `channelName` and `uid` you set in `destInfos`.\n"
		"  - If you have not enabled the App Certificate, set this parameter as the default value `NULL`, which means the SDK applies the App ID.\n"
		"  - If you have enabled the App Certificate, you must use the `token` generated with the `channelName` and `uid`.\n"
		""},
	 { "ChannelMediaRelayConfiguration_destCount_set", _wrap_ChannelMediaRelayConfiguration_destCount_set, METH_VARARGS, "\n"
		" The number of destination channels. The default value is 0, and the\n"
		"value range is [0,4). Ensure that the value of this parameter\n"
		"corresponds to the number of ChannelMediaInfo structs you define in\n"
		"`destInfos`.\n"
		""},
	 { "ChannelMediaRelayConfiguration_destCount_get", _wrap_ChannelMediaRelayConfiguration_destCount_get, METH_O, "\n"
		" The number of destination channels. The default value is 0, and the\n"
		"value range is [0,4). Ensure that the value of this parameter\n"
		"corresponds to the number of ChannelMediaInfo structs you define in\n"
		"`destInfos`.\n"
		""},
	 { "new_ChannelMediaRelayConfiguration", _wrap_new_ChannelMediaRelayConfiguration, METH_NOARGS, NULL},
	 { "delete_ChannelMediaRelayConfiguration", _wrap_delete_ChannelMediaRelayConfiguration, METH_O, NULL},
	 { "ChannelMediaRelayConfiguration_swigregister", ChannelMediaRelayConfiguration_swigregister, METH_O, NULL},
	 { "ChannelMediaRelayConfiguration_swiginit", ChannelMediaRelayConfiguration_swiginit, METH_VARARGS, NULL},
	 { "Rectangle_x_set", _wrap_Rectangle_x_set, METH_VARARGS, " The horizontal offset from the top-left corner."},
	 { "Rectangle_x_get", _wrap_Rectangle_x_get, METH_O, " The horizontal offset from the top-left corner."},
	 { "Rectangle_y_set", _wrap_Rectangle_y_set, METH_VARARGS, " The vertical offset from the top-left corner."},
	 { "Rectangle_y_get", _wrap_Rectangle_y_get, METH_O, " The vertical offset from the top-left corner."},
	 { "Rectangle_width_set", _wrap_Rectangle_width_set, METH_VARARGS, " The width of the region."},
	 { "Rectangle_width_get", _wrap_Rectangle_width_get, METH_O, " The width of the region."},
	 { "Rectangle_height_set", _wrap_Rectangle_height_set, METH_VARARGS, " The height of the region."},
	 { "Rectangle_height_get", _wrap_Rectangle_height_get, METH_O, " The height of the region."},
	 { "new_Rectangle", _wrap_new_Rectangle, METH_VARARGS, NULL},
	 { "delete_Rectangle", _wrap_delete_Rectangle, METH_O, NULL},
	 { "Rectangle_swigregister", Rectangle_swigregister, METH_O, NULL},
	 { "Rectangle_swiginit", Rectangle_swiginit, METH_VARARGS, NULL},
	 { "Rect_top_set", _wrap_Rect_top_set, METH_VARARGS, " Y-axis of the top line."},
	 { "Rect_top_get", _wrap_Rect_top_get, METH_O, " Y-axis of the top line."},
	 { "Rect_left_set", _wrap_Rect_left_set, METH_VARARGS, " X-axis of the left line."},
	 { "Rect_left_get", _wrap_Rect_left_get, METH_O, " X-axis of the left line."},
	 { "Rect_bottom_set", _wrap_Rect_bottom_set, METH_VARARGS, " Y-axis of the bottom line."},
	 { "Rect_bottom_get", _wrap_Rect_bottom_get, METH_O, " Y-axis of the bottom line."},
	 { "Rect_right_set", _wrap_Rect_right_set, METH_VARARGS, " X-axis of the right line."},
	 { "Rect_right_get", _wrap_Rect_right_get, METH_O, " X-axis of the right line."},
	 { "new_Rect", _wrap_new_Rect, METH_VARARGS, NULL},
	 { "delete_Rect", _wrap_delete_Rect, METH_O, NULL},
	 { "Rect_swigregister", Rect_swigregister, METH_O, NULL},
	 { "Rect_swiginit", Rect_swiginit, METH_VARARGS, NULL},
	 { "WatermarkOptions_visibleInPreview_set", _wrap_WatermarkOptions_visibleInPreview_set, METH_VARARGS, "\n"
		" Sets whether or not the watermark image is visible in the local video preview:\n"
		"- true: (Default) The watermark image is visible in preview.\n"
		"- false: The watermark image is not visible in preview.\n"
		""},
	 { "WatermarkOptions_visibleInPreview_get", _wrap_WatermarkOptions_visibleInPreview_get, METH_O, "\n"
		" Sets whether or not the watermark image is visible in the local video preview:\n"
		"- true: (Default) The watermark image is visible in preview.\n"
		"- false: The watermark image is not visible in preview.\n"
		""},
	 { "WatermarkOptions_positionInLandscapeMode_set", _wrap_WatermarkOptions_positionInLandscapeMode_set, METH_VARARGS, "\n"
		"The watermark position in the landscape mode. See Rectangle.\n"
		"For detailed information on the landscape mode, see the advanced guide *Video Rotation*.\n"
		""},
	 { "WatermarkOptions_positionInLandscapeMode_get", _wrap_WatermarkOptions_positionInLandscapeMode_get, METH_O, "\n"
		"The watermark position in the landscape mode. See Rectangle.\n"
		"For detailed information on the landscape mode, see the advanced guide *Video Rotation*.\n"
		""},
	 { "WatermarkOptions_positionInPortraitMode_set", _wrap_WatermarkOptions_positionInPortraitMode_set, METH_VARARGS, "\n"
		"The watermark position in the portrait mode. See Rectangle.\n"
		"For detailed information on the portrait mode, see the advanced guide *Video Rotation*.\n"
		""},
	 { "WatermarkOptions_positionInPortraitMode_get", _wrap_WatermarkOptions_positionInPortraitMode_get, METH_O, "\n"
		"The watermark position in the portrait mode. See Rectangle.\n"
		"For detailed information on the portrait mode, see the advanced guide *Video Rotation*.\n"
		""},
	 { "new_WatermarkOptions", _wrap_new_WatermarkOptions, METH_NOARGS, NULL},
	 { "delete_WatermarkOptions", _wrap_delete_WatermarkOptions, METH_O, NULL},
	 { "WatermarkOptions_swigregister", WatermarkOptions_swigregister, METH_O, NULL},
	 { "WatermarkOptions_swiginit", WatermarkOptions_swiginit, METH_VARARGS, NULL},
	 { "ScreenCaptureParameters_dimensions_set", _wrap_ScreenCaptureParameters_dimensions_set, METH_VARARGS, "\n"
		"The maximum encoding dimensions of the shared region in terms of width * height.\n"
		"\n"
		"    The default value is 1920 * 1080 pixels, that is, 2073600 pixels. Agora uses the value of this parameter to calculate the charges.\n"
		"\n"
		"    If the aspect ratio is different between the encoding dimensions and screen dimensions, Agora applies the following algorithms for encoding. Suppose the encoding dimensions are 1920 x 1080:\n"
		"\n"
		"    - If the value of the screen dimensions is lower than that of the encoding dimensions, for example, 1000 * 1000, the SDK uses 1000 * 1000 for encoding.\n"
		"    - If the value of the screen dimensions is higher than that of the encoding dimensions, for example, 2000 * 1500, the SDK uses the maximum value under 1920 * 1080 with the aspect ratio of the screen dimension (4:3) for encoding, that is, 1440 * 1080.\n"
		""},
	 { "ScreenCaptureParameters_dimensions_get", _wrap_ScreenCaptureParameters_dimensions_get, METH_O, "\n"
		"The maximum encoding dimensions of the shared region in terms of width * height.\n"
		"\n"
		"    The default value is 1920 * 1080 pixels, that is, 2073600 pixels. Agora uses the value of this parameter to calculate the charges.\n"
		"\n"
		"    If the aspect ratio is different between the encoding dimensions and screen dimensions, Agora applies the following algorithms for encoding. Suppose the encoding dimensions are 1920 x 1080:\n"
		"\n"
		"    - If the value of the screen dimensions is lower than that of the encoding dimensions, for example, 1000 * 1000, the SDK uses 1000 * 1000 for encoding.\n"
		"    - If the value of the screen dimensions is higher than that of the encoding dimensions, for example, 2000 * 1500, the SDK uses the maximum value under 1920 * 1080 with the aspect ratio of the screen dimension (4:3) for encoding, that is, 1440 * 1080.\n"
		""},
	 { "ScreenCaptureParameters_frameRate_set", _wrap_ScreenCaptureParameters_frameRate_set, METH_VARARGS, "\n"
		"The frame rate (fps) of the shared region.\n"
		"\n"
		"   The default value is 5. We do not recommend setting this to a value greater than 15.\n"
		""},
	 { "ScreenCaptureParameters_frameRate_get", _wrap_ScreenCaptureParameters_frameRate_get, METH_O, "\n"
		"The frame rate (fps) of the shared region.\n"
		"\n"
		"   The default value is 5. We do not recommend setting this to a value greater than 15.\n"
		""},
	 { "ScreenCaptureParameters_bitrate_set", _wrap_ScreenCaptureParameters_bitrate_set, METH_VARARGS, "\n"
		"The bitrate (Kbps) of the shared region.\n"
		"\n"
		"   The default value is 0 (the SDK works out a bitrate according to the dimensions of the current screen).\n"
		""},
	 { "ScreenCaptureParameters_bitrate_get", _wrap_ScreenCaptureParameters_bitrate_get, METH_O, "\n"
		"The bitrate (Kbps) of the shared region.\n"
		"\n"
		"   The default value is 0 (the SDK works out a bitrate according to the dimensions of the current screen).\n"
		""},
	 { "ScreenCaptureParameters_captureMouseCursor_set", _wrap_ScreenCaptureParameters_captureMouseCursor_set, METH_VARARGS, "\n"
		"Sets whether or not to capture the mouse for screen sharing:\n"
		"\n"
		"   - true: (Default) Capture the mouse.\n"
		"   - false: Do not capture the mouse.\n"
		""},
	 { "ScreenCaptureParameters_captureMouseCursor_get", _wrap_ScreenCaptureParameters_captureMouseCursor_get, METH_O, "\n"
		"Sets whether or not to capture the mouse for screen sharing:\n"
		"\n"
		"   - true: (Default) Capture the mouse.\n"
		"   - false: Do not capture the mouse.\n"
		""},
	 { "ScreenCaptureParameters_windowFocus_set", _wrap_ScreenCaptureParameters_windowFocus_set, METH_VARARGS, "\n"
		" Whether to bring the window to the front when calling 'startScreenCaptureByWindowId' to share the window:\n"
		"- true: Bring the window to the front.\n"
		"- false: (Default) Do not bring the window to the front.\n"
		""},
	 { "ScreenCaptureParameters_windowFocus_get", _wrap_ScreenCaptureParameters_windowFocus_get, METH_O, "\n"
		" Whether to bring the window to the front when calling 'startScreenCaptureByWindowId' to share the window:\n"
		"- true: Bring the window to the front.\n"
		"- false: (Default) Do not bring the window to the front.\n"
		""},
	 { "ScreenCaptureParameters_excludeWindowList_set", _wrap_ScreenCaptureParameters_excludeWindowList_set, METH_VARARGS, "\n"
		" A list of IDs of windows to be blocked.\n"
		"\n"
		"When calling 'startScreenCaptureByScreenRect' to start screen sharing, you can use this parameter to block the specified windows.\n"
		"When calling 'updateScreenCaptureParameters' to update the configuration for screen sharing, you can use this parameter to dynamically block the specified windows during screen sharing.\n"
		""},
	 { "ScreenCaptureParameters_excludeWindowList_get", _wrap_ScreenCaptureParameters_excludeWindowList_get, METH_O, "\n"
		" A list of IDs of windows to be blocked.\n"
		"\n"
		"When calling 'startScreenCaptureByScreenRect' to start screen sharing, you can use this parameter to block the specified windows.\n"
		"When calling 'updateScreenCaptureParameters' to update the configuration for screen sharing, you can use this parameter to dynamically block the specified windows during screen sharing.\n"
		""},
	 { "ScreenCaptureParameters_excludeWindowCount_set", _wrap_ScreenCaptureParameters_excludeWindowCount_set, METH_VARARGS, " The number of windows to be blocked."},
	 { "ScreenCaptureParameters_excludeWindowCount_get", _wrap_ScreenCaptureParameters_excludeWindowCount_get, METH_O, " The number of windows to be blocked."},
	 { "new_ScreenCaptureParameters", _wrap_new_ScreenCaptureParameters, METH_VARARGS, NULL},
	 { "delete_ScreenCaptureParameters", _wrap_delete_ScreenCaptureParameters, METH_O, NULL},
	 { "ScreenCaptureParameters_swigregister", ScreenCaptureParameters_swigregister, METH_O, NULL},
	 { "ScreenCaptureParameters_swiginit", ScreenCaptureParameters_swiginit, METH_VARARGS, NULL},
	 { "VideoCanvas_view_set", _wrap_VideoCanvas_view_set, METH_VARARGS, " Video display window (view)."},
	 { "VideoCanvas_view_get", _wrap_VideoCanvas_view_get, METH_O, " Video display window (view)."},
	 { "VideoCanvas_renderMode_set", _wrap_VideoCanvas_renderMode_set, METH_VARARGS, " The rendering mode of the video view. See RENDER_MODE_TYPE"},
	 { "VideoCanvas_renderMode_get", _wrap_VideoCanvas_renderMode_get, METH_O, " The rendering mode of the video view. See RENDER_MODE_TYPE"},
	 { "VideoCanvas_channelId_set", _wrap_VideoCanvas_channelId_set, METH_VARARGS, "\n"
		"The unique channel name for the AgoraRTC session in the string format. The string length must be less than 64 bytes. Supported character scopes are:\n"
		"    - All lowercase English letters: a to z.\n"
		"    - All uppercase English letters: A to Z.\n"
		"    - All numeric characters: 0 to 9.\n"
		"    - The space character.\n"
		"    - Punctuation characters and other symbols, including: \"!\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"+\", \"-\", \":\", \";\", \"<\", \"=\", \".\", \">\", \"?\", \"@\", \"[\", \"]\", \"^\", \"_\", \" {\", \"}\", \"|\", \"~\", \",\".\n"
		"\n"
		"    Notes: \n"
		"    - The default value is the empty string \"\". Use the default value if the user joins the channel using the 'joinChannel' method in the IRtcEngine class. The `VideoCanvas` struct defines the video canvas of the user in the channel.\n"
		"    - If the user joins the channel using the 'joinChannel' method in the IChannel class, set this parameter as the `channelId` of the `IChannel` object. The `VideoCanvas` struct defines the video canvas of the user in the channel with the specified channel ID.\n"
		""},
	 { "VideoCanvas_channelId_get", _wrap_VideoCanvas_channelId_get, METH_O, "\n"
		"The unique channel name for the AgoraRTC session in the string format. The string length must be less than 64 bytes. Supported character scopes are:\n"
		"    - All lowercase English letters: a to z.\n"
		"    - All uppercase English letters: A to Z.\n"
		"    - All numeric characters: 0 to 9.\n"
		"    - The space character.\n"
		"    - Punctuation characters and other symbols, including: \"!\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"+\", \"-\", \":\", \";\", \"<\", \"=\", \".\", \">\", \"?\", \"@\", \"[\", \"]\", \"^\", \"_\", \" {\", \"}\", \"|\", \"~\", \",\".\n"
		"\n"
		"    Notes: \n"
		"    - The default value is the empty string \"\". Use the default value if the user joins the channel using the 'joinChannel' method in the IRtcEngine class. The `VideoCanvas` struct defines the video canvas of the user in the channel.\n"
		"    - If the user joins the channel using the 'joinChannel' method in the IChannel class, set this parameter as the `channelId` of the `IChannel` object. The `VideoCanvas` struct defines the video canvas of the user in the channel with the specified channel ID.\n"
		""},
	 { "VideoCanvas_uid_set", _wrap_VideoCanvas_uid_set, METH_VARARGS, " The user ID."},
	 { "VideoCanvas_uid_get", _wrap_VideoCanvas_uid_get, METH_O, " The user ID."},
	 { "VideoCanvas_priv_set", _wrap_VideoCanvas_priv_set, METH_VARARGS, NULL},
	 { "VideoCanvas_priv_get", _wrap_VideoCanvas_priv_get, METH_O, NULL},
	 { "VideoCanvas_mirrorMode_set", _wrap_VideoCanvas_mirrorMode_set, METH_VARARGS, "\n"
		"The mirror mode of the video view. See VIDEO_MIRROR_MODE_TYPE\n"
		"    Notes: \n"
		"    - For the mirror mode of the local video view: If you use a front camera, the SDK enables the mirror mode by default; if you use a rear camera, the SDK disables the mirror mode by default.\n"
		"    - For the mirror mode of the remote video view: The SDK disables the mirror mode by default.\n"
		""},
	 { "VideoCanvas_mirrorMode_get", _wrap_VideoCanvas_mirrorMode_get, METH_O, "\n"
		"The mirror mode of the video view. See VIDEO_MIRROR_MODE_TYPE\n"
		"    Notes: \n"
		"    - For the mirror mode of the local video view: If you use a front camera, the SDK enables the mirror mode by default; if you use a rear camera, the SDK disables the mirror mode by default.\n"
		"    - For the mirror mode of the remote video view: The SDK disables the mirror mode by default.\n"
		""},
	 { "new_VideoCanvas", _wrap_new_VideoCanvas, METH_VARARGS, NULL},
	 { "delete_VideoCanvas", _wrap_delete_VideoCanvas, METH_O, NULL},
	 { "VideoCanvas_swigregister", VideoCanvas_swigregister, METH_O, NULL},
	 { "VideoCanvas_swiginit", VideoCanvas_swiginit, METH_VARARGS, NULL},
	 { "BeautyOptions_lighteningContrastLevel_set", _wrap_BeautyOptions_lighteningContrastLevel_set, METH_VARARGS, " The contrast level, used with the ``lightening`` parameter."},
	 { "BeautyOptions_lighteningContrastLevel_get", _wrap_BeautyOptions_lighteningContrastLevel_get, METH_O, " The contrast level, used with the ``lightening`` parameter."},
	 { "BeautyOptions_lighteningLevel_set", _wrap_BeautyOptions_lighteningLevel_set, METH_VARARGS, " The brightness level. The value ranges from 0.0 (original) to 1.0."},
	 { "BeautyOptions_lighteningLevel_get", _wrap_BeautyOptions_lighteningLevel_get, METH_O, " The brightness level. The value ranges from 0.0 (original) to 1.0."},
	 { "BeautyOptions_smoothnessLevel_set", _wrap_BeautyOptions_smoothnessLevel_set, METH_VARARGS, " The sharpness level. The value ranges between 0 (original) and 1. This parameter is usually used to remove blemishes."},
	 { "BeautyOptions_smoothnessLevel_get", _wrap_BeautyOptions_smoothnessLevel_get, METH_O, " The sharpness level. The value ranges between 0 (original) and 1. This parameter is usually used to remove blemishes."},
	 { "BeautyOptions_rednessLevel_set", _wrap_BeautyOptions_rednessLevel_set, METH_VARARGS, " The redness level. The value ranges between 0 (original) and 1. This parameter adjusts the red saturation level."},
	 { "BeautyOptions_rednessLevel_get", _wrap_BeautyOptions_rednessLevel_get, METH_O, " The redness level. The value ranges between 0 (original) and 1. This parameter adjusts the red saturation level."},
	 { "new_BeautyOptions", _wrap_new_BeautyOptions, METH_VARARGS, NULL},
	 { "delete_BeautyOptions", _wrap_delete_BeautyOptions, METH_O, NULL},
	 { "BeautyOptions_swigregister", BeautyOptions_swigregister, METH_O, NULL},
	 { "BeautyOptions_swiginit", BeautyOptions_swiginit, METH_VARARGS, NULL},
	 { "UserInfo_uid_set", _wrap_UserInfo_uid_set, METH_VARARGS, "The user ID."},
	 { "UserInfo_uid_get", _wrap_UserInfo_uid_get, METH_O, "The user ID."},
	 { "UserInfo_userAccount_set", _wrap_UserInfo_userAccount_set, METH_VARARGS, "The user account."},
	 { "UserInfo_userAccount_get", _wrap_UserInfo_userAccount_get, METH_O, "The user account."},
	 { "new_UserInfo", _wrap_new_UserInfo, METH_NOARGS, NULL},
	 { "delete_UserInfo", _wrap_delete_UserInfo, METH_O, NULL},
	 { "UserInfo_swigregister", UserInfo_swigregister, METH_O, NULL},
	 { "UserInfo_swiginit", UserInfo_swiginit, METH_VARARGS, NULL},
	 { "RtcEngineBridge_initEventHandler", _wrap_RtcEngineBridge_initEventHandler, METH_VARARGS, NULL},
	 { "RtcEngineBridge_release", _wrap_RtcEngineBridge_release, METH_VARARGS, " Releases all IVideoDeviceManager resources."},
	 { "RtcEngineBridge_createChannel", _wrap_RtcEngineBridge_createChannel, METH_VARARGS, NULL},
	 { "RtcEngineBridge_createVideoDeviceManager", _wrap_RtcEngineBridge_createVideoDeviceManager, METH_O, NULL},
	 { "RtcEngineBridge_createAudioPlaybackDeviceManager", _wrap_RtcEngineBridge_createAudioPlaybackDeviceManager, METH_O, NULL},
	 { "RtcEngineBridge_createAudioRecordingDeviceManager", _wrap_RtcEngineBridge_createAudioRecordingDeviceManager, METH_O, NULL},
	 { "RtcEngineBridge_initialize", _wrap_RtcEngineBridge_initialize, METH_VARARGS, NULL},
	 { "RtcEngineBridge_setChannelProfile", _wrap_RtcEngineBridge_setChannelProfile, METH_VARARGS, "\n"
		" Sets the channel profile of the Agora IRtcEngine.\n"
		"\n"
		"The Agora IRtcEngine differentiates channel profiles and applies optimization algorithms accordingly.\n"
		"For example, it prioritizes smoothness and low latency for a video call, and prioritizes video quality for the live interactive video streaming.\n"
		"\n"
		"Warning: \n"
		"- To ensure the quality of real-time communication, we recommend that all users in a channel use the same channel profile.\n"
		"- Call this method before calling 'joinChannel' . You cannot set the channel profile once you have joined the channel.\n"
		"- The default audio route and video encoding bitrate are different in different channel profiles. For details, see\n"
		"'setDefaultAudioRouteToSpeakerphone' and 'setVideoEncoderConfiguration'.\n"
		"\n"
		":type profile: int\n"
		":param profile: The channel profile of the Agora IRtcEngine. See #CHANNEL_PROFILE_TYPE\n"
		":rtype: int\n"
		":return: \n"
		"    - 0(ERR_OK): Success.\n"
		"    - < 0: Failure.\n"
		"     - -2 (ERR_INVALID_ARGUMENT): The parameter is invalid.\n"
		"     - -7(ERR_NOT_INITIALIZED): The SDK is not initialized.\n"
		""},
	 { "RtcEngineBridge_setClientRole", _wrap_RtcEngineBridge_setClientRole, METH_VARARGS, "\n"
		" Sets the role of the user, such as a host or an audience (default), before joining a channel in the live interactive streaming.\n"
		"\n"
		"This method can be used to switch the user role in the live interactive streaming after the user joins a channel.\n"
		"\n"
		"In the `LIVE_BROADCASTING` profile, when a user switches user roles after joining a channel, a successful 'setClientRole' method call triggers the following callbacks:\n"
		"- The local client: 'onClientRoleChanged'\n"
		"- The remote client: 'onUserJoined' or 'onUserOffline' (BECOME_AUDIENCE)\n"
		"\n"
		"Notes: \n"
		"This method applies only to the `LIVE_BROADCASTING` profile.\n"
		"\n"
		":type role: int\n"
		":param role: Sets the role of the user. See #CLIENT_ROLE_TYPE.\n"
		"\n"
		":rtype: int\n"
		":return: \n"
		"    - 0(ERR_OK): Success.\n"
		"    - < 0: Failure.\n"
		"     - -1(ERR_FAILED): A general error occurs (no specified reason).\n"
		"     - -2(ERR_INALID_ARGUMENT): The parameter is invalid.\n"
		"     - -7(ERR_NOT_INITIALIZED): The SDK is not initialized.\n"
		""},
	 { "RtcEngineBridge_joinChannel", _wrap_RtcEngineBridge_joinChannel, METH_VARARGS, "\n"
		" Joins a channel with the user ID.\n"
		"\n"
		"		     Users in the same channel can talk to each other, and multiple users in the same channel can start a group chat. Users with different App IDs cannot call each other.\n"
		"\n"
		"\n"
		"		     You must call the 'leaveChannel' method to exit the current call before entering another channel.\n"
		"\n"
		"		     A successful 'joinChannel' method call triggers the following callbacks:\n"
		"		     - The local client: 'onJoinChannelSuccess'\n"
		"		     - The remote client: 'onUserJoined' , if the user joining the channel is in the `COMMUNICATION` profile, or is a host in the `LIVE_BROADCASTING` profile.\n"
		"\n"
		"		     When the connection between the client and Agora's server is interrupted due to poor network conditions, the SDK tries reconnecting to the server. When the local client successfully rejoins the channel, the SDK triggers the 'onRejoinChannelSuccess' callback on the local client.\n"
		"\n"
		"		     Notes: A channel does not accept duplicate uids, such as two users with the same ``uid``. If you set ``uid`` as 0, the system automatically assigns a ``uid``. If you want to join a channel from different devices, ensure that each device has a different uid.\n"
		"		     Warning: Ensure that the App ID used for creating the token is the same App ID used by the 'initialize' method for initializing the RTC engine. Otherwise, the CDN live streaming may fail.\n"
		"\n"
		"		     :type token: string\n"
		":param token: Pointer to the token generated by the application server. In most circumstances, a static App ID suffices. For added security, use a Channel Key.\n"
		"    		     - If the user uses a static App ID, *token* is optional and can be set as NULL.\n"
		"    		     - If the user uses a Channel Key, Agora issues an additional App Certificate for you to generate a user key based on the algorithm and App Certificate for user authentication on the server.\n"
		"    		 :type channelId: string\n"
		":param channelId: Pointer to the unique channel name for the Agora RTC session in the string format smaller than 64 bytes. Supported characters:\n"
		"    		     - All lowercase English letters: a to z.\n"
		"    		     - All uppercase English letters: A to Z.\n"
		"    		     - All numeric characters: 0 to 9.\n"
		"    		     - The space character.\n"
		"    		     - Punctuation characters and other symbols, including: \"!\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"+\", \"-\", \":\", \";\", \"<\", \"=\", \".\", \">\", \"?\", \"@\", \"[\", \"]\", \"^\", \"_\", \" {\", \"}\", \"|\", \"~\", \",\".\n"
		"    		 :type info: string\n"
		":param info: (Optional) Pointer to additional information about the channel. This parameter can be set to NULL or contain channel related information. Other users in the channel will not receive this message.\n"
		"    		 :type uid: int\n"
		":param uid: (Optional) User ID. A 32-bit unsigned integer with a value ranging from 1 to 2 32-1. The ``uid`` must be unique. If a ``uid`` is not assigned (or set to 0), the SDK assigns and returns a ``uid`` in the 'onJoinChannelSuccess' callback. Your application must record and maintain the returned *uid* since the SDK does not do so.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0(ERR_OK): Success.\n"
		"    		     - < 0: Failure.\n"
		"    		        - -2(ERR_INALID_ARGUMENT): The parameter is invalid.\n"
		"    		        - -3(ERR_NOT_READY): The SDK fails to be initialized. You can try re-initializing the SDK.\n"
		"    		        - -5(ERR_REFUSED): The request is rejected. This may be caused by the following:\n"
		"    		            - You have created an IChannel object with the same channel name.\n"
		"    		            - You have joined and published a stream in a channel created by the IChannel object.\n"
		""},
	 { "RtcEngineBridge_switchChannel", _wrap_RtcEngineBridge_switchChannel, METH_VARARGS, "\n"
		" Switches to a different channel.\n"
		"\n"
		"This method allows the audience of a `LIVE_BROADCASTING` channel to switch\n"
		"to a different channel.\n"
		"\n"
		"After the user successfully switches to another channel, the\n"
		"'onLeaveChannel'\n"
		" and 'agora::rtc::IRtcEngineEventHandler::onJoinChannelSuccess'\n"
		"\"onJoinChannelSuccess\" callbacks are triggered to indicate that the\n"
		"user has left the original channel and joined a new one.\n"
		"\n"
		"Notes: \n"
		"This method applies to the audience role in a `LIVE_BROADCASTING` channel\n"
		"only.\n"
		"\n"
		":type token: string\n"
		":param token: The token generated at your server:\n"
		"    - For low-security requirements: You can use the temporary token\n"
		"    generated in Console. For details, see\n"
		"    [Get a temporary token](https://docs.agora.io/en/Agora%20Platform/token?platfor%20*%20m=All%20Platforms#get-a-temporary-token).\n"
		"    - For high-security requirements: Use the token generated at your\n"
		"    server. For details, see\n"
		"    [Get a token](https://docs.agora.io/en/Agora%20Platform/token?platfor%20*%20m=All%20Platforms#get-a-token).\n"
		":type channelId: string\n"
		":param channelId: Unique channel name for the AgoraRTC session in the\n"
		"    string format. The string length must be less than 64 bytes. Supported\n"
		"    character scopes are:\n"
		"    - All lowercase English letters: a to z.\n"
		"    - All uppercase English letters: A to Z.\n"
		"    - All numeric characters: 0 to 9.\n"
		"    - The space character.\n"
		"    - Punctuation characters and other symbols, including: \"!\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"+\", \"-\", \":\", \";\", \"<\", \"=\", \".\", \">\", \"?\", \"@\", \"[\", \"]\", \"^\", \"_\", \" {\", \"}\", \"|\", \"~\", \",\".\n"
		"\n"
		":rtype: int\n"
		":return: \n"
		"    - 0(ERR_OK): Success.\n"
		"    - < 0: Failure.\n"
		"     - -1(ERR_FAILED): A general error occurs (no specified reason).\n"
		"     - -2(ERR_INALID_ARGUMENT): The parameter is invalid.\n"
		"     - -5(ERR_REFUSED): The request is rejected, probably because the user is not an audience.\n"
		"     - -7(ERR_NOT_INITIALIZED): The SDK is not initialized.\n"
		"     - -102(ERR_INVALID_CHANNEL_NAME): The channel name is invalid.\n"
		"     - -113(ERR_NOT_IN_CHANNEL): The user is not in the channel.\n"
		""},
	 { "RtcEngineBridge_leaveChannel", _wrap_RtcEngineBridge_leaveChannel, METH_O, "\n"
		" Allows a user to leave a channel, such as hanging up or exiting a call.\n"
		"\n"
		"		     After joining a channel, the user must call the *leaveChannel* method to end the call before joining another channel.\n"
		"\n"
		"		     This method returns 0 if the user leaves the channel and releases all resources related to the call.\n"
		"\n"
		"		     This method call is asynchronous, and the user has not left the channel when the method call returns. Once the user leaves the channel, the SDK triggers the 'onLeaveChannel' callback.\n"
		"\n"
		"		     A successful 'leaveChannel' method call triggers the following callbacks:\n"
		"		     - The local client: 'onLeaveChannel'\n"
		"		     - The remote client: 'onUserOffline' , if the user leaving the channel is in the `COMMUNICATION` channel, or is a host in the `LIVE_BROADCASTING` profile.\n"
		"\n"
		"		     Notes: \n"
		"		     - If you call the 'release' method immediately after the *leaveChannel* method, the *leaveChannel* process interrupts, and the 'onLeaveChannel' callback is not triggered.\n"
		"		     - If you call the *leaveChannel* method during a CDN live streaming, the SDK triggers the 'removePublishStreamUrl' method.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0(ERR_OK): Success.\n"
		"    		     - < 0: Failure.\n"
		"    		        - -1(ERR_FAILED): A general error occurs (no specified reason).\n"
		"    		        - -2(ERR_INALID_ARGUMENT): The parameter is invalid.\n"
		"    		        - -7(ERR_NOT_INITIALIZED): The SDK is not initialized.\n"
		""},
	 { "RtcEngineBridge_renewToken", _wrap_RtcEngineBridge_renewToken, METH_VARARGS, "\n"
		" Gets a new token when the current token expires after a period of time.\n"
		"\n"
		"		     The `token` expires after a period of time once the token schema is enabled when:\n"
		"\n"
		"		     - The SDK triggers the 'onTokenPrivilegeWillExpire' callback, or\n"
		"		     - The 'onConnectionStateChanged' reports CONNECTION_CHANGED_TOKEN_EXPIRED(9).\n"
		"\n"
		"		     The application should call this method to get the new `token`. Failure to do so will result in the SDK disconnecting from the server.\n"
		"\n"
		"		     :type token: string\n"
		":param token: Pointer to the new token.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0(ERR_OK): Success.\n"
		"    		     - < 0: Failure.\n"
		"    		        - -1(ERR_FAILED): A general error occurs (no specified reason).\n"
		"    		        - -2(ERR_INALID_ARGUMENT): The parameter is invalid.\n"
		"    		        - -7(ERR_NOT_INITIALIZED): The SDK is not initialized.\n"
		""},
	 { "RtcEngineBridge_registerLocalUserAccount", _wrap_RtcEngineBridge_registerLocalUserAccount, METH_VARARGS, "\n"
		" Registers a user account.\n"
		"\n"
		"		     Once registered, the user account can be used to identify the local user when the user joins the channel.\n"
		"		     After the user successfully registers a user account, the SDK triggers the 'onLocalUserRegistered' callback on the local client,\n"
		"		     reporting the user ID and user account of the local user.\n"
		"\n"
		"		     To join a channel with a user account, you can choose either of the following:\n"
		"\n"
		"		     - Call the 'registerLocalUserAccount' method to create a user account, and then the 'joinChannelWithUserAccount' method to join the channel.\n"
		"		     - Call the 'joinChannelWithUserAccount' method to join the channel.\n"
		"\n"
		"		     The difference between the two is that for the former, the time elapsed between calling the 'joinChannelWithUserAccount' method\n"
		"		     and joining the channel is shorter than the latter.\n"
		"\n"
		"		     Notes: \n"
		"		     - Ensure that you set the `userAccount` parameter. Otherwise, this method does not take effect.\n"
		"		     - Ensure that the value of the `userAccount` parameter is unique in the channel.\n"
		"		     - To ensure smooth communication, use the same parameter type to identify the user. For example, if a user joins the channel with a user ID, then ensure all the other users use the user ID too. The same applies to the user account. If a user joins the channel with the Agora Web SDK, ensure that the uid of the user is set to the same parameter type.\n"
		"\n"
		"		     :type appId: string\n"
		":param appId: The App ID of your project.\n"
		"    		 :type userAccount: string\n"
		":param userAccount: The user account. The maximum length of this parameter is 255 bytes. Ensure that you set this parameter and do not set it as null. Supported character scopes are:\n"
		"    		     - All lowercase English letters: a to z.\n"
		"    		     - All uppercase English letters: A to Z.\n"
		"    		     - All numeric characters: 0 to 9.\n"
		"    		     - The space character.\n"
		"    		     - Punctuation characters and other symbols, including: \"!\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"+\", \"-\", \":\", \";\", \"<\", \"=\", \".\", \">\", \"?\", \"@\", \"[\", \"]\", \"^\", \"_\", \" {\", \"}\", \"|\", \"~\", \",\".\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_joinChannelWithUserAccount", _wrap_RtcEngineBridge_joinChannelWithUserAccount, METH_VARARGS, "\n"
		" Joins the channel with a user account.\n"
		"\n"
		"		     After the user successfully joins the channel, the SDK triggers the following callbacks:\n"
		"\n"
		"		     - The local client: 'onLocalUserRegistered' and 'onJoinChannelSuccess' .\n"
		"		     The remote client: 'onUserJoined' and 'onUserInfoUpdated' , if the user joining the channel is in the `COMMUNICATION` profile, or is a host in the `LIVE_BROADCASTING` profile.\n"
		"\n"
		"		     Notes: To ensure smooth communication, use the same parameter type to identify the user. For example, if a user joins the channel with a user ID, then ensure all the other users use the user ID too. The same applies to the user account.\n"
		"		     If a user joins the channel with the Agora Web SDK, ensure that the uid of the user is set to the same parameter type.\n"
		"\n"
		"		     :type token: string\n"
		":param token: The token generated at your server:\n"
		"    		     - For low-security requirements: You can use the temporary token generated at Console. For details, see [Get a temporary toke](https://docs.agora.io/en/Voice/token?platform=All%20Platforms#get-a-temporary-token).\n"
		"    		     - For high-security requirements: Set it as the token generated at your server. For details, see [Get a token](https://docs.agora.io/en/Voice/token?platform=All%20Platforms#get-a-token).\n"
		"    		 :type channelId: string\n"
		":param channelId: The channel name. The maximum length of this parameter is 64 bytes. Supported character scopes are:\n"
		"    		     - All lowercase English letters: a to z.\n"
		"    		     - All uppercase English letters: A to Z.\n"
		"    		     - All numeric characters: 0 to 9.\n"
		"    		     - The space character.\n"
		"    		     - Punctuation characters and other symbols, including: \"!\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"+\", \"-\", \":\", \";\", \"<\", \"=\", \".\", \">\", \"?\", \"@\", \"[\", \"]\", \"^\", \"_\", \" {\", \"}\", \"|\", \"~\", \",\".\n"
		"    		 :type userAccount: string\n"
		":param userAccount: The user account. The maximum length of this parameter is 255 bytes. Ensure that you set this parameter and do not set it as null. Supported character scopes are:\n"
		"    		     - All lowercase English letters: a to z.\n"
		"    		     - All uppercase English letters: A to Z.\n"
		"    		     - All numeric characters: 0 to 9.\n"
		"    		     - The space character.\n"
		"    		     - Punctuation characters and other symbols, including: \"!\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"+\", \"-\", \":\", \";\", \"<\", \"=\", \".\", \">\", \"?\", \"@\", \"[\", \"]\", \"^\", \"_\", \" {\", \"}\", \"|\", \"~\", \",\".\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		"    		        - #ERR_INVALID_ARGUMENT (-2)\n"
		"    		        - #ERR_NOT_READY (-3)\n"
		"    		        - #ERR_REFUSED (-5)\n"
		""},
	 { "RtcEngineBridge_getUserInfoByUserAccount", _wrap_RtcEngineBridge_getUserInfoByUserAccount, METH_VARARGS, "\n"
		" Gets the user information by passing in the user account.\n"
		"\n"
		"		     After a remote user joins the channel, the SDK gets the user ID and user account of the remote user, caches them\n"
		"		     in a mapping table object (`userInfo`), and triggers the 'onUserInfoUpdated' callback on the local client.\n"
		"\n"
		"		     After receiving the o'onUserInfoUpdated' callback, you can call this method to get the user ID of the\n"
		"		     remote user from the `userInfo` object by passing in the user account.\n"
		"\n"
		"		     :type userAccount: string\n"
		":param userAccount: The user account of the user. Ensure that you set this parameter.\n"
		"    		 :param [in,out]: userInfo  A userInfo object that identifies the user:\n"
		"    		     - Input: A userInfo object.\n"
		"    		     - Output: A userInfo object that contains the user account and user ID of the user.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_getUserInfoByUid", _wrap_RtcEngineBridge_getUserInfoByUid, METH_VARARGS, "\n"
		" Gets the user information by passing in the user ID.\n"
		"\n"
		"		     After a remote user joins the channel, the SDK gets the user ID and user account of the remote user,\n"
		"		     caches them in a mapping table object (`userInfo`), and triggers the 'onUserInfoUpdated' callback on the local client.\n"
		"\n"
		"		     After receiving the 'onUserInfoUpdated' callback, you can call this method to get the user account of the remote user\n"
		"		     from the `userInfo` object by passing in the user ID.\n"
		"\n"
		"		     :type uid: int\n"
		":param uid: The user ID of the remote user. Ensure that you set this parameter.\n"
		"    		 :type userInfo: :py:class:`UserInfo`, in/out\n"
		":param userInfo: A userInfo object that identifies the user:\n"
		"    		     - Input: A userInfo object.\n"
		"    		     - Output: A userInfo object that contains the user account and user ID of the user.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_startEchoTest", _wrap_RtcEngineBridge_startEchoTest, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"DEPRECATED** Starts an audio call test.\n"
		"\n"
		"		     This method is deprecated as of v2.4.0.\n"
		"\n"
		"		     This method starts an audio call test to check whether the audio devices (for example, headset and speaker) and the network connection are working properly.\n"
		"\n"
		"		     To conduct the test:\n"
		"\n"
		"		     - The user speaks and the recording is played back within 10 seconds.\n"
		"		     - If the user can hear the recording within 10 seconds, the audio devices and network connection are working properly.\n"
		"\n"
		"		     Notes: \n"
		"		     - After calling this method, always call the 'stopEchoTest' method to end the test. Otherwise, the application cannot run the next echo test.\n"
		"		     - In the `LIVE_BROADCASTING` profile, only the hosts can call this method. If the user switches from the `COMMUNICATION` to`LIVE_BROADCASTING` profile, the user must call the 'setClientRole' method to change the user role from the audience (default) to the host before calling this method.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		" Starts an audio call test.\n"
		"\n"
		"		     This method starts an audio call test to determine whether the audio devices (for example, headset and speaker) and the network connection are working properly.\n"
		"\n"
		"		     In the audio call test, you record your voice. If the recording plays back within the set time interval, the audio devices and the network connection are working properly.\n"
		"\n"
		"		     Notes: \n"
		"		     - Call this method before joining a channel.\n"
		"		     - After calling this method, call the 'stopEchoTest' method to end the test. Otherwise, the app cannot run the next echo test, or call the 'joinChannel' method.\n"
		"		     - In the `LIVE_BROADCASTING` profile, only a host can call this method.\n"
		"		     :type intervalInSeconds: int\n"
		":param intervalInSeconds: The time interval (s) between when you speak and when the recording plays back.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_stopEchoTest", _wrap_RtcEngineBridge_stopEchoTest, METH_O, "\n"
		" Stops the audio call test.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_enableVideo", _wrap_RtcEngineBridge_enableVideo, METH_O, "\n"
		" Enables the video module.\n"
		"\n"
		"		     Call this method either before joining a channel or during a call. If this method is called before joining a channel, the call starts in the video mode. If this method is called during an audio call, the audio mode switches to the video mode. To disable the video module, call the 'disableVideo' method.\n"
		"\n"
		"		     A successful 'enableVideo' method call triggers the 'onUserEnableVideo' (true) callback on the remote client.\n"
		"		     Notes: \n"
		"		     - This method affects the internal engine and can be called after the 'leaveChannel' method.\n"
		"		     - This method resets the internal engine and takes some time to take effect. We recommend using the following API methods to control the video engine modules separately:\n"
		"		         - 'enableLocalVideo': Whether to enable the camera to create the local video stream.\n"
		"		         - 'muteLocalVideoStream': Whether to publish the local video stream.\n"
		"		         - 'muteRemoteVideoStream': Whether to subscribe to and play the remote video stream.\n"
		"		         - 'muteAllRemoteVideoStreams': Whether to subscribe to and play all remote video streams.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_disableVideo", _wrap_RtcEngineBridge_disableVideo, METH_O, "\n"
		" Disables the video module.\n"
		"\n"
		"    		 This method can be called before joining a channel or during a call. If this method is called before joining a channel, the call starts in audio mode. If this method is called during a video call, the video mode switches to the audio mode. To enable the video module, call the 'enableVideo' method.\n"
		"\n"
		"		     A successful 'disableVideo' method call triggers the 'onUserEnableVideo' (false) callback on the remote client.\n"
		"		     Notes: \n"
		"		     - This method affects the internal engine and can be called after the 'leaveChannel' method.\n"
		"		     - This method resets the internal engine and takes some time to take effect. We recommend using the following API methods to control the video engine modules separately:\n"
		"		         - 'enableLocalVideo': Whether to enable the camera to create the local video stream.\n"
		"		         - 'muteLocalVideoStream': Whether to publish the local video stream.\n"
		"		         - 'muteRemoteVideoStream': Whether to subscribe to and play the remote video stream.\n"
		"		         - 'muteAllRemoteVideoStreams': Whether to subscribe to and play all remote video streams.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setVideoProfile", _wrap_RtcEngineBridge_setVideoProfile, METH_VARARGS, "\n"
		"DEPRECATED** Sets the video profile.\n"
		"\n"
		"		     This method is deprecated as of v2.3. Use the 'setVideoEncoderConfiguration' method instead.\n"
		"\n"
		"		     Each video profile includes a set of parameters, such as the resolution, frame rate, and bitrate. If the camera device does not support the specified resolution, the SDK automatically chooses a suitable camera resolution, keeping the encoder resolution specified by the *setVideoProfile* method.\n"
		"\n"
		"		     Notes: \n"
		"		     - If you do not need to set the video profile after joining the channel, call this method before the 'enableVideo' method to reduce the render time of the first video frame.\n"
		"		     - Always set the video profile before calling the 'joinChannel' or 'startPreview' method.\n"
		"\n"
		"		     :type profile: int\n"
		":param profile: Sets the video profile. See #VIDEO_PROFILE_TYPE.\n"
		"    		 :type swapWidthAndHeight: boolean\n"
		":param swapWidthAndHeight: Sets whether to swap the width and height of the video stream:\n"
		"    		     - true: Swap the width and height.\n"
		"    		     - false: (Default) Do not swap the width and height.\n"
		"    		     The width and height of the output video are consistent with the set video profile.\n"
		"    		 Since the landscape or portrait mode of the output video can be decided directly by the video profile, We recommend setting *swapWidthAndHeight* to *false* (default).\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setVideoEncoderConfiguration", _wrap_RtcEngineBridge_setVideoEncoderConfiguration, METH_VARARGS, "\n"
		" Sets the video encoder configuration.\n"
		"\n"
		"		     Each video encoder configuration corresponds to a set of video parameters, including the resolution, frame rate, bitrate, and video orientation.\n"
		"\n"
		"		     The parameters specified in this method are the maximum values under ideal network conditions. If the video engine cannot render the video using the specified parameters due to poor network conditions, the parameters further down the list are considered until a successful configuration is found.\n"
		"\n"
		"		     Notes: If you do not need to set the video encoder configuration after joining the channel, you can call this method before the 'enableVideo' method to reduce the render time of the first video frame.\n"
		"\n"
		"		     :type config: :py:class:`VideoEncoderConfiguration`\n"
		":param config: Sets the local video encoder configuration. See VideoEncoderConfiguration.\n"
		"    		 :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setCameraCapturerConfiguration", _wrap_RtcEngineBridge_setCameraCapturerConfiguration, METH_VARARGS, "\n"
		" Sets the camera capture configuration.\n"
		"\n"
		"		     For a video call or the live interactive video streaming, generally the SDK controls the camera output parameters. When the default camera capturer settings do not meet special requirements or cause performance problems, we recommend using this method to set the camera capturer configuration:\n"
		"\n"
		"		     - If the resolution or frame rate of the captured raw video data are higher than those set by 'setVideoEncoderConfiguration', processing video frames requires extra CPU and RAM usage and degrades performance. We recommend setting config as CAPTURER_OUTPUT_PREFERENCE_PERFORMANCE = 1 to avoid such problems.\n"
		"		     - If you do not need local video preview or are willing to sacrifice preview quality, we recommend setting config as CAPTURER_OUTPUT_PREFERENCE_PERFORMANCE = 1 to optimize CPU and RAM usage.\n"
		"		     - If you want better quality for the local video preview, we recommend setting config as CAPTURER_OUTPUT_PREFERENCE_PREVIEW = 2.\n"
		"\n"
		"		     Notes: Call this method before enabling the local camera. That said, you can call this method before calling 'joinChannel', 'enableVideo', or 'enableLocalVideo', depending on which method you use to turn on your local camera.\n"
		"\n"
		"		     :type config: :py:class:`CameraCapturerConfiguration`\n"
		":param config: Sets the camera capturer configuration. See CameraCapturerConfiguration.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setupLocalVideo", _wrap_RtcEngineBridge_setupLocalVideo, METH_VARARGS, "\n"
		" Initializes the local video view.\n"
		"\n"
		"		     This method initializes the video view of a local stream on the local device. It affects only the video view that the local user sees, not the published local video stream.\n"
		"\n"
		"		     Call this method to bind the local video stream to a video view and to set the rendering and mirror modes of the video view.\n"
		"		     The binding is still valid after the user leaves the channel, which means that the window still displays. To unbind the view, set the *view* in VideoCanvas to NULL.\n"
		"\n"
		"		     Notes: \n"
		"		     - Call this method before joining a channel.\n"
		"		     - During a call, you can call this method as many times as necessary to update the display mode of the local video view.\n"
		"		     :type canvas: :py:class:`VideoCanvas`\n"
		":param canvas: Pointer to the local video view and settings. See VideoCanvas.\n"
		"    		 :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setupRemoteVideo", _wrap_RtcEngineBridge_setupRemoteVideo, METH_VARARGS, "\n"
		" Initializes the video view of a remote user.\n"
		"\n"
		"		     This method initializes the video view of a remote stream on the local device. It affects only the video view that the local user sees.\n"
		"\n"
		"		     Call this method to bind the remote video stream to a video view and to set the rendering and mirror modes of the video view.\n"
		"\n"
		"		     The application specifies the uid of the remote video in this method before the remote user joins the channel. If the remote uid is unknown to the application, set it after the application receives the 'onUserJoined' callback.\n"
		"		     If the Video Recording function is enabled, the Video Recording Service joins the channel as a dummy client, causing other clients to also receive the 'onUserJoined' callback. Do not bind the dummy client to the application view because the dummy client does not send any video streams. If your application does not recognize the dummy client, bind the remote user to the view when the SDK triggers the 'onFirstRemoteVideoDecoded' callback.\n"
		"		     To unbind the remote user from the view, set the view in VideoCanvas to NULL. Once the remote user leaves the channel, the SDK unbinds the remote user.\n"
		"\n"
		"		     Notes: To update the rendering or mirror mode of the remote video view during a call, use the 'setRemoteRenderMode' method.\n"
		"\n"
		"		     :type canvas: :py:class:`VideoCanvas`\n"
		":param canvas: Pointer to the remote video view and settings. See VideoCanvas.\n"
		"    		 :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_startPreview", _wrap_RtcEngineBridge_startPreview, METH_O, "\n"
		" Starts the local video preview before joining the channel.\n"
		"\n"
		"		     Before calling this method, you must:\n"
		"\n"
		"		     - Call the 'setupLocalVideo' method to set up the local preview window and configure the attributes.\n"
		"		     - Call the 'enableVideo' method to enable video.\n"
		"\n"
		"		     Notes: Once the startPreview method is called to start the local video preview, if you leave the channel by calling the 'leaveChannel' method, the local video preview remains until you call the 'stopPreview' method to disable it.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setRemoteUserPriority", _wrap_RtcEngineBridge_setRemoteUserPriority, METH_VARARGS, "\n"
		" Prioritizes a remote user's stream.\n"
		"\n"
		"		    Use this method with the 'setRemoteSubscribeFallbackOption' method. If the fallback function is enabled for a subscribed stream, the SDK ensures the high-priority user gets the best possible stream quality.\n"
		"\n"
		"		    Notes: The Agora SDK supports setting ``userPriority`` as high for one user only.\n"
		"\n"
		"		    :type uid: int\n"
		":param uid:  The ID of the remote user.\n"
		"    		:type userPriority: int\n"
		":param userPriority: Sets the priority of the remote user. See #PRIORITY_TYPE.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_stopPreview", _wrap_RtcEngineBridge_stopPreview, METH_O, "\n"
		" Stops the local video preview and disables video.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_enableAudio", _wrap_RtcEngineBridge_enableAudio, METH_O, "\n"
		" Enables the audio module.\n"
		"\n"
		"		    The audio mode is enabled by default.\n"
		"\n"
		"		     Notes: \n"
		"		     - This method affects the internal engine and can be called after the 'leaveChannel' method. You can call this method either before or after joining a channel.\n"
		"		     - This method resets the internal engine and takes some time to take effect. We recommend using the following API methods to control the audio engine modules separately:\n"
		"		         - 'enableLocalAudio': Whether to enable the microphone to create the local audio stream.\n"
		"		         - 'muteLocalAudioStream': Whether to publish the local audio stream.\n"
		"		         - 'muteRemoteAudioStream': Whether to subscribe to and play the remote audio stream.\n"
		"		         - 'muteAllRemoteAudioStreams': Whether to subscribe to and play all remote audio streams.\n"
		"\n"
		"		    :rtype: int\n"
		":return: \n"
		"    		    - 0: Success.\n"
		"    		    - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_enableLocalAudio", _wrap_RtcEngineBridge_enableLocalAudio, METH_VARARGS, "\n"
		" Disables/Re-enables the local audio function.\n"
		"\n"
		"		     The audio function is enabled by default. This method disables or re-enables the local audio function, that is, to stop or restart local audio capturing.\n"
		"\n"
		"		     This method does not affect receiving or playing the remote audio streams,and enableLocalAudio(false) is applicable to scenarios where the user wants to\n"
		"		     receive remote audio streams without sending any audio stream to other users in the channel.\n"
		"\n"
		"		     Once the local audio function is disabled or re-enabled, the SDK triggers the 'onLocalAudioStateChanged' callback,\n"
		"		     which reports `LOCAL_AUDIO_STREAM_STATE_STOPPED(0)` or `LOCAL_AUDIO_STREAM_STATE_RECORDING(1)`.\n"
		"\n"
		"		     Notes: \n"
		"		     This method is different from the 'muteLocalAudioStream' method:\n"
		"		        - 'enableLocalAudio': Disables/Re-enables the local audio capturing and processing.\n"
		"		        If you disable or re-enable local audio recording using the `enableLocalAudio` method, the local user may hear a pause in the remote audio playback.\n"
		"		        - 'muteLocalAudioStream': Sends/Stops sending the local audio streams.\n"
		"\n"
		"		     :type enabled: boolean\n"
		":param enabled: Sets whether to disable/re-enable the local audio function:\n"
		"    		     - true: (Default) Re-enable the local audio function, that is, to start the local audio capturing device (for example, the microphone).\n"
		"    		     - false: Disable the local audio function, that is, to stop local audio capturing.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_disableAudio", _wrap_RtcEngineBridge_disableAudio, METH_O, "\n"
		" Disables the audio module.\n"
		"\n"
		"		     Notes: \n"
		"		     - This method affects the internal engine and can be called after the 'leaveChannel' method. You can call this method either before or after joining a channel.\n"
		"		     - This method resets the internal engine and takes some time to take effect. We recommend using the 'enableLocalAudio' and 'muteLocalAudioStream' methods to capture, process, and send the local audio streams.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setAudioProfile", _wrap_RtcEngineBridge_setAudioProfile, METH_VARARGS, "\n"
		" Sets the audio parameters and application scenarios.\n"
		"\n"
		"		     Notes: \n"
		"		     - The *setAudioProfile* method must be called before the 'joinChannel' method.\n"
		"		     - In the `COMMUNICATION` and `LIVE_BROADCASTING` profiles, the bitrate may be different from your settings due to network self-adaptation.\n"
		"		     - In scenarios requiring high-quality audio, for example, a music teaching scenario, we recommend setting profile as AUDIO_PROFILE_MUSIC_HIGH_QUALITY (4) and  scenario as AUDIO_SCENARIO_GAME_STREAMING (3).\n"
		"\n"
		"		     :type profile: int\n"
		":param profile: Sets the sample rate, bitrate, encoding mode, and the number of channels. See #AUDIO_PROFILE_TYPE.\n"
		"    		 :type scenario: int\n"
		":param scenario: Sets the audio application scenario. See #AUDIO_SCENARIO_TYPE.\n"
		"    		     Under different audio scenarios, the device uses different volume tracks,\n"
		"    		     i.e. either the in-call volume or the media volume. For details, see\n"
		"    		     [What is the difference between the in-call volume and the media volume?](https://docs.agora.io/en/faq/system_volume).\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_muteLocalAudioStream", _wrap_RtcEngineBridge_muteLocalAudioStream, METH_VARARGS, "\n"
		" Stops/Resumes sending the local audio stream.\n"
		"\n"
		"		     A successful 'muteLocalAudioStream' method call triggers the 'onUserMuteAudio' callback on the remote client.\n"
		"		     Notes: \n"
		"		     - When ``mute`` is set as ``true``, this method does not disable the microphone, which does not affect any ongoing recording.\n"
		"		     - If you call 'setChannelProfile' after this method, the SDK resets whether or not to mute the local audio according to the channel profile and user role. Therefore, we recommend calling this method after the `setChannelProfile` method.\n"
		"\n"
		"		     :type mute: boolean\n"
		":param mute: Sets whether to send/stop sending the local audio stream:\n"
		"    		     - true: Stops sending the local audio stream.\n"
		"    		     - false: (Default) Sends the local audio stream.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_muteAllRemoteAudioStreams", _wrap_RtcEngineBridge_muteAllRemoteAudioStreams, METH_VARARGS, "\n"
		" Stops/Resumes receiving all remote users' audio streams.\n"
		"\n"
		"		     :type mute: boolean\n"
		":param mute: Sets whether to receive/stop receiving all remote users' audio streams.\n"
		"    		     - true: Stops receiving all remote users' audio streams.\n"
		"    		     - false: (Default) Receives all remote users' audio streams.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setDefaultMuteAllRemoteVideoStreams", _wrap_RtcEngineBridge_setDefaultMuteAllRemoteVideoStreams, METH_VARARGS, "\n"
		" Stops/Resumes receiving all remote users' audio streams by default.\n"
		"\n"
		"		     You can call this method either before or after joining a channel. If you call `setDefaultMuteAllRemoteAudioStreams (true)` after joining a channel, the remote audio streams of all subsequent users are not received.\n"
		"\n"
		"		     Notes: If you want to resume receiving the audio stream, call 'muteRemoteAudioStream (false)',\n"
		"		     and specify the ID of the remote user whose audio stream you want to receive.\n"
		"		     To receive the audio streams of multiple remote users, call `muteRemoteAudioStream (false)` as many times.\n"
		"		     Calling `setDefaultMuteAllRemoteAudioStreams (false)` resumes receiving the audio streams of subsequent users only.\n"
		"\n"
		"		     :type mute: boolean\n"
		":param mute: Sets whether to receive/stop receiving all remote users' audio streams by default:\n"
		"    		     - true:  Stops receiving all remote users' audio streams by default.\n"
		"    		     - false: (Default) Receives all remote users' audio streams by default.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_adjustUserPlaybackSignalVolume", _wrap_RtcEngineBridge_adjustUserPlaybackSignalVolume, METH_VARARGS, "\n"
		" Adjusts the playback volume of a specified remote user.\n"
		"\n"
		"		     You can call this method as many times as necessary to adjust the playback volume of different remote users, or to repeatedly adjust the playback volume of the same remote user.\n"
		"\n"
		"		     Notes: \n"
		"		     - Call this method after joining a channel.\n"
		"		     - The playback volume here refers to the mixed volume of a specified remote user.\n"
		"		     - This method can only adjust the playback volume of one specified remote user at a time. To adjust the playback volume of different remote users, call the method as many times, once for each remote user.\n"
		"\n"
		"		     :type uid: int\n"
		":param uid: The ID of the remote user.\n"
		"    		 :type volume: int\n"
		":param volume: The playback volume of the specified remote user. The value ranges from 0 to 100:\n"
		"    		     - 0: Mute.\n"
		"    		     - 100: Original volume.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_muteRemoteAudioStream", _wrap_RtcEngineBridge_muteRemoteAudioStream, METH_VARARGS, "\n"
		" Stops/Resumes receiving a specified remote user's audio stream.\n"
		"\n"
		"		     Notes: If you called the 'muteAllRemoteAudioStreams' method and set ``mute`` as ``true`` to stop receiving all remote users' audio streams, call the *muteAllRemoteAudioStreams* method and set ``mute`` as ``false`` before calling this method. The *muteAllRemoteAudioStreams* method sets all remote audio streams, while the *muteRemoteAudioStream* method sets a specified remote audio stream.\n"
		"\n"
		"		     :type userId: int\n"
		":param userId: User ID of the specified remote user sending the audio.\n"
		"    		 :type mute: boolean\n"
		":param mute: Sets whether to receive/stop receiving a specified remote user's audio stream:\n"
		"    		     - true: Stops receiving the specified remote user's audio stream.\n"
		"    		     - false: (Default) Receives the specified remote user's audio stream.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_muteLocalVideoStream", _wrap_RtcEngineBridge_muteLocalVideoStream, METH_VARARGS, "\n"
		" Stops/Resumes sending the local video stream.\n"
		"\n"
		"		     A successful 'muteLocalVideoStream' method call triggers the 'onUserMuteVideo' callback on the remote client.\n"
		"\n"
		"		     Notes: \n"
		"		     - When set to *true*, this method does not disable the camera which does not affect the retrieval of the local video streams. This method executes faster than the 'enableLocalVideo' method which controls the sending of the local video stream.\n"
		"		     - If you call 'setChannelProfile' after this method, the SDK resets whether or not to mute the local video according to the channel profile and user role. Therefore, we recommend calling this method after the `setChannelProfile` method.\n"
		"\n"
		"		     :type mute: boolean\n"
		":param mute: Sets whether to send/stop sending the local video stream:\n"
		"    		     - true: Stop sending the local video stream.\n"
		"    		     - false: (Default) Send the local video stream.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_enableLocalVideo", _wrap_RtcEngineBridge_enableLocalVideo, METH_VARARGS, "\n"
		" Enables/Disables the local video capture.\n"
		"\n"
		"		     This method disables or re-enables the local video capturer, and does not affect receiving the remote video stream.\n"
		"\n"
		"		     After you call the 'enableVideo' method, the local video capturer is enabled by default. You can call 'enableLocalVideo(false)' to disable the local video capturer. If you want to re-enable it, call 'enableLocalVideo(true)'.\n"
		"\n"
		"		     After the local video capturer is successfully disabled or re-enabled, the SDK triggers the 'onUserEnableLocalVideo' callback on the remote client.\n"
		"\n"
		"		     Notes: This method affects the internal engine and can be called after the 'leaveChannel' method.\n"
		"\n"
		"		     :type enabled: boolean\n"
		":param enabled: Sets whether to disable/re-enable the local video, including the capturer, renderer, and sender:\n"
		"    		     - true: (Default) Re-enable the local video.\n"
		"    		     - false: Disable the local video. Once the local video is disabled, the remote users can no longer receive the video stream of this user, while this user can still receive the video streams of the other remote users.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_muteAllRemoteVideoStreams", _wrap_RtcEngineBridge_muteAllRemoteVideoStreams, METH_VARARGS, "\n"
		" Stops/Resumes receiving all video stream from a specified remote user.\n"
		"\n"
		"		     :type mute: boolean\n"
		":param mute: Sets whether to receive/stop receiving all remote users' video streams:\n"
		"    		     - true: Stop receiving all remote users' video streams.\n"
		"    		     - false: (Default) Receive all remote users' video streams.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setDefaultMuteAllRemoteAudioStreams", _wrap_RtcEngineBridge_setDefaultMuteAllRemoteAudioStreams, METH_VARARGS, "\n"
		" Stops/Resumes receiving all remote users' video streams by default.\n"
		"\n"
		"		     You can call this method either before or after joining a channel. If you call `setDefaultMuteAllRemoteVideoStreams (true)` after joining a channel, the remote video streams of all subsequent users are not received.\n"
		"\n"
		"		     Notes: If you want to resume receiving the video stream, call 'muteRemoteVideoStream (false)', and specify the ID of the remote user whose video stream you want to receive. To receive the video streams of multiple remote users, call `muteRemoteVideoStream (false)` as many times. Calling `setDefaultMuteAllRemoteVideoStreams (false)` resumes receiving the video streams of subsequent users only.\n"
		"\n"
		"		     :type mute: boolean\n"
		":param mute: Sets whether to receive/stop receiving all remote users' video streams by default:\n"
		"    		     - true: Stop receiving all remote users' video streams by default.\n"
		"    		     - false: (Default) Receive all remote users' video streams by default.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_muteRemoteVideoStream", _wrap_RtcEngineBridge_muteRemoteVideoStream, METH_VARARGS, "\n"
		" Stops/Resumes receiving the video stream from a specified remote user.\n"
		"\n"
		"		     Notes: If you called the 'muteAllRemoteVideoStreams' method and set ``mute`` as ``true`` to stop receiving all remote video streams, call the *muteAllRemoteVideoStreams* method and set ``mute`` as ``false`` before calling this method.\n"
		"\n"
		"		     :type userId: int\n"
		":param userId: User ID of the specified remote user.\n"
		"    		 :type mute: boolean\n"
		":param mute: Sets whether to stop/resume receiving the video stream from a specified remote user:\n"
		"    		     - true: Stop receiving the specified remote user's video stream.\n"
		"    		     - false: (Default) Receive the specified remote user's video stream.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setRemoteVideoStreamType", _wrap_RtcEngineBridge_setRemoteVideoStreamType, METH_VARARGS, "\n"
		" Sets the stream type of the remote video.\n"
		"\n"
		"		     Under limited network conditions, if the publisher has not disabled the dual-stream mode using `enableDualStreamMode(false)`,\n"
		"		     the receiver can choose to receive either the high-quality video stream (the high resolution, and high bitrate video stream) or\n"
		"		     the low-video stream (the low resolution, and low bitrate video stream).\n"
		"\n"
		"		     By default, users receive the high-quality video stream. Call this method if you want to switch to the low-video stream.\n"
		"		     This method allows the app to adjust the corresponding video stream type based on the size of the video window to\n"
		"		     reduce the bandwidth and resources.\n"
		"\n"
		"		     The aspect ratio of the low-video stream is the same as the high-quality video stream. Once the resolution of the high-quality video\n"
		"		     stream is set, the system automatically sets the resolution, frame rate, and bitrate of the low-video stream.\n"
		"\n"
		"		     The method result returns in the 'onApiCallExecuted' callback.\n"
		"\n"
		"		     :type userId: int\n"
		":param userId: ID of the remote user sending the video stream.\n"
		"    		 :type streamType: int\n"
		":param streamType:  Sets the video-stream type. See #REMOTE_VIDEO_STREAM_TYPE.\n"
		"    		 :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setRemoteDefaultVideoStreamType", _wrap_RtcEngineBridge_setRemoteDefaultVideoStreamType, METH_VARARGS, "\n"
		" Sets the default stream type of remote videos.\n"
		"\n"
		"		     Under limited network conditions, if the publisher has not disabled the dual-stream mode using `enableDualStreamMode(false)`,\n"
		"		     the receiver can choose to receive either the high-quality video stream (the high resolution, and high bitrate video stream) or\n"
		"		     the low-video stream (the low resolution, and low bitrate video stream).\n"
		"\n"
		"		     By default, users receive the high-quality video stream. Call this method if you want to switch to the low-video stream.\n"
		"		     This method allows the app to adjust the corresponding video stream type based on the size of the video window to\n"
		"		     reduce the bandwidth and resources. The aspect ratio of the low-video stream is the same as the high-quality video stream.\n"
		"		     Once the resolution of the high-quality video\n"
		"		     stream is set, the system automatically sets the resolution, frame rate, and bitrate of the low-video stream.\n"
		"\n"
		"		     The method result returns in the 'onApiCallExecuted' callback.\n"
		"\n"
		"		     :type streamType: int\n"
		":param streamType: Sets the default video-stream type. See #REMOTE_VIDEO_STREAM_TYPE.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_enableAudioVolumeIndication", _wrap_RtcEngineBridge_enableAudioVolumeIndication, METH_VARARGS, "\n"
		" Enables the 'onAudioVolumeIndication' callback at a set time interval to report on which users are speaking and the speakers' volume.\n"
		"\n"
		"		     Once this method is enabled, the SDK returns the volume indication in the 'onAudioVolumeIndication' callback at the set time interval, whether or not any user is speaking in the channel.\n"
		"\n"
		"		     :type interval: int\n"
		":param interval: Sets the time interval between two consecutive volume indications:\n"
		"    		     - <= 0: Disables the volume indication.\n"
		"    		     - > 0: Time interval (ms) between two consecutive volume indications. We recommend setting ``interval`` > 200 ms. Do not set ``interval`` < 10 ms, or the *onAudioVolumeIndication* callback will not be triggered.\n"
		"    		 :type smooth: int\n"
		":param smooth:  Smoothing factor sets the sensitivity of the audio volume indicator. The value ranges between 0 and 10. The greater the value, the more sensitive the indicator. The recommended value is 3.\n"
		"    		 :type report_vad: boolean\n"
		":param report_vad:\n"
		"\n"
		"		     - true: Enable the voice activity detection of the local user. Once it is enabled, the `vad` parameter of the `onAudioVolumeIndication` callback reports the voice activity status of the local user.\n"
		"		     - false: (Default) Disable the voice activity detection of the local user. Once it is disabled, the `vad` parameter of the `onAudioVolumeIndication` callback does not report the voice activity status of the local user, except for the scenario where the engine automatically detects the voice activity of the local user.\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_startAudioRecording", _wrap_RtcEngineBridge_startAudioRecording, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		" Deprecated: Starts an audio recording.\n"
		"\n"
		"		     Use 'IRtcEngine::startAudioRecording(const' char* filePath, int sampleRate, AUDIO_RECORDING_QUALITY_TYPE quality) \"startAudioRecording\"2 instead.\n"
		"\n"
		"		     The SDK allows recording during a call. Supported formats:\n"
		"\n"
		"		     - .wav: Large file size with high fidelity.\n"
		"		     - .aac: Small file size with low fidelity.\n"
		"\n"
		"		     This method has a fixed sample rate of 32 kHz.\n"
		"\n"
		"		     Ensure that the directory to save the recording file exists and is writable.\n"
		"		     This method is usually called after the 'joinChannel' method.\n"
		"		     The recording automatically stops when the 'leaveChannel' method is called.\n"
		"\n"
		"		     :type filePath: string\n"
		":param filePath: Pointer to the absolute file path of the recording file. The string of the file name is in UTF-8.\n"
		"    		 :type quality: int\n"
		":param quality: Sets the audio recording quality. See #AUDIO_RECORDING_QUALITY_TYPE.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		" Starts an audio recording on the client.\n"
		"\n"
		"The SDK allows recording during a call. After successfully calling this method, you can record the audio of all the users in the channel and get an audio recording file.\n"
		"Supported formats of the recording file are as follows:\n"
		"- .wav: Large file size with high fidelity.\n"
		"- .aac: Small file size with low fidelity.\n"
		"\n"
		"Notes: \n"
		"- Ensure that the directory you use to save the recording file exists and is writable.\n"
		"- This method is usually called after the `joinChannel` method. The recording automatically stops when you call the `leaveChannel` method.\n"
		"- For better recording effects, set quality as #AUDIO_RECORDING_QUALITY_MEDIUM or #AUDIO_RECORDING_QUALITY_HIGH when `sampleRate` is 44.1 kHz or 48 kHz.\n"
		"\n"
		":type filePath: string\n"
		":param filePath: Pointer to the absolute file path of the recording file. The string of the file name is in UTF-8, such as c:/music/audio.aac.\n"
		":type sampleRate: int\n"
		":param sampleRate: Sample rate (kHz) of the recording file. Supported values are as follows:\n"
		"    - 16\n"
		"    - (Default) 32\n"
		"    - 44.1\n"
		"    - 48\n"
		":type quality: int\n"
		":param quality: Sets the audio recording quality. See #AUDIO_RECORDING_QUALITY_TYPE.\n"
		"\n"
		":rtype: int\n"
		":return: \n"
		"    - 0: Success.\n"
		"    - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_stopAudioRecording", _wrap_RtcEngineBridge_stopAudioRecording, METH_O, "\n"
		" Stops an audio recording on the client.\n"
		"\n"
		"		     You can call this method before calling the 'leaveChannel' method else, the recording automatically stops when the 'leaveChannel' method is called.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setRemoteVoicePosition", _wrap_RtcEngineBridge_setRemoteVoicePosition, METH_VARARGS, "\n"
		" Sets the sound position and gain of a remote user.\n"
		"\n"
		"		     When the local user calls this method to set the sound position of a remote user, the sound difference between the left and right channels allows the local user to track the real-time position of the remote user, creating a real sense of space. This method applies to massively multiplayer online games, such as Battle Royale games.\n"
		"\n"
		"		     Notes: \n"
		"		     - For this method to work, enable stereo panning for remote users by calling the 'enableSoundPositionIndication' method before joining a channel.\n"
		"		     - This method requires hardware support. For the best sound positioning, we recommend using a stereo speaker.\n"
		"\n"
		"		     :type uid: int\n"
		":param uid: The ID of the remote user.\n"
		"    		 :type pan: float\n"
		":param pan: The sound position of the remote user. The value ranges from -1.0 to 1.0:\n"
		"    		     - 0.0: the remote sound comes from the front.\n"
		"    		     - -1.0: the remote sound comes from the left.\n"
		"    		     - 1.0: the remote sound comes from the right.\n"
		"    		 :type gain: float\n"
		":param gain: Gain of the remote user. The value ranges from 0.0 to 100.0. The default value is 100.0 (the original gain of the remote user). The smaller the value, the less the gain.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setLogFile", _wrap_RtcEngineBridge_setLogFile, METH_VARARGS, "\n"
		" Sets the log files that the SDK outputs.\n"
		"\n"
		"By default, the SDK outputs five log files, `agorasdk.log`, `agorasdk_1.log`, `agorasdk_2.log`, `agorasdk_3.log`, `agorasdk_4.log`, each with a default size of 1024 KB.\n"
		"These log files are encoded in UTF-8. The SDK writes the latest logs in `agorasdk.log`. When `agorasdk.log` is full, the SDK deletes the log file with the earliest\n"
		"modification time among the other four, renames `agorasdk.log` to the name of the deleted log file, and create a new `agorasdk.log` to record latest logs.\n"
		"\n"
		"Notes: Ensure that you call this method immediately after calling 'initialize' , otherwise the output logs may not be complete.\n"
		"\n"
		"See also: 'setLogFileSize'\n"
		"See also: 'setLogFilter'\n"
		"\n"
		":param filePath: The absolute path of log files. The default file path is `C: <user_name><process_name>.log`.\n"
		"    Ensure that the directory for the log files exists and is writable. You can use this parameter to rename the log files.\n"
		"\n"
		":rtype: int\n"
		":return: \n"
		"    - 0: Success.\n"
		"    - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setLogFilter", _wrap_RtcEngineBridge_setLogFilter, METH_VARARGS, "\n"
		" Sets the output log level of the SDK.\n"
		"\n"
		"		     You can use one or a combination of the log filter levels. The log level follows the sequence of OFF, CRITICAL, ERROR, WARNING, INFO, and DEBUG. Choose a level to see the logs preceding that level.\n"
		"\n"
		"		     If you set the log level to WARNING, you see the logs within levels CRITICAL, ERROR, and WARNING.\n"
		"\n"
		"		     See also: 'setLogFile'\n"
		"		     See also: 'setLogFileSize'\n"
		"\n"
		"		     :type filter: int\n"
		":param filter: Sets the log filter level. See #LOG_FILTER_TYPE.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setLogFileSize", _wrap_RtcEngineBridge_setLogFileSize, METH_VARARGS, "\n"
		" Sets the size of a log file that the SDK outputs.\n"
		"\n"
		"By default, the SDK outputs five log files, `agorasdk.log`, `agorasdk_1.log`, `agorasdk_2.log`, `agorasdk_3.log`, `agorasdk_4.log`, each with a default size of 1024 KB.\n"
		"These log files are encoded in UTF-8. The SDK writes the latest logs in `agorasdk.log`. When `agorasdk.log` is full, the SDK deletes the log file with the earliest\n"
		"modification time among the other four, renames `agorasdk.log` to the name of the deleted log file, and create a new `agorasdk.log` to record latest logs.\n"
		"\n"
		"See also: 'setLogFile'\n"
		"See also: 'setLogFilter'\n"
		"\n"
		":type fileSizeInKBytes: int\n"
		":param fileSizeInKBytes: The size (KB) of a log file. The default value is 1024 KB. If you set `fileSizeInKByte` to 1024 KB,\n"
		"    the SDK outputs at most 5 MB log files; if you set it to less than 1024 KB, the maximum size of a log file is still 1024 KB.\n"
		"\n"
		":rtype: int\n"
		":return: \n"
		"    - 0: Success.\n"
		"    - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setLocalRenderMode", _wrap_RtcEngineBridge_setLocalRenderMode, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"\n"
		"		     Deprecated: This method is deprecated, use the 'IRtcEngine::setLocalRenderMode(RENDER_MODE_TYPE' renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode) \"setLocalRenderMode\"2 method instead.\n"
		"		     Sets the local video display mode.\n"
		"\n"
		"		     This method can be called multiple times during a call to change the display mode.\n"
		"\n"
		"		     :type renderMode: int\n"
		":param renderMode:  Sets the local video display mode. See #RENDER_MODE_TYPE.\n"
		"    		 :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		" Updates the display mode of the local video view.\n"
		"\n"
		"		     Since: v3.0.0\n"
		"\n"
		"		     After initializing the local video view, you can call this method to update its rendering and mirror modes. It affects only the video view that the local user sees, not the published local video stream.\n"
		"\n"
		"		     Notes: \n"
		"		     - Ensure that you have called the 'setupLocalVideo' method to initialize the local video view before calling this method.\n"
		"		     - During a call, you can call this method as many times as necessary to update the display mode of the local video view.\n"
		"		     :type renderMode: int\n"
		":param renderMode: The rendering mode of the local video view. See #RENDER_MODE_TYPE.\n"
		"    		 :type mirrorMode: int\n"
		":param mirrorMode:\n"
		"    		     - The mirror mode of the local video view. See #VIDEO_MIRROR_MODE_TYPE.\n"
		"    		     - **Note**: If you use a front camera, the SDK enables the mirror mode by default; if you use a rear camera, the SDK disables the mirror mode by default.\n"
		"    		 :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setRemoteRenderMode", _wrap_RtcEngineBridge_setRemoteRenderMode, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"\n"
		"		     Deprecated: This method is deprecated, use the 'IRtcEngine::setRemoteRenderMode(uid_t' userId, RENDER_MODE_TYPE renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode) \"setRemoteRenderMode\"2 method instead.\n"
		"		     Sets the video display mode of a specified remote user.\n"
		"\n"
		"		     This method can be called multiple times during a call to change the display mode.\n"
		"\n"
		"		     :type userId: int\n"
		":param userId: ID of the remote user.\n"
		"    		 :type renderMode: int\n"
		":param renderMode:  Sets the video display mode. See #RENDER_MODE_TYPE.\n"
		"    		 :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		" Updates the display mode of the video view of a remote user.\n"
		"\n"
		"		     Since: v3.0.0\n"
		"		     After initializing the video view of a remote user, you can call this method to update its rendering and mirror modes. This method affects only the video view that the local user sees.\n"
		"\n"
		"		     Notes: \n"
		"		     - Ensure that you have called the 'setupRemoteVideo' method to initialize the remote video view before calling this method.\n"
		"		     - During a call, you can call this method as many times as necessary to update the display mode of the video view of a remote user.\n"
		"\n"
		"		     :type userId: int\n"
		":param userId: The ID of the remote user.\n"
		"    		 :type renderMode: int\n"
		":param renderMode: The rendering mode of the remote video view. See #RENDER_MODE_TYPE.\n"
		"    		 :type mirrorMode: int\n"
		":param mirrorMode:\n"
		"    		     - The mirror mode of the remote video view. See #VIDEO_MIRROR_MODE_TYPE.\n"
		"    		     - **Note**: The SDK disables the mirror mode by default.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setLocalVideoMirrorMode", _wrap_RtcEngineBridge_setLocalVideoMirrorMode, METH_VARARGS, "\n"
		"		     Deprecated: This method is deprecated, use the 'setupLocalVideo'\n"
		"		     or 'IRtcEngine::setLocalRenderMode(RENDER_MODE_TYPE' renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode) \"setLocalRenderMode\" method instead.\n"
		"\n"
		"		     Sets the local video mirror mode.\n"
		"\n"
		"		     You must call this method before calling the 'startPreview' method, otherwise the mirror mode will not work.\n"
		"\n"
		"		     Warning: \n"
		"		     - Call this method after calling the 'setupLocalVideo' method to initialize the local video view.\n"
		"		     - During a call, you can call this method as many times as necessary to update the mirror mode of the local video view.\n"
		"\n"
		"		     :type mirrorMode: int\n"
		":param mirrorMode: Sets the local video mirror mode. See #VIDEO_MIRROR_MODE_TYPE.\n"
		"    		 :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_enableDualStreamMode", _wrap_RtcEngineBridge_enableDualStreamMode, METH_VARARGS, "\n"
		" Sets the stream mode to the single-stream (default) or dual-stream mode. (`LIVE_BROADCASTING` only.)\n"
		"\n"
		"		     If the dual-stream mode is enabled, the receiver can choose to receive the high stream (high-resolution and high-bitrate video stream), or the low stream (low-resolution and low-bitrate video stream).\n"
		"\n"
		"		     :type enabled: boolean\n"
		":param enabled: Sets the stream mode:\n"
		"    		     - true: Dual-stream mode.\n"
		"    		     - false: Single-stream mode.\n"
		""},
	 { "RtcEngineBridge_adjustRecordingSignalVolume", _wrap_RtcEngineBridge_adjustRecordingSignalVolume, METH_VARARGS, "\n"
		" Adjusts the recording volume.\n"
		"\n"
		"		     :type volume: int\n"
		":param volume: Recording volume. To avoid echoes and\n"
		"    		     improve call quality, Agora recommends setting the value of volume between\n"
		"    		     0 and 100. If you need to set the value higher than 100, contact\n"
		"    		     support.io first.\n"
		"    		     - 0: Mute.\n"
		"    		     - 100: Original volume.\n"
		"\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_adjustPlaybackSignalVolume", _wrap_RtcEngineBridge_adjustPlaybackSignalVolume, METH_VARARGS, "\n"
		" Adjusts the playback volume of all remote users.\n"
		"\n"
		"		     Notes: \n"
		"		     - This method adjusts the playback volume that is the mixed volume of all remote users.\n"
		"		     - (Since v2.3.2) To mute the local audio playback, call both the `adjustPlaybackSignalVolume` and 'adjustAudioMixingVolume' methods and set the volume as `0`.\n"
		"\n"
		"		     :type volume: int\n"
		":param volume: The playback volume of all remote users. To avoid echoes and\n"
		"    		     improve call quality, Agora recommends setting the value of volume between\n"
		"    		     0 and 100. If you need to set the value higher than 100, contact\n"
		"    		     support.io first.\n"
		"    		     - 0: Mute.\n"
		"    		     - 100: Original volume.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_enableWebSdkInteroperability", _wrap_RtcEngineBridge_enableWebSdkInteroperability, METH_VARARGS, "\n"
		"		     Deprecated: This method is deprecated. As of v3.0.0, the Native SDK automatically enables interoperability with the Web SDK, so you no longer need to call this method.\n"
		"		     Enables interoperability with the Agora Web SDK.\n"
		"\n"
		"		     Notes: \n"
		"		     - This method applies only to the `LIVE_BROADCASTING` profile. In the `COMMUNICATION` profile, interoperability with the Agora Web SDK is enabled by default.\n"
		"		     - If the channel has Web SDK users, ensure that you call this method, or the video of the Native user will be a black screen for the Web user.\n"
		"\n"
		"		     :type enabled: boolean\n"
		":param enabled: Sets whether to enable/disable interoperability with the Agora Web SDK:\n"
		"    		     - true: Enable.\n"
		"    		     - false: (Default) Disable.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setVideoQualityParameters", _wrap_RtcEngineBridge_setVideoQualityParameters, METH_VARARGS, "\n"
		"DEPRECATED** Sets the preferences for the high-quality video. (`LIVE_BROADCASTING` only).\n"
		"\n"
		"		     This method is deprecated as of v2.4.0.\n"
		"\n"
		"		     :type preferFrameRateOverImageQuality: boolean\n"
		":param preferFrameRateOverImageQuality: Sets the video quality preference:\n"
		"    		     - true: Frame rate over image quality.\n"
		"    		     - false: (Default) Image quality over frame rate.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setLocalPublishFallbackOption", _wrap_RtcEngineBridge_setLocalPublishFallbackOption, METH_VARARGS, "\n"
		" Sets the fallback option for the published video stream based on the network conditions.\n"
		"\n"
		"		     If `option` is set as #STREAM_FALLBACK_OPTION_AUDIO_ONLY (2), the SDK will:\n"
		"\n"
		"		     - Disable the upstream video but enable audio only when the network conditions deteriorate and cannot support both video and audio.\n"
		"		     - Re-enable the video when the network conditions improve.\n"
		"\n"
		"		     When the published video stream falls back to audio only or when the audio-only stream switches back to the video, the SDK triggers the 'onLocalPublishFallbackToAudioOnly' callback.\n"
		"\n"
		"		     Notes: Agora does not recommend using this method for CDN live streaming, because the remote CDN live user will have a noticeable lag when the published video stream falls back to audio only.\n"
		"\n"
		"		     :type option: int\n"
		":param option: Sets the fallback option for the published video stream:\n"
		"    		     - #STREAM_FALLBACK_OPTION_DISABLED (0): (Default) No fallback behavior for the published video stream when the uplink network condition is poor. The stream quality is not guaranteed.\n"
		"    		     - #STREAM_FALLBACK_OPTION_AUDIO_ONLY (2): The published video stream falls back to audio only when the uplink network condition is poor.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setRemoteSubscribeFallbackOption", _wrap_RtcEngineBridge_setRemoteSubscribeFallbackOption, METH_VARARGS, "\n"
		" Sets the fallback option for the remotely subscribed video stream based on the network conditions.\n"
		"\n"
		"		     The default setting for `option` is #STREAM_FALLBACK_OPTION_VIDEO_STREAM_LOW (1), where the remotely subscribed video stream falls back to the low-stream video (low resolution and low bitrate) under poor downlink network conditions.\n"
		"\n"
		"		     If `option` is set as #STREAM_FALLBACK_OPTION_AUDIO_ONLY (2), the SDK automatically switches the video from a high-stream to a low-stream, or disables the video when the downlink network conditions cannot support both audio and video to guarantee the quality of the audio. The SDK monitors the network quality and restores the video stream when the network conditions improve.\n"
		"\n"
		"		     When the remotely subscribed video stream falls back to audio only or when the audio-only stream switches back to the video stream, the SDK triggers the 'onRemoteSubscribeFallbackToAudioOnly' callback.\n"
		"\n"
		"		     :type option: int\n"
		":param option:  Sets the fallback option for the remotely subscribed video stream. See #STREAM_FALLBACK_OPTIONS.\n"
		"    		 :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_rate", _wrap_RtcEngineBridge_rate, METH_VARARGS, "\n"
		" Allows a user to rate a call after the call ends.\n"
		"\n"
		"		     :type callId: string\n"
		":param callId: Pointer to the ID of the call, retrieved from the 'getCallId' method.\n"
		"    		 :type rating: int\n"
		":param rating:  Rating of the call. The value is between 1 (lowest score) and 5 (highest score). If you set a value out of this range, the #ERR_INVALID_ARGUMENT (2) error returns.\n"
		"    		 :type description: string\n"
		":param description: (Optional) Pointer to the description of the rating, with a string length of less than 800 bytes.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_complain", _wrap_RtcEngineBridge_complain, METH_VARARGS, "\n"
		" Allows a user to complain about the call quality after a call ends.\n"
		"\n"
		"		    :type callId: string\n"
		":param callId: Pointer to the ID of the call, retrieved from the 'getCallId' method.\n"
		"    		:type description: string\n"
		":param description: (Optional) Pointer to the description of the complaint, with a string length of less than 800 bytes.\n"
		"\n"
		"		    :rtype: int\n"
		":return: \n"
		"    		    - 0: Success.\n"
		"    		    - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_getVersion", _wrap_RtcEngineBridge_getVersion, METH_O, "\n"
		" Retrieves the SDK version number.\n"
		"\n"
		"		     :param build: Pointer to the build number.\n"
		"    		 :rtype: string\n"
		":return: The version of the current SDK in the string format. For example, 2.3.1.\n"
		""},
	 { "RtcEngineBridge_enableLastmileTest", _wrap_RtcEngineBridge_enableLastmileTest, METH_O, "\n"
		"  Enables the network connection quality test.\n"
		"\n"
		"		     This method tests the quality of the users' network connections and is disabled by default.\n"
		"\n"
		"		     Before a user joins a channel or before an audience switches to a host, call this method to check the uplink network quality.\n"
		"\n"
		"		     This method consumes additional network traffic, and hence may affect communication quality.\n"
		"\n"
		"		     Call the 'disableLastmileTest' method to disable this test after receiving the 'onLastmileQuality' callback, and before joining a channel.\n"
		"\n"
		"		     Notes: \n"
		"		     - Do not call any other methods before receiving the 'onLastmileQuality' callback. Otherwise, the callback may be interrupted by other methods, and hence may not be triggered.\n"
		"		     - A host should not call this method after joining a channel (when in a call).\n"
		"		     - If you call this method to test the last-mile quality, the SDK consumes the bandwidth of a video stream, whose bitrate corresponds to the bitrate you set in the 'setVideoEncoderConfiguration' method. After you join the channel, whether you have called the `disableLastmileTest` method or not, the SDK automatically stops consuming the bandwidth.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_disableLastmileTest", _wrap_RtcEngineBridge_disableLastmileTest, METH_O, "\n"
		" Disables the network connection quality test.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_startLastmileProbeTest", _wrap_RtcEngineBridge_startLastmileProbeTest, METH_VARARGS, "\n"
		" Starts the last-mile network probe test.\n"
		"\n"
		"		     This method starts the last-mile network probe test before joining a channel to get the uplink and downlink last-mile network statistics, including the bandwidth, packet loss, jitter, and round-trip time (RTT).\n"
		"\n"
		"		     Call this method to check the uplink network quality before users join a channel or before an audience switches to a host.\n"
		"		     Once this method is enabled, the SDK returns the following callbacks:\n"
		"		     - 'onLastmileQuality': the SDK triggers this callback within two seconds depending on the network conditions. This callback rates the network conditions and is more closely linked to the user experience.\n"
		"		     - 'onLastmileProbeResult': the SDK triggers this callback within 30 seconds depending on the network conditions. This callback returns the real-time statistics of the network conditions and is more objective.\n"
		"\n"
		"		     Notes: \n"
		"		     - This method consumes extra network traffic and may affect communication quality. We do not recommend calling this method together with enableLastmileTest.\n"
		"		     - Do not call other methods before receiving the 'onLastmileQuality' and 'onLastmileProbeResult' callbacks. Otherwise, the callbacks may be interrupted.\n"
		"		     - In the `LIVE_BROADCASTING` profile, a host should not call this method after joining a channel.\n"
		"\n"
		"		     :type config: :py:class:`LastmileProbeConfig`\n"
		":param config: Sets the configurations of the last-mile network probe test. See LastmileProbeConfig.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_stopLastmileProbeTest", _wrap_RtcEngineBridge_stopLastmileProbeTest, METH_O, " Stops the last-mile network probe test."},
	 { "RtcEngineBridge_getErrorDescription", _wrap_RtcEngineBridge_getErrorDescription, METH_VARARGS, "\n"
		" Retrieves the warning or error description.\n"
		"\n"
		"		     :type code: int\n"
		":param code: Warning code or error code returned in the 'onWarning' or 'onError' callback.\n"
		"\n"
		"		     :rtype: string\n"
		":return: #WARN_CODE_TYPE or #ERROR_CODE_TYPE.\n"
		""},
	 { "RtcEngineBridge_setEncryptionSecret", _wrap_RtcEngineBridge_setEncryptionSecret, METH_VARARGS, "\n"
		"DEPRECATED** Enables built-in encryption with an encryption password before users join a channel.\n"
		"\n"
		"		     Deprecated as of v3.1.0. Use the 'enableEncryption' instead.\n"
		"\n"
		"		     All users in a channel must use the same encryption password. The encryption password is automatically cleared once a user leaves the channel.\n"
		"\n"
		"		     If an encryption password is not specified, the encryption functionality will be disabled.\n"
		"\n"
		"		     Notes: \n"
		"		     - Do not use this method for CDN live streaming.\n"
		"		     - For optimal transmission, ensure that the encrypted data size does not exceed the original data size + 16 bytes. 16 bytes is the maximum padding size for AES encryption.\n"
		"\n"
		"		     :type secret: string\n"
		":param secret: Pointer to the encryption password.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setEncryptionMode", _wrap_RtcEngineBridge_setEncryptionMode, METH_VARARGS, "\n"
		"DEPRECATED** Sets the built-in encryption mode.\n"
		"\n"
		"		     Deprecated: Deprecated as of v3.1.0. Use the 'enableEncryption' instead.\n"
		"\n"
		"		     The Agora SDK supports built-in encryption, which is set to the ``aes-128-xts`` mode by default. Call this method to use other encryption modes.\n"
		"\n"
		"		     All users in the same channel must use the same encryption mode and password.\n"
		"\n"
		"		     Refer to the information related to the AES encryption algorithm on the differences between the encryption modes.\n"
		"\n"
		"		     Notes: Call the 'setEncryptionSecret' method to enable the built-in encryption function before calling this method.\n"
		"\n"
		"		     :type encryptionMode: string\n"
		":param encryptionMode: Pointer to the set encryption mode:\n"
		"    		     - \"aes-128-xts\": (Default) 128-bit AES encryption, XTS mode.\n"
		"    		     - \"aes-128-ecb\": 128-bit AES encryption, ECB mode.\n"
		"    		     - \"aes-256-xts\": 256-bit AES encryption, XTS mode.\n"
		"    		     - \"\": When encryptionMode is set as NULL, the encryption mode is set as \"aes-128-xts\" by default.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_registerPacketObserver", _wrap_RtcEngineBridge_registerPacketObserver, METH_VARARGS, "\n"
		" Registers a packet observer.\n"
		"\n"
		"		     The Agora SDK allows your application to register a packet observer to receive callbacks for voice or video packet transmission.\n"
		"\n"
		"		     Notes: \n"
		"		     - The size of the packet sent to the network after processing should not exceed 1200 bytes, otherwise, the packet may fail to be sent.\n"
		"		     - Ensure that both receivers and senders call this method, otherwise, you may meet undefined behaviors such as no voice and black screen.\n"
		"		     - When you use CDN live streaming, recording or storage functions, Agora doesn't recommend calling this method.\n"
		"\n"
		"		     :type observer: agora::rtc::IPacketObserver\n"
		":param observer: Pointer to the registered packet observer. See IPacketObserver.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_createDataStream", _wrap_RtcEngineBridge_createDataStream, METH_VARARGS, "\n"
		" Creates a data stream.\n"
		"\n"
		"		     Each user can create up to five data streams during the lifecycle of the IRtcEngine.\n"
		"\n"
		"		     Notes: Set both the ``reliable`` and ``ordered`` parameters to true or false. Do not set one as true and the other as false.\n"
		"\n"
		"		     :type streamId: int\n"
		":param streamId: Pointer to the ID of the created data stream.\n"
		"    		 :type reliable: boolean\n"
		":param reliable: Sets whether or not the recipients are guaranteed to receive the data stream from the sender within five seconds:\n"
		"    		     - true: The recipients receive the data stream from the sender within five seconds. If the recipient does not receive the data stream within five seconds, an error is reported to the application.\n"
		"    		     - false: There is no guarantee that the recipients receive the data stream within five seconds and no error message is reported for any delay or missing data stream.\n"
		"    		 :type ordered: boolean\n"
		":param ordered: Sets whether or not the recipients receive the data stream in the sent order:\n"
		"    		     - true: The recipients receive the data stream in the sent order.\n"
		"    		     - false: The recipients do not receive the data stream in the sent order.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_sendStreamMessage", _wrap_RtcEngineBridge_sendStreamMessage, METH_VARARGS, "\n"
		" Sends data stream messages to all users in a channel.\n"
		"\n"
		"		     The SDK has the following restrictions on this method:\n"
		"		     - Up to 30 packets can be sent per second in a channel with each packet having a maximum size of 1 kB.\n"
		"		     - Each client can send up to 6 kB of data per second.\n"
		"		     - Each user can have up to five data streams simultaneously.\n"
		"\n"
		"		     A successful 'sendStreamMessage' method call triggers the\n"
		"		     'onStreamMessage' callback on the remote client, from which the remote user gets the stream message.\n"
		"\n"
		"		     A failed 'sendStreamMessage' method call triggers the\n"
		"		      'onStreamMessage' callback on the remote client.\n"
		"		     Notes: This method applies only to the `COMMUNICATION` profile or to the hosts in the `LIVE_BROADCASTING` profile. If an audience in the `LIVE_BROADCASTING` profile calls this method, the audience may be switched to a host.\n"
		"		     :type streamId: int\n"
		":param streamId:  ID of the sent data stream, returned in the 'createDataStream' method.\n"
		"    		 :type data: string\n"
		":param data: Pointer to the sent data.\n"
		"    		 :type length: int\n"
		":param length: Length of the sent data.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_addPublishStreamUrl", _wrap_RtcEngineBridge_addPublishStreamUrl, METH_VARARGS, "\n"
		" Publishes the local stream to a specified CDN live RTMP address.  (CDN live only.)\n"
		"\n"
		"		     The SDK returns the result of this method call in the 'onStreamPublished' callback.\n"
		"\n"
		"		     The 'addPublishStreamUrl' method call triggers the 'onRtmpStreamingStateChanged' callback on the local client to report the state of adding a local stream to the CDN.\n"
		"		     Notes: \n"
		"		     - Ensure that the user joins the channel before calling this method.\n"
		"		     - Ensure that you enable the RTMP Converter service before using this function. See  *Prerequisites* in the advanced guide *Push Streams to CDN*.\n"
		"		     - This method adds only one stream RTMP URL address each time it is called.\n"
		"		     - This method applies to `LIVE_BROADCASTING` only.\n"
		"\n"
		"		     :type url: string\n"
		":param url: The CDN streaming URL in the RTMP format. The maximum length of this parameter is 1024 bytes. The RTMP URL address must not contain special characters, such as Chinese language characters.\n"
		"    		 :type transcodingEnabled: boolean\n"
		":param transcodingEnabled: Sets whether transcoding is enabled/disabled:\n"
		"    		     - true: Enable transcoding. To [transcode](https://docs.agora.io/en/Agora%20Platform/terms?platform=All%20Platforms#transcoding) the audio or video streams when publishing them to CDN live, often used for combining the audio and video streams of multiple hosts in CDN live. If you set this parameter as `true`, ensure that you call the 'setLiveTranscoding' method before this method.\n"
		"    		     - false: Disable transcoding.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		"    		          - #ERR_INVALID_ARGUMENT (2): The RTMP URL address is NULL or has a string length of 0.\n"
		"    		          - #ERR_NOT_INITIALIZED (7): You have not initialized the RTC engine when publishing the stream.\n"
		""},
	 { "RtcEngineBridge_removePublishStreamUrl", _wrap_RtcEngineBridge_removePublishStreamUrl, METH_VARARGS, "\n"
		" Removes an RTMP stream from the CDN. (CDN live only.)\n"
		"\n"
		"		     This method removes the RTMP URL address (added by the 'addPublishStreamUrl' method) from a CDN live stream. The SDK returns the result of this method call in the 'onStreamUnpublished' callback.\n"
		"\n"
		"		     The 'removePublishStreamUrl' method call triggers the 'onRtmpStreamingStateChanged' callback on the local client to report the state of removing an RTMP stream from the CDN.\n"
		"		     Notes: \n"
		"		     - This method removes only one RTMP URL address each time it is called.\n"
		"		     - The RTMP URL address must not contain special characters, such as Chinese language characters.\n"
		"		     - This method applies to `LIVE_BROADCASTING` only.\n"
		"\n"
		"		     :type url: string\n"
		":param url: The RTMP URL address to be removed. The maximum length of this parameter is 1024 bytes.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setLiveTranscoding", _wrap_RtcEngineBridge_setLiveTranscoding, METH_VARARGS, "\n"
		" Sets the video layout and audio settings for CDN live. (CDN live only.)\n"
		"\n"
		"		     The SDK triggers the 'onTranscodingUpdated' callback when you call the `setLiveTranscoding` method to update the transcoding setting.\n"
		"\n"
		"		     Notes: \n"
		"		     - This method applies to `LIVE_BROADCASTING` only.\n"
		"		     - Ensure that you enable the RTMP Converter service before using this function. See *Prerequisites* in the advanced guide *Push Streams to CDN*.\n"
		"		     - If you call the `setLiveTranscoding` method to update the transcoding setting for the first time, the SDK does not trigger the `onTranscodingUpdated` callback.\n"
		"\n"
		"		     :type transcoding: :py:class:`LiveTranscoding`\n"
		":param transcoding: Sets the CDN live audio/video transcoding settings. See LiveTranscoding.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_addVideoWatermark", _wrap_RtcEngineBridge_addVideoWatermark, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"DEPRECATED** Adds a watermark image to the local video or CDN live stream.\n"
		"\n"
		"		     This method is deprecated from v2.9.1. Use 'agora::rtc::IRtcEngine::addVideoWatermark(const' char* watermarkUrl, const WatermarkOptions& options) \"addVideoWatermark\"2 instead.\n"
		"\n"
		"		     This method adds a PNG watermark image to the local video stream for the recording device, channel audience, and CDN live audience to view and capture.\n"
		"\n"
		"		     To add the PNG file to the CDN live publishing stream, see the 'setLiveTranscoding' method.\n"
		"\n"
		"		     :type watermark: :py:class:`RtcImage`\n"
		":param watermark: Pointer to the watermark image to be added to the local video stream. See RtcImage.\n"
		"\n"
		"		     Notes: \n"
		"		     - The URL descriptions are different for the local video and CDN live streams:\n"
		"		        - In a local video stream, `url` in RtcImage refers to the absolute path of the added watermark image file in the local video stream.\n"
		"		        - In a CDN live stream, `url` in RtcImage refers to the URL address of the added watermark image in the CDN live streaming.\n"
		"		     - The source file of the watermark image must be in the PNG file format. If the width and height of the PNG file differ from your settings in this method, the PNG file will be cropped to conform to your settings.\n"
		"		     - The Agora SDK supports adding only one watermark image onto a local video or CDN live stream. The newly added watermark image replaces the previous one.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		" Adds a watermark image to the local video.\n"
		"\n"
		"		     This method adds a PNG watermark image to the local video in the live streaming. Once the watermark image is added, all the audience in the channel (CDN audience included),\n"
		"		     and the recording device can see and capture it. Agora supports adding only one watermark image onto the local video, and the newly watermark image replaces the previous one.\n"
		"\n"
		"		     The watermark position depends on the settings in the 'setVideoEncoderConfiguration' method:\n"
		"		     - If the orientation mode of the encoding video is #ORIENTATION_MODE_FIXED_LANDSCAPE, or the landscape mode in #ORIENTATION_MODE_ADAPTIVE, the watermark uses the landscape orientation.\n"
		"		     - If the orientation mode of the encoding video is #ORIENTATION_MODE_FIXED_PORTRAIT, or the portrait mode in #ORIENTATION_MODE_ADAPTIVE, the watermark uses the portrait orientation.\n"
		"		     - When setting the watermark position, the region must be less than the dimensions set in the `setVideoEncoderConfiguration` method. Otherwise, the watermark image will be cropped.\n"
		"\n"
		"		     Notes: \n"
		"		     - Ensure that you have called the 'enableVideo' method to enable the video module before calling this method.\n"
		"		     - If you only want to add a watermark image to the local video for the audience in the CDN live streaming channel to see and capture, you can call this method or the 'setLiveTranscoding' method.\n"
		"		     - This method supports adding a watermark image in the PNG file format only. Supported pixel formats of the PNG image are RGBA, RGB, Palette, Gray, and Alpha_gray.\n"
		"		     - If the dimensions of the PNG image differ from your settings in this method, the image will be cropped or zoomed to conform to your settings.\n"
		"		     - If you have enabled the local video preview by calling the 'startPreview' method, you can use the `visibleInPreview` member in the WatermarkOptions class to set whether or not the watermark is visible in preview.\n"
		"		     - If you have enabled the mirror mode for the local video, the watermark on the local video is also mirrored. To avoid mirroring the watermark, Agora recommends that you do not use the mirror and watermark functions for the local video at the same time. You can implement the watermark function in your application layer.\n"
		"\n"
		"		     :type watermarkUrl: string\n"
		":param watermarkUrl: The local file path of the watermark image to be added. This method supports adding a watermark image from the local absolute or relative file path.\n"
		"    		 :type options: :py:class:`WatermarkOptions`\n"
		":param options: Pointer to the watermark's options to be added. See WatermarkOptions for more infomation.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_clearVideoWatermarks", _wrap_RtcEngineBridge_clearVideoWatermarks, METH_O, "\n"
		" Removes the watermark image from the video stream added by the 'agora::rtc::IRtcEngine::addVideoWatermark(const' char* watermarkUrl, const WatermarkOptions& options) \"addVideoWatermark\" method.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setBeautyEffectOptions", _wrap_RtcEngineBridge_setBeautyEffectOptions, METH_VARARGS, "\n"
		" Since: v3.0.0\n"
		"\n"
		"		     Enables/Disables image enhancement and sets the options.\n"
		"\n"
		"		    Notes: \n"
		"		    - Call this method after calling the enableVideo method.\n"
		"		    - Currently this method does not apply for macOS.\n"
		"\n"
		"		    :type enabled: boolean\n"
		":param enabled: Sets whether or not to enable image enhancement:\n"
		"    		    - true: enables image enhancement.\n"
		"    		    - false: disables image enhancement.\n"
		"    		:type options: :py:class:`BeautyOptions`\n"
		":param options: Sets the image enhancement option. See BeautyOptions.\n"
		""},
	 { "RtcEngineBridge_addInjectStreamUrl", _wrap_RtcEngineBridge_addInjectStreamUrl, METH_VARARGS, "\n"
		" Adds a voice or video stream URL address to the live streaming.\n"
		"\n"
		"		    The 'onStreamPublished' callback returns the inject status. If this method call is successful, the server pulls the voice or video stream and injects it into a live channel. This is applicable to scenarios where all audience members in the channel can watch a live show and interact with each other.\n"
		"\n"
		"		     The 'addInjectStreamUrl' method call triggers the following callbacks:\n"
		"		    - The local client:\n"
		"		      - 'onStreamInjectedStatus' , with the state of the injecting the online stream.\n"
		"		      - 'onUserJoined' (uid: 666), if the method call is successful and the online media stream is injected into the channel.\n"
		"		    - The remote client:\n"
		"		      - 'onUserJoined' (uid: 666), if the method call is successful and the online media stream is injected into the channel.\n"
		"\n"
		"		     Notes: \n"
		"		     - Ensure that you enable the RTMP Converter service before using this function. See *Prerequisites* in the advanced guide *Push Streams to CDN*.\n"
		"		     - This method applies to the Native SDK v2.4.1 and later.\n"
		"		     - This method applies to the `LIVE_BROADCASTING` profile only.\n"
		"		     - You can inject only one media stream into the channel at the same time.\n"
		"\n"
		"		     :type url: string\n"
		":param url: Pointer to the URL address to be added to the ongoing streaming. Valid protocols are RTMP, HLS, and HTTP-FLV.\n"
		"    		     - Supported audio codec type: AAC.\n"
		"    		     - Supported video codec type: H264 (AVC).\n"
		"    		 :type config: :py:class:`InjectStreamConfig`\n"
		":param config: Pointer to the InjectStreamConfig object that contains the configuration of the added voice or video stream.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		"    		        - #ERR_INVALID_ARGUMENT (2): The injected URL does not exist. Call this method again to inject the stream and ensure that the URL is valid.\n"
		"    		        - #ERR_NOT_READY (3): The user is not in the channel.\n"
		"    		        - #ERR_NOT_SUPPORTED (4): The channel profile is not `LIVE_BROADCASTING`. Call the 'setChannelProfile' method and set the channel profile to `LIVE_BROADCASTING` before calling this method.\n"
		"    		        - #ERR_NOT_INITIALIZED (7): The SDK is not initialized. Ensure that the IRtcEngine object is initialized before calling this method.\n"
		""},
	 { "RtcEngineBridge_startChannelMediaRelay", _wrap_RtcEngineBridge_startChannelMediaRelay, METH_VARARGS, "\n"
		" Starts to relay media streams across channels.\n"
		"\n"
		"After a successful method call, the SDK triggers the\n"
		"'agora::rtc::IRtcEngineEventHandler::onChannelMediaRelayStateChanged'\n"
		" \"onChannelMediaRelayStateChanged\" and\n"
		"'agora::rtc::IRtcEngineEventHandler::onChannelMediaRelayEvent'\n"
		"\"onChannelMediaRelayEvent\" callbacks, and these callbacks return the\n"
		"state and events of the media stream relay.\n"
		"- If the\n"
		"'agora::rtc::IRtcEngineEventHandler::onChannelMediaRelayStateChanged'\n"
		" \"onChannelMediaRelayStateChanged\" callback returns\n"
		"#RELAY_STATE_RUNNING (2) and #RELAY_OK (0), and the\n"
		"'agora::rtc::IRtcEngineEventHandler::onChannelMediaRelayEvent'\n"
		"\"onChannelMediaRelayEvent\" callback returns\n"
		"#RELAY_EVENT_PACKET_SENT_TO_DEST_CHANNEL (4), the host starts\n"
		"sending data to the destination channel.\n"
		"- If the\n"
		"'agora::rtc::IRtcEngineEventHandler::onChannelMediaRelayStateChanged'\n"
		" \"onChannelMediaRelayStateChanged\" callback returns\n"
		"#RELAY_STATE_FAILURE (3), an exception occurs during the media stream\n"
		"relay.\n"
		"\n"
		"Notes: \n"
		"- Call this method after the 'joinChannel' method.\n"
		"- This method takes effect only when you are a host in a\n"
		"`LIVE_BROADCASTING` channel.\n"
		"- After a successful method call, if you want to call this method\n"
		"again, ensure that you call the\n"
		"'stopChannelMediaRelay' method to quit the\n"
		"current relay.\n"
		"- Contact sales-us.io before implementing this function.\n"
		"- We do not support string user accounts in this API.\n"
		"\n"
		":type configuration: :py:class:`ChannelMediaRelayConfiguration`\n"
		":param configuration: The configuration of the media stream relay:\n"
		"    ChannelMediaRelayConfiguration.\n"
		"\n"
		":rtype: int\n"
		":return: \n"
		"    - 0: Success.\n"
		"    - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_updateChannelMediaRelay", _wrap_RtcEngineBridge_updateChannelMediaRelay, METH_VARARGS, "\n"
		" Updates the channels for media stream relay. After a successful\n"
		"'startChannelMediaRelay' method call, if\n"
		"you want to relay the media stream to more channels, or leave the\n"
		"current relay channel, you can call the\n"
		"'updateChannelMediaRelay' method.\n"
		"\n"
		"After a successful method call, the SDK triggers the\n"
		"'agora::rtc::IRtcEngineEventHandler::onChannelMediaRelayEvent'\n"
		" \"onChannelMediaRelayEvent\" callback with the\n"
		"#RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL (7) state code.\n"
		"\n"
		"Notes: \n"
		"Call this method after the\n"
		"'startChannelMediaRelay' method to update\n"
		"the destination channel.\n"
		"\n"
		":type configuration: :py:class:`ChannelMediaRelayConfiguration`\n"
		":param configuration: The media stream relay configuration:\n"
		"    ChannelMediaRelayConfiguration.\n"
		"\n"
		":rtype: int\n"
		":return: \n"
		"    - 0: Success.\n"
		"    - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_stopChannelMediaRelay", _wrap_RtcEngineBridge_stopChannelMediaRelay, METH_O, "\n"
		" Stops the media stream relay.\n"
		"\n"
		"Once the relay stops, the host quits all the destination\n"
		"channels.\n"
		"\n"
		"After a successful method call, the SDK triggers the\n"
		"'agora::rtc::IRtcEngineEventHandler::onChannelMediaRelayStateChanged'\n"
		" \"onChannelMediaRelayStateChanged\" callback. If the callback returns\n"
		"#RELAY_STATE_IDLE (0) and #RELAY_OK (0), the host successfully\n"
		"stops the relay.\n"
		"\n"
		"Notes: \n"
		"If the method call fails, the SDK triggers the\n"
		"'agora::rtc::IRtcEngineEventHandler::onChannelMediaRelayStateChanged'\n"
		" \"onChannelMediaRelayStateChanged\" callback with the\n"
		"#RELAY_ERROR_SERVER_NO_RESPONSE (2) or\n"
		"#RELAY_ERROR_SERVER_CONNECTION_LOST (8) state code. You can leave the\n"
		"channel by calling the 'leaveChannel' method, and\n"
		"the media stream relay automatically stops.\n"
		"\n"
		":rtype: int\n"
		":return: \n"
		"    - 0: Success.\n"
		"    - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_removeInjectStreamUrl", _wrap_RtcEngineBridge_removeInjectStreamUrl, METH_VARARGS, "\n"
		" Removes the voice or video stream URL address from the live streaming.\n"
		"\n"
		"		     This method removes the URL address (added by the 'addInjectStreamUrl' method) from the live streaming.\n"
		"\n"
		"		     Notes: If this method is called successfully, the SDK triggers the 'onUserOffline' callback and returns a stream uid of 666.\n"
		"\n"
		"		     :type url: string\n"
		":param url: Pointer to the URL address of the injected stream to be removed.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_getConnectionState", _wrap_RtcEngineBridge_getConnectionState, METH_O, "\n"
		" Gets the current connection state of the SDK.\n"
		"\n"
		"		     :rtype: int\n"
		":return: #CONNECTION_STATE_TYPE.\n"
		""},
	 { "RtcEngineBridge_setParameters", _wrap_RtcEngineBridge_setParameters, METH_VARARGS, "\n"
		" Provides technical preview functionalities or special customizations by configuring the SDK with JSON options.\n"
		"\n"
		"		     The JSON options are not public by default. Agora is working on making commonly used JSON options public in a standard way.\n"
		"\n"
		"		     :type parameters: string\n"
		":param parameters: Sets the parameter as a JSON string in the specified format.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setPlaybackDeviceVolume", _wrap_RtcEngineBridge_setPlaybackDeviceVolume, METH_VARARGS, "\n"
		" Sets the volume of the audio playback device.\n"
		"\n"
		"		     :type volume: int\n"
		":param volume: Sets the volume of the audio playback device. The value ranges between 0 (lowest volume) and 255 (highest volume).\n"
		"    		 :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_startAudioMixing", _wrap_RtcEngineBridge_startAudioMixing, METH_VARARGS, "\n"
		" Starts playing and mixing the music file.\n"
		"\n"
		"		     This method mixes the specified local audio file with the audio stream from the microphone, or replaces the microphone's audio stream with the specified local audio file. You can choose whether the other user can hear the local audio playback and specify the number of playback loops. This method also supports online music playback.\n"
		"\n"
		"		     When the audio mixing file playback finishes after calling this method, the SDK triggers the 'onAudioMixingFinished' callback.\n"
		"\n"
		"		     A successful 'startAudioMixing' method call triggers the 'onAudioMixingStateChanged' (PLAY) callback on the local client.\n"
		"\n"
		"		     When the audio mixing file playback finishes, the SDK triggers the 'onAudioMixingStateChanged' (STOPPED) callback on the local client.\n"
		"		     Notes: \n"
		"		     - Call this method after joining a channel, otherwise issues may occur.\n"
		"		     - If the local audio mixing file does not exist, or if the SDK does not support the file format or cannot access the music file URL, the SDK returns WARN_AUDIO_MIXING_OPEN_ERROR = 701.\n"
		"		     - If you want to play an online music file, ensure that the time interval between calling this method is more than 100 ms, or the AUDIO_MIXING_ERROR_TOO_FREQUENT_CALL(702) error code occurs.\n"
		"		     :type filePath: string\n"
		":param filePath: Pointer to the absolute path (including the suffixes of the filename) of the local or online audio file to mix, for example, c:/music/audio.mp4. Supported audio formats: 3GP, ASF, ADTS, AVI, MP3, MP4, MPEG-4, SAMI, and WAVE. For more information, see [Supported Media Formats in Media Foundation](https://docs.microsoft.com/en-us/windows/desktop/medfound/supported-media-formats-in-media-foundation).\n"
		"    		 :type loopback: boolean\n"
		":param loopback: Sets which user can hear the audio mixing:\n"
		"    		     - true: Only the local user can hear the audio mixing.\n"
		"    		     - false: Both users can hear the audio mixing.\n"
		"    		 :type replace: boolean\n"
		":param replace: Sets the audio mixing content:\n"
		"    		     - true: Only publish the specified audio file. The audio stream from the microphone is not published.\n"
		"    		     - false: The local audio file is mixed with the audio stream from the microphone.\n"
		"    		 :type cycle: int\n"
		":param cycle: Sets the number of playback loops:\n"
		"    		     - Positive integer: Number of playback loops.\n"
		"    		     - `-1`: Infinite playback loops.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_stopAudioMixing", _wrap_RtcEngineBridge_stopAudioMixing, METH_O, "\n"
		" Stops playing and mixing the music file.\n"
		"\n"
		"		     Call this method when you are in a channel.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_pauseAudioMixing", _wrap_RtcEngineBridge_pauseAudioMixing, METH_O, "\n"
		" Pauses playing and mixing the music file.\n"
		"\n"
		"		     Call this method when you are in a channel.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_resumeAudioMixing", _wrap_RtcEngineBridge_resumeAudioMixing, METH_O, "\n"
		" Resumes playing and mixing the music file.\n"
		"\n"
		"		     Call this method when you are in a channel.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setHighQualityAudioParameters", _wrap_RtcEngineBridge_setHighQualityAudioParameters, METH_VARARGS, "\n"
		"DEPRECATED** Agora does not recommend using this method.\n"
		"\n"
		"		     Sets the high-quality audio preferences. Call this method and set all parameters before joining a channel.\n"
		"\n"
		"		     Do not call this method again after joining a channel.\n"
		"\n"
		"		     :type fullband: boolean\n"
		":param fullband: Sets whether to enable/disable full-band codec (48-kHz sample rate). Not compatible with SDK versions before v1.7.4:\n"
		"    		     - true: Enable full-band codec.\n"
		"    		     - false: Disable full-band codec.\n"
		"    		 :type stereo: boolean\n"
		":param stereo: Sets whether to enable/disable stereo codec. Not compatible with SDK versions before v1.7.4:\n"
		"    		     - true: Enable stereo codec.\n"
		"    		     - false: Disable stereo codec.\n"
		"    		 :type fullBitrate: boolean\n"
		":param fullBitrate: Sets whether to enable/disable high-bitrate mode. Recommended in voice-only mode:\n"
		"    		     - true: Enable high-bitrate mode.\n"
		"    		     - false: Disable high-bitrate mode.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_adjustAudioMixingVolume", _wrap_RtcEngineBridge_adjustAudioMixingVolume, METH_VARARGS, "\n"
		" Adjusts the volume during audio mixing.\n"
		"\n"
		"		     Call this method when you are in a channel.\n"
		"\n"
		"		     Notes: Calling this method does not affect the volume of audio effect file playback invoked by the 'playEffect' method.\n"
		"\n"
		"		     :type volume: int\n"
		":param volume: Audio mixing volume. The value ranges between 0 and 100 (default).\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_adjustAudioMixingPlayoutVolume", _wrap_RtcEngineBridge_adjustAudioMixingPlayoutVolume, METH_VARARGS, "\n"
		" Adjusts the audio mixing volume for local playback.\n"
		"\n"
		"		     Notes: Call this method when you are in a channel.\n"
		"\n"
		"		     :type volume: int\n"
		":param volume: Audio mixing volume for local playback. The value ranges between 0 and 100 (default).\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_getAudioMixingPlayoutVolume", _wrap_RtcEngineBridge_getAudioMixingPlayoutVolume, METH_O, "\n"
		" Retrieves the audio mixing volume for local playback.\n"
		"\n"
		"		     This method helps troubleshoot audio volume related issues.\n"
		"\n"
		"		     Notes: Call this method when you are in a channel.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - >= 0: The audio mixing volume, if this method call succeeds. The value range is [0,100].\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_adjustAudioMixingPublishVolume", _wrap_RtcEngineBridge_adjustAudioMixingPublishVolume, METH_VARARGS, "\n"
		" Adjusts the audio mixing volume for publishing (for remote users).\n"
		"\n"
		"		     Notes: Call this method when you are in a channel.\n"
		"\n"
		"		     :type volume: int\n"
		":param volume: Audio mixing volume for publishing. The value ranges between 0 and 100 (default).\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_getAudioMixingPublishVolume", _wrap_RtcEngineBridge_getAudioMixingPublishVolume, METH_O, "\n"
		" Retrieves the audio mixing volume for publishing.\n"
		"\n"
		"		     This method helps troubleshoot audio volume related issues.\n"
		"\n"
		"		     Notes: Call this method when you are in a channel.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - >= 0: The audio mixing volume for publishing, if this method call succeeds. The value range is [0,100].\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_getAudioMixingDuration", _wrap_RtcEngineBridge_getAudioMixingDuration, METH_O, "\n"
		" Retrieves the duration (ms) of the music file.\n"
		"\n"
		"		     Call this method when you are in a channel.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - >= 0: The audio mixing duration, if this method call succeeds.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_getAudioMixingCurrentPosition", _wrap_RtcEngineBridge_getAudioMixingCurrentPosition, METH_O, "\n"
		" Retrieves the playback position (ms) of the music file.\n"
		"\n"
		"		     Call this method when you are in a channel.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - >= 0: The current playback position of the audio mixing, if this method call succeeds.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setAudioMixingPosition", _wrap_RtcEngineBridge_setAudioMixingPosition, METH_VARARGS, "\n"
		" Sets the playback position of the music file to a different starting position (the default plays from the beginning).\n"
		"\n"
		"		     :type pos: int\n"
		":param pos: The playback starting position (ms) of the music file.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setAudioMixingPitch", _wrap_RtcEngineBridge_setAudioMixingPitch, METH_VARARGS, "\n"
		" Sets the pitch of the local music file.\n"
		"Since: v3.0.1\n"
		"\n"
		"When a local music file is mixed with a local human voice, call this method to set the pitch of the local music file only.\n"
		"\n"
		"Notes: \n"
		"Call this method after calling `startAudioMixing`.\n"
		"\n"
		":type pitch: int\n"
		":param pitch: Sets the pitch of the local music file by chromatic scale. The default value is 0,\n"
		"    which means keeping the original pitch. The value ranges from -12 to 12, and the pitch value between\n"
		"    consecutive values is a chromatic value. The greater the absolute value of this parameter, the\n"
		"    higher or lower the pitch of the local music file.\n"
		"\n"
		":rtype: int\n"
		":return: \n"
		"    - 0: Success.\n"
		"    - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_getEffectsVolume", _wrap_RtcEngineBridge_getEffectsVolume, METH_O, "\n"
		" Retrieves the volume of the audio effects.\n"
		"\n"
		"		     The value ranges between 0.0 and 100.0.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - >= 0: Volume of the audio effects, if this method call succeeds.\n"
		"\n"
		"		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setEffectsVolume", _wrap_RtcEngineBridge_setEffectsVolume, METH_VARARGS, "\n"
		" Sets the volume of the audio effects.\n"
		"\n"
		"		     :type volume: int\n"
		":param volume: Sets the volume of the audio effects. The value ranges between 0 and 100 (default).\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setVolumeOfEffect", _wrap_RtcEngineBridge_setVolumeOfEffect, METH_VARARGS, "\n"
		" Sets the volume of a specified audio effect.\n"
		"\n"
		"		     :type soundId: int\n"
		":param soundId: ID of the audio effect. Each audio effect has a unique ID.\n"
		"    		 :type volume: int\n"
		":param volume: Sets the volume of the specified audio effect. The value ranges between 0 and 100 (default).\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_playEffect", _wrap_RtcEngineBridge_playEffect, METH_VARARGS, "\n"
		" Plays a specified local or online audio effect file.\n"
		"\n"
		"		     This method allows you to set the loop count, pitch, pan, and gain of the audio effect file, as well as whether the remote user can hear the audio effect.\n"
		"\n"
		"		     To play multiple audio effect files simultaneously, call this method multiple times with different soundIds and filePaths. We recommend playing no more than three audio effect files at the same time.\n"
		"\n"
		"		     :type soundId: int\n"
		":param soundId: ID of the specified audio effect. Each audio effect has a unique ID.\n"
		"\n"
		"		     Notes: \n"
		"		     - If the audio effect is preloaded into the memory through the 'preloadEffect' method, the value of ``soundID`` must be the same as that in the *preloadEffect* method.\n"
		"		     - Playing multiple online audio effect files simultaneously is not supported on macOS and Windows.\n"
		"\n"
		"		     :type filePath: string\n"
		":param filePath: Specifies the absolute path (including the suffixes of the filename) to the local audio effect file or the URL of the online audio effect file, for example, c:/music/audio.mp4. Supported audio formats: mp3, mp4, m4a, aac, 3gp, mkv and wav.\n"
		"    		 :type loopCount: int\n"
		":param loopCount: Sets the number of times the audio effect loops:\n"
		"    		     - 0: Play the audio effect once.\n"
		"    		     - 1: Play the audio effect twice.\n"
		"    		     - -1: Play the audio effect in an indefinite loop until the 'stopEffect' or 'stopAllEffects' method is called.\n"
		"    		 :type pitch: float\n"
		":param pitch: Sets the pitch of the audio effect. The value ranges between 0.5 and 2. The default value is 1 (no change to the pitch). The lower the value, the lower the pitch.\n"
		"    		 :type pan: float\n"
		":param pan: Sets the spatial position of the audio effect. The value ranges between -1.0 and 1.0:\n"
		"    		     - 0.0: The audio effect displays ahead.\n"
		"    		     - 1.0: The audio effect displays to the right.\n"
		"    		     - -1.0: The audio effect displays to the left.\n"
		"    		 :type gain: int\n"
		":param gain:  Sets the volume of the audio effect. The value ranges between 0 and 100 (default). The lower the value, the lower the volume of the audio effect.\n"
		"    		 :type publish: boolean, optional\n"
		":param publish: Sets whether or not to publish the specified audio effect to the remote stream:\n"
		"    		     - true: The locally played audio effect is published to the Agora Cloud and the remote users can hear it.\n"
		"    		     - false: The locally played audio effect is not published to the Agora Cloud and the remote users cannot hear it.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_stopEffect", _wrap_RtcEngineBridge_stopEffect, METH_VARARGS, "\n"
		" Stops playing a specified audio effect.\n"
		"\n"
		"		     :type soundId: int\n"
		":param soundId: ID of the audio effect to stop playing. Each audio effect has a unique ID.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_stopAllEffects", _wrap_RtcEngineBridge_stopAllEffects, METH_O, "\n"
		" Stops playing all audio effects.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_preloadEffect", _wrap_RtcEngineBridge_preloadEffect, METH_VARARGS, "\n"
		" Preloads a specified audio effect file into the memory.\n"
		"\n"
		"		     Notes: This method does not support online audio effect files.\n"
		"\n"
		"		     To ensure smooth communication, limit the size of the audio effect file. We recommend using this method to preload the audio effect before calling the 'joinChannel' method.\n"
		"\n"
		"		     Supported audio formats: mp3, aac, m4a, 3gp, and wav.\n"
		"\n"
		"		     :type soundId: int\n"
		":param soundId: ID of the audio effect. Each audio effect has a unique ID.\n"
		"    		 :type filePath: string\n"
		":param filePath: Pointer to the absolute path of the audio effect file.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_unloadEffect", _wrap_RtcEngineBridge_unloadEffect, METH_VARARGS, "\n"
		" Releases a specified preloaded audio effect from the memory.\n"
		"\n"
		"		     :type soundId: int\n"
		":param soundId: ID of the audio effect. Each audio effect has a unique ID.\n"
		"    		 :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_pauseEffect", _wrap_RtcEngineBridge_pauseEffect, METH_VARARGS, "\n"
		" Pauses a specified audio effect.\n"
		"\n"
		"		     :type soundId: int\n"
		":param soundId: ID of the audio effect. Each audio effect has a unique ID.\n"
		"    		 :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_pauseAllEffects", _wrap_RtcEngineBridge_pauseAllEffects, METH_O, "\n"
		" Pauses all audio effects.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_resumeEffect", _wrap_RtcEngineBridge_resumeEffect, METH_VARARGS, "\n"
		" Resumes playing a specified audio effect.\n"
		"\n"
		"		     :type soundId: int\n"
		":param soundId: ID of the audio effect. Each audio effect has a unique ID.\n"
		"    		 :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_resumeAllEffects", _wrap_RtcEngineBridge_resumeAllEffects, METH_O, "\n"
		" Resumes playing all audio effects.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_enableSoundPositionIndication", _wrap_RtcEngineBridge_enableSoundPositionIndication, METH_VARARGS, "\n"
		" Enables/Disables stereo panning for remote users.\n"
		"\n"
		"		     Ensure that you call this method before joinChannel to enable stereo panning for remote users so that the local user can track the position of a remote user by calling 'setRemoteVoicePosition'.\n"
		"\n"
		"		     :type enabled: boolean\n"
		":param enabled: Sets whether or not to enable stereo panning for remote users:\n"
		"    		     - true: enables stereo panning.\n"
		"    		     - false: disables stereo panning.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setLocalVoicePitch", _wrap_RtcEngineBridge_setLocalVoicePitch, METH_VARARGS, "\n"
		" Changes the voice pitch of the local speaker.\n"
		"\n"
		"		     :type pitch: float\n"
		":param pitch: Sets the voice pitch. The value ranges between 0.5 and 2.0. The lower the value, the lower the voice pitch. The default value is 1.0 (no change to the local voice pitch).\n"
		"    		 :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setLocalVoiceEqualization", _wrap_RtcEngineBridge_setLocalVoiceEqualization, METH_VARARGS, "\n"
		" Sets the local voice equalization effect.\n"
		"\n"
		"		     :type bandFrequency: int\n"
		":param bandFrequency: Sets the band frequency. The value ranges between 0 and 9, representing the respective 10-band center frequencies of the voice effects, including 31, 62, 125, 500, 1k, 2k, 4k, 8k, and 16k Hz. See #AUDIO_EQUALIZATION_BAND_FREQUENCY.\n"
		"    		 :type bandGain: int\n"
		":param bandGain:  Sets the gain of each band in dB. The value ranges between -15 and 15.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setLocalVoiceReverb", _wrap_RtcEngineBridge_setLocalVoiceReverb, METH_VARARGS, "\n"
		"  Sets the local voice reverberation.\n"
		"\n"
		"		     v2.4.0 adds the 'setLocalVoiceReverbPreset' method, a more user-friendly method for setting the local voice reverberation. You can use this method to set the local reverberation effect, such as pop music, R&B, rock music, and hip-hop.\n"
		"\n"
		"		     :type reverbKey: int\n"
		":param reverbKey: Sets the reverberation key. See #AUDIO_REVERB_TYPE.\n"
		"    		 :type value: int\n"
		":param value: Sets the value of the reverberation key.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setLocalVoiceChanger", _wrap_RtcEngineBridge_setLocalVoiceChanger, METH_VARARGS, "\n"
		" Sets the local voice changer option.\n"
		"\n"
		"		     This method can be used to set the local voice effect for users in a `COMMUNICATION` channel or hosts in a `LIVE_BROADCASTING` channel.\n"
		"		     Voice changer options include the following voice effects:\n"
		"\n"
		"		     - `VOICE_CHANGER_XXX`: Changes the local voice to an old man, a little boy, or the Hulk. Applies to the voice talk scenario.\n"
		"		     - `VOICE_BEAUTY_XXX`: Beautifies the local voice by making it sound more vigorous, resounding, or adding spacial resonance. Applies to the voice talk and singing scenario.\n"
		"		     - `GENERAL_VOICE_BEAUTY_XXX`: Adds gender-based beautification effect to the local voice. Applies to the voice talk scenario.\n"
		"		       - For a male voice: Adds magnetism to the voice.\n"
		"		       - For a female voice: Adds freshness or vitality to the voice.\n"
		"\n"
		"		     Notes: \n"
		"		     - To achieve better voice effect quality, Agora recommends setting the profile parameter in `setAudioProfile` as `AUDIO_PROFILE_MUSIC_HIGH_QUALITY(4)` or `AUDIO_PROFILE_MUSIC_HIGH_QUALITY_STEREO(5)`.\n"
		"		     - This method works best with the human voice, and Agora does not recommend using it for audio containing music and a human voice.\n"
		"		     - Do not use this method with `setLocalVoiceReverbPreset`, because the method called later overrides the one called earlier. For detailed considerations, see the advanced guide *Voice Changer and Reverberation*.\n"
		"\n"
		"		     :type voiceChanger: int\n"
		":param voiceChanger: Sets the local voice changer option. The default value is `VOICE_CHANGER_OFF`, which means the original voice. See details in #VOICE_CHANGER_PRESET.\n"
		"    		     Gender-based beatification effect works best only when assigned a proper gender:\n"
		"    		     - For male: `GENERAL_BEAUTY_VOICE_MALE_MAGNETIC`.\n"
		"    		     - For female: `GENERAL_BEAUTY_VOICE_FEMALE_FRESH` or `GENERAL_BEAUTY_VOICE_FEMALE_VITALITY`.\n"
		"    		     Failure to do so can lead to voice distortion.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure. Check if the enumeration is properly set.\n"
		""},
	 { "RtcEngineBridge_setLocalVoiceReverbPreset", _wrap_RtcEngineBridge_setLocalVoiceReverbPreset, METH_VARARGS, "\n"
		" Sets the local voice reverberation option, including the virtual stereo.\n"
		"\n"
		"This method sets the local voice reverberation for users in a `COMMUNICATION` channel or hosts in a `LIVE_BROADCASTING` channel.\n"
		"After successfully calling this method, all users in the channel can hear the voice with reverberation.\n"
		"\n"
		"Notes: \n"
		"- When calling this method with enumerations that begin with `AUDIO_REVERB_FX`, ensure that you set profile in `setAudioProfile` as\n"
		"`AUDIO_PROFILE_MUSIC_HIGH_QUALITY(4)` or `AUDIO_PROFILE_MUSIC_HIGH_QUALITY_STEREO(5)`; otherwise, this methods cannot set the corresponding voice reverberation option.\n"
		"- When calling this method with `AUDIO_VIRTUAL_STEREO`, Agora recommends setting the `profile` parameter in `setAudioProfile` as `AUDIO_PROFILE_MUSIC_HIGH_QUALITY_STEREO(5)`.\n"
		"- This method works best with the human voice, and Agora does not recommend using it for audio containing music and a human voice.\n"
		"- Do not use this method with `setLocalVoiceChanger`, because the method called later overrides the one called earlier.\n"
		"For detailed considerations, see the advanced guide *Voice Changer and Reverberation*.\n"
		"\n"
		"		     :type reverbPreset: int\n"
		":param reverbPreset: The local voice reverberation option. The default value is `AUDIO_REVERB_OFF`,\n"
		"    		     which means the original voice.  See #AUDIO_REVERB_PRESET.\n"
		"    		     To achieve better voice effects, Agora recommends the enumeration whose name begins with `AUDIO_REVERB_FX`.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setExternalAudioSource", _wrap_RtcEngineBridge_setExternalAudioSource, METH_VARARGS, "\n"
		" Sets the external audio source. Please call this method before 'joinChannel'.\n"
		"\n"
		"		     :type enabled: boolean\n"
		":param enabled: Sets whether to enable/disable the external audio source:\n"
		"    		     - true: Enables the external audio source.\n"
		"    		     - false: (Default) Disables the external audio source.\n"
		"    		 :type sampleRate: int\n"
		":param sampleRate: Sets the sample rate (Hz) of the external audio source, which can be set as 8000, 16000, 32000, 44100, or 48000 Hz.\n"
		"    		 :type channels: int\n"
		":param channels: Sets the number of audio channels of the external audio source:\n"
		"    		     - 1: Mono.\n"
		"    		     - 2: Stereo.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setExternalAudioSink", _wrap_RtcEngineBridge_setExternalAudioSink, METH_VARARGS, "\n"
		" Sets the external audio sink.\n"
		"This method applies to scenarios where you want to use external audio\n"
		"data for playback. After enabling the external audio sink, you can call\n"
		"the 'pullAudioFrame' method to pull the remote audio data, process\n"
		"it, and play it with the audio effects that you want.\n"
		"\n"
		"Notes: \n"
		"Once you enable the external audio sink, the app will not retrieve any\n"
		"audio data from the\n"
		"'onPlaybackAudioFrame' callback.\n"
		"\n"
		":type enabled: boolean\n"
		":param enabled:\n"
		"    - true: Enables the external audio sink.\n"
		"    - false: (Default) Disables the external audio sink.\n"
		":type sampleRate: int\n"
		":param sampleRate: Sets the sample rate (Hz) of the external audio sink, which can be set as 16000, 32000, 44100 or 48000.\n"
		":type channels: int\n"
		":param channels: Sets the number of audio channels of the external\n"
		"    audio sink:\n"
		"    - 1: Mono.\n"
		"    - 2: Stereo.\n"
		"\n"
		":rtype: int\n"
		":return: \n"
		"    - 0: Success.\n"
		"    - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setRecordingAudioFrameParameters", _wrap_RtcEngineBridge_setRecordingAudioFrameParameters, METH_VARARGS, "\n"
		" Sets the audio recording format for the 'onRecordAudioFrame' callback.\n"
		"\n"
		"\n"
		"		     :type sampleRate: int\n"
		":param sampleRate: Sets the sample rate (``samplesPerSec)`` returned in the *onRecordAudioFrame* callback, which can be set as 8000, 16000, 32000, 44100, or 48000 Hz.\n"
		"    		 :type channel: int\n"
		":param channel: Sets the number of audio channels (``channels)`` returned in the *onRecordAudioFrame* callback:\n"
		"    		     - 1: Mono\n"
		"    		     - 2: Stereo\n"
		"    		 :type mode: int\n"
		":param mode: Sets the use mode (see #RAW_AUDIO_FRAME_OP_MODE_TYPE) of the *onRecordAudioFrame* callback.\n"
		"    		 :type samplesPerCall: int\n"
		":param samplesPerCall: Sets the number of samples returned in the *onRecordAudioFrame* callback. `samplesPerCall` is usually set as 1024 for RTMP streaming.\n"
		"\n"
		"\n"
		"		     Notes: The SDK triggers the `onRecordAudioFrame` callback according to the sample interval. Ensure that the sample interval ≥ 0.01 (s). And, Sample interval (sec) = `samplePerCall`/(`sampleRate` × `channel`).\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setPlaybackAudioFrameParameters", _wrap_RtcEngineBridge_setPlaybackAudioFrameParameters, METH_VARARGS, "\n"
		" Sets the audio playback format for the 'onPlaybackAudioFrame' callback.\n"
		"\n"
		"\n"
		"		     :type sampleRate: int\n"
		":param sampleRate: Sets the sample rate (``samplesPerSec)`` returned in the *onPlaybackAudioFrame* callback, which can be set as 8000, 16000, 32000, 44100, or 48000 Hz.\n"
		"    		 :type channel: int\n"
		":param channel: Sets the number of channels (``channels)`` returned in the *onPlaybackAudioFrame* callback:\n"
		"    		     - 1: Mono\n"
		"    		     - 2: Stereo\n"
		"    		 :type mode: int\n"
		":param mode: Sets the use mode (see #RAW_AUDIO_FRAME_OP_MODE_TYPE) of the *onPlaybackAudioFrame* callback.\n"
		"    		 :type samplesPerCall: int\n"
		":param samplesPerCall: Sets the number of samples returned in the *onPlaybackAudioFrame* callback. `samplesPerCall` is usually set as 1024 for RTMP streaming.\n"
		"\n"
		"		     Notes: The SDK triggers the `onPlaybackAudioFrame` callback according to the sample interval. Ensure that the sample interval ≥ 0.01 (s). And, Sample interval (sec) = `samplePerCall`/(`sampleRate` × `channel`).\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_setMixedAudioFrameParameters", _wrap_RtcEngineBridge_setMixedAudioFrameParameters, METH_VARARGS, "\n"
		" Sets the mixed audio format for the 'onMixedAudioFrame' callback.\n"
		"\n"
		"\n"
		"		     :type sampleRate: int\n"
		":param sampleRate: Sets the sample rate (``samplesPerSec)`` returned in the *onMixedAudioFrame* callback, which can be set as 8000, 16000, 32000, 44100, or 48000 Hz.\n"
		"    		 :type samplesPerCall: int\n"
		":param samplesPerCall: Sets the number of samples (`samples`) returned in the *onMixedAudioFrame* callback. `samplesPerCall` is usually set as 1024 for RTMP streaming.\n"
		"\n"
		"		     Notes: The SDK triggers the `onMixedAudioFrame` callback according to the sample interval. Ensure that the sample interval ≥ 0.01 (s). And, Sample interval (sec) = `samplePerCall`/(`sampleRate` × `channels`).\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_registerMediaMetadataObserver", _wrap_RtcEngineBridge_registerMediaMetadataObserver, METH_VARARGS, "\n"
		" Registers the metadata observer.\n"
		"\n"
		"		     Registers the metadata observer. You need to implement the IMetadataObserver class and specify the metadata type in this method. A successful call of this method triggers the 'getMaxMetadataSize' callback.\n"
		"		     This method enables you to add synchronized metadata in the video stream for more diversified live interactive streaming, such as sending shopping links, digital coupons, and online quizzes.\n"
		"\n"
		"		     Notes: \n"
		"		     - Call this method before the joinChannel method.\n"
		"		     - This method applies to the `LIVE_BROADCASTING` channel profile.\n"
		"\n"
		"		     :type observer: agora::rtc::IMetadataObserver\n"
		":param observer: The IMetadataObserver class. See the definition of IMetadataObserver for details.\n"
		"    		 :type type: agora::rtc::IMetadataObserver::METADATA_TYPE\n"
		":param type: See 'METADATA_TYPE'. The SDK supports VIDEO_METADATA (0) only for now.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcEngineBridge_sendMetadata", _wrap_RtcEngineBridge_sendMetadata, METH_VARARGS, NULL},
	 { "new_RtcEngineBridge", _wrap_new_RtcEngineBridge, METH_NOARGS, NULL},
	 { "delete_RtcEngineBridge", _wrap_delete_RtcEngineBridge, METH_O, NULL},
	 { "RtcEngineBridge_swigregister", RtcEngineBridge_swigregister, METH_O, NULL},
	 { "RtcEngineBridge_swiginit", RtcEngineBridge_swiginit, METH_VARARGS, NULL},
	 { "new_IRtcEngineEventHandler", _wrap_new_IRtcEngineEventHandler, METH_NOARGS, NULL},
	 { "delete_IRtcEngineEventHandler", _wrap_delete_IRtcEngineEventHandler, METH_O, NULL},
	 { "IRtcEngineEventHandler_swigregister", IRtcEngineEventHandler_swigregister, METH_O, NULL},
	 { "IRtcEngineEventHandler_swiginit", IRtcEngineEventHandler_swiginit, METH_VARARGS, NULL},
	 { "delete_RtcEngineEventHandlerBase", _wrap_delete_RtcEngineEventHandlerBase, METH_O, NULL},
	 { "RtcEngineEventHandlerBase_onJoinChannelSuccess", _wrap_RtcEngineEventHandlerBase_onJoinChannelSuccess, METH_VARARGS, "\n"
		"Occurs when a user joins a channel.\n"
		"\n"
		"    This callback notifies the application that a user joins a specified channel when the application calls the 'joinChannel' method.\n"
		"\n"
		"    The channel name assignment is based on ``channelName`` specified in the 'joinChannel' method.\n"
		"\n"
		"    If the ``uid`` is not specified in the *joinChannel* method, the server automatically assigns a ``uid``.\n"
		"\n"
		"    :type channel: string\n"
		"    :param channel:  Pointer to the channel name.\n"
		"    :type uid: int\n"
		"    :param uid: User ID of the user joining the channel.\n"
		"    :type elapsed: int\n"
		"    :param elapsed: Time elapsed (ms) from the user calling the 'joinChannel' method until the SDK triggers this callback.\n"
		""},
	 { "RtcEngineEventHandlerBase_onLeaveChannel", _wrap_RtcEngineEventHandlerBase_onLeaveChannel, METH_VARARGS, "\n"
		"Occurs when a user leaves the channel.\n"
		"\n"
		"   This callback notifies the application that a user leaves the channel when the application calls the 'leaveChannel' method.\n"
		"\n"
		"   The application retrieves information, such as the call duration and statistics.\n"
		"\n"
		"    :type stats: :py:class:`RtcStats`\n"
		"    :param stats: Pointer to the statistics of the call: RtcStats.\n"
		""},
	 { "RtcEngineEventHandlerBase_onRejoinChannelSuccess", _wrap_RtcEngineEventHandlerBase_onRejoinChannelSuccess, METH_VARARGS, "\n"
		"Occurs when a user rejoins the channel after disconnection due to network problems.\n"
		"\n"
		"   When a user loses connection with the server because of network problems, the SDK automatically tries to reconnect and triggers this callback upon reconnection.\n"
		"\n"
		"    :type channel: string\n"
		"    :param channel: Pointer to the channel name.\n"
		"    :type uid: int\n"
		"    :param uid: User ID of the user rejoining the channel.\n"
		"    :type elapsed: int\n"
		"    :param elapsed: Time elapsed (ms) from starting to reconnect until the SDK triggers this callback.\n"
		""},
	 { "RtcEngineEventHandlerBase_onUserJoined", _wrap_RtcEngineEventHandlerBase_onUserJoined, METH_VARARGS, "\n"
		"Occurs when a remote user (`COMMUNICATION`)/ host (`LIVE_BROADCASTING`) joins the channel.\n"
		"\n"
		"    - `COMMUNICATION` profile: This callback notifies the application that another user joins the channel. If other users are already in the channel, the SDK also reports to the application on the existing users.\n"
		"    - `LIVE_BROADCASTING` profile: This callback notifies the application that the host joins the channel. If other hosts are already in the channel, the SDK also reports to the application on the existing hosts. We recommend limiting the number of hosts to 17.\n"
		"\n"
		"    The SDK triggers this callback under one of the following circumstances:\n"
		"    - A remote user/host joins the channel by calling the 'joinChannel' method.\n"
		"    - A remote user switches the user role to the host by calling the 'setClientRole' method after joining the channel.\n"
		"    - A remote user/host rejoins the channel after a network interruption.\n"
		"    - The host injects an online media stream into the channel by calling the 'addInjectStreamUrl' method.\n"
		"\n"
		"    Notes: In the `LIVE_BROADCASTING` profile:\n"
		"    - The host receives this callback when another host joins the channel.\n"
		"    - The audience in the channel receives this callback when a new host joins the channel.\n"
		"    - When a web application joins the channel, the SDK triggers this callback as long as the web application publishes streams.\n"
		"\n"
		"    :type uid: int\n"
		"    :param uid: User ID of the user or host joining the channel.\n"
		"    :type elapsed: int\n"
		"    :param elapsed: Time delay (ms) from the local user calling the 'joinChannel' method until the SDK triggers this callback.\n"
		""},
	 { "RtcEngineEventHandlerBase_onClientRoleChanged", _wrap_RtcEngineEventHandlerBase_onClientRoleChanged, METH_VARARGS, "\n"
		"Occurs when the user role switches in the live interactive streaming. For example, from a host to an audience or vice versa.\n"
		"\n"
		"   This callback notifies the application of a user role switch when the application calls the 'setClientRole' method.\n"
		"\n"
		"   The SDK triggers this callback when the local user switches the user role by calling the 'setClientRole' method after joining the channel.\n"
		"    :type oldRole: int\n"
		"    :param oldRole: Role that the user switches from: #CLIENT_ROLE_TYPE.\n"
		"    :type newRole: int\n"
		"    :param newRole: Role that the user switches to: #CLIENT_ROLE_TYPE.\n"
		""},
	 { "RtcEngineEventHandlerBase_onUserOffline", _wrap_RtcEngineEventHandlerBase_onUserOffline, METH_VARARGS, "\n"
		"Occurs when a remote user (`COMMUNICATION`)/ host (`LIVE_BROADCASTING`) leaves the channel.\n"
		"\n"
		"   Reasons why the user is offline:\n"
		"\n"
		"   - Leave the channel: When the user/host leaves the channel, the user/host sends a goodbye message. When the message is received, the SDK assumes that the user/host leaves the channel.\n"
		"   - Drop offline: When no data packet of the user or host is received for a certain period of time, the SDK assumes that the user/host drops offline. Unreliable network connections may lead to false detections, so we recommend using the Agora RTM SDK for more reliable offline detection.\n"
		"\n"
		"    :type uid: int\n"
		"    :param uid: User ID of the user leaving the channel or going offline.\n"
		"    :type reason: int\n"
		"    :param reason: Reason why the user is offline: #USER_OFFLINE_REASON_TYPE.\n"
		""},
	 { "RtcEngineEventHandlerBase_onUserMuteAudio", _wrap_RtcEngineEventHandlerBase_onUserMuteAudio, METH_VARARGS, "\n"
		"Deprecated: This method is deprecated from v3.0.0, use the 'onRemoteAudioStateChanged' callback instead.\n"
		"\n"
		"    Occurs when a remote user's audio stream playback pauses/resumes.\n"
		"\n"
		"    The SDK triggers this callback when the remote user stops or resumes sending the audio stream by calling the 'muteLocalAudioStream' method.\n"
		"\n"
		"    Notes: This callback does not work properly when the number of users (in the `COMMUNICATION` profile) or hosts (in the `LIVE_BROADCASTING` profile) in the channel exceeds 17.\n"
		"\n"
		"    :type uid: int\n"
		"    :param uid: User ID of the remote user.\n"
		"    :type muted: boolean\n"
		"    :param muted: Whether the remote user's audio stream is muted/unmuted:\n"
		"        - true: Muted.\n"
		"        - false: Unmuted.\n"
		""},
	 { "RtcEngineEventHandlerBase_onFirstRemoteVideoDecoded", _wrap_RtcEngineEventHandlerBase_onFirstRemoteVideoDecoded, METH_VARARGS, "\n"
		" Occurs when the first remote video frame is received and decoded.\n"
		"\n"
		"Deprecated: v2.9.0\n"
		"\n"
		"This callback is deprecated and replaced by the\n"
		"'onRemoteVideoStateChanged' callback\n"
		"with the following parameters:\n"
		"- #REMOTE_VIDEO_STATE_STARTING (1)\n"
		"- #REMOTE_VIDEO_STATE_DECODING (2)\n"
		"\n"
		"This callback is triggered in either of the following scenarios:\n"
		"\n"
		"- The remote user joins the channel and sends the video stream.\n"
		"- The remote user stops sending the video stream and re-sends it after\n"
		"15 seconds. Reasons for such an interruption include:\n"
		" - The remote user leaves the channel.\n"
		" - The remote user drops offline.\n"
		" - The remote user calls the\n"
		"'muteLocalVideoStream'\n"
		" method to stop sending the video stream.\n"
		" - The remote user calls the\n"
		"'disableVideo' method to\n"
		"disable video.\n"
		"\n"
		"The application can configure the user view settings in this callback.\n"
		"\n"
		":type uid: int\n"
		":param uid: User ID of the remote user sending the video stream.\n"
		":type width: int\n"
		":param width: Width (px) of the video stream.\n"
		":type height: int\n"
		":param height: Height (px) of the video stream.\n"
		":type elapsed: int\n"
		":param elapsed: Time elapsed (ms) from the local user calling the\n"
		"    'joinChannel' method until the SDK\n"
		"    triggers this callback.\n"
		""},
	 { "RtcEngineEventHandlerBase_onUserMuteVideo", _wrap_RtcEngineEventHandlerBase_onUserMuteVideo, METH_VARARGS, "\n"
		" Occurs when a remote user's video stream playback pauses/resumes.\n"
		"\n"
		"You can also use the\n"
		"'onRemoteVideoStateChanged' callback\n"
		"with the following parameters:\n"
		"- #REMOTE_VIDEO_STATE_STOPPED (0) and\n"
		"#REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED (5).\n"
		"- #REMOTE_VIDEO_STATE_DECODING (2) and\n"
		"#REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED (6).\n"
		"\n"
		"The SDK triggers this callback when the remote user stops or resumes\n"
		"sending the video stream by calling the\n"
		"'agora::rtc::IRtcEngine::muteLocalVideoStream'\n"
		"\"muteLocalVideoStream\" method.\n"
		"\n"
		"Notes: This callback does not work properly when the number of users (in the `COMMUNICATION` profile) or hosts (in the `LIVE_BROADCASTING` profile) in the channel exceeds 17.\n"
		"\n"
		":type uid: int\n"
		":param uid: User ID of the remote user.\n"
		":type muted: boolean\n"
		":param muted: Whether the remote user's video stream playback is\n"
		"    paused/resumed:\n"
		"    - true: Paused.\n"
		"    - false: Resumed.\n"
		""},
	 { "RtcEngineEventHandlerBase_onAudioRouteChanged", _wrap_RtcEngineEventHandlerBase_onAudioRouteChanged, METH_VARARGS, "\n"
		"Occurs when the local audio route changes.\n"
		"\n"
		"    The SDK triggers this callback when the local audio route switches to an earpiece, speakerphone, headset, or Bluetooth device.\n"
		"\n"
		"    Notes: This callback is for Android and iOS only.\n"
		"\n"
		"    :type routing: int\n"
		"    :param routing: Audio output routing. See: #AUDIO_ROUTE_TYPE.\n"
		""},
	 { "RtcEngineEventHandlerBase_onConnectionLost", _wrap_RtcEngineEventHandlerBase_onConnectionLost, METH_O, "\n"
		"Occurs when the SDK cannot reconnect to Agora's edge server 10 seconds after its connection to the server is interrupted.\n"
		"\n"
		"   The SDK triggers this callback when it cannot connect to the server 10 seconds after calling the 'joinChannel' method, whether or not it is in the channel.\n"
		"\n"
		"   This callback is different from 'onConnectionInterrupted':\n"
		"\n"
		"   - The SDK triggers the 'onConnectionInterrupted' callback when it loses connection with the server for more than four seconds after it successfully joins the channel.\n"
		"   - The SDK triggers the 'onConnectionLost' callback when it loses connection with the server for more than 10 seconds, whether or not it joins the channel.\n"
		"\n"
		"   If the SDK fails to rejoin the channel 20 minutes after being disconnected from Agora's edge server, the SDK stops rejoining the channel.\n"
		""},
	 { "RtcEngineEventHandlerBase_onRequestToken", _wrap_RtcEngineEventHandlerBase_onRequestToken, METH_O, "\n"
		"Occurs when the token expires.\n"
		"\n"
		"    After a token is specified by calling the 'joinChannel' method, if the SDK losses connection with the Agora server due to network issues, the token may expire after a certain period of time and a new token may be required to reconnect to the server.\n"
		"\n"
		"    This callback notifies the app to generate a new token and call joinChannel to rejoin the channel with the new token.\n"
		""},
	 { "RtcEngineEventHandlerBase_onAudioVolumeIndication", _wrap_RtcEngineEventHandlerBase_onAudioVolumeIndication, METH_VARARGS, "\n"
		"Reports which users are speaking, the speakers' volume and whether the local user is speaking.\n"
		"\n"
		"    This callback reports the IDs and volumes of the loudest speakers (at most 3 users) at the moment in the channel, and whether the local user is speaking.\n"
		"\n"
		"    By default, this callback is disabled. You can enable it by calling the 'IRtcEngine::enableAudioVolumeIndication(int', int, bool) \"enableAudioVolumeIndication\" method.\n"
		"    Once enabled, this callback is triggered at the set interval, regardless of whether a user speaks or not.\n"
		"\n"
		"    The SDK triggers two independent `onAudioVolumeIndication` callbacks at one time, which separately report the volume information of the local user and all the remote speakers.\n"
		"    For more information, see the detailed parameter descriptions.\n"
		"\n"
		"    Notes: \n"
		"    - To enable the voice activity detection of the local user, ensure that you set `report_vad`(true) in the `enableAudioVolumeIndication` method.\n"
		"    - Calling the 'muteLocalAudioStream' method affects the SDK's behavior:\n"
		"       - If the local user calls the 'muteLocalAudioStream' method, the SDK stops triggering the local user's callback.\n"
		"       - 20 seconds after a remote speaker calls the *muteLocalAudioStream* method, the remote speakers' callback excludes this remote user's information; 20 seconds after all remote users call the *muteLocalAudioStream* method, the SDK stops triggering the remote speakers' callback.\n"
		"    - An empty ``speakers`` array in the *onAudioVolumeIndication* callback suggests that no remote user is speaking at the moment.\n"
		"\n"
		"    :type speakers: :py:class:`AudioVolumeInfo`\n"
		"    :param speakers: A pointer to AudioVolumeInfo:\n"
		"        - In the local user's callback, this struct contains the following members:\n"
		"          - `uid` = 0,\n"
		"          - `volume` = `totalVolume`, which reports the sum of the voice volume and audio-mixing volume of the local user, and\n"
		"          - `vad`, which reports the voice activity status of the local user.\n"
		"        - In the remote speakers' callback, this array contains the following members:\n"
		"          - `uid` of the remote speaker,\n"
		"          - `volume`, which reports the sum of the voice volume and audio-mixing volume of each remote speaker, and\n"
		"          - `vad` = 0.\n"
		"\n"
		"      An empty speakers array in the callback indicates that no remote user is speaking at the moment.\n"
		"    :type speakerNumber: int\n"
		"    :param speakerNumber: Total number of speakers. The value range is [0, 3].\n"
		"        - In the local user’s callback, `speakerNumber` = 1, regardless of whether the local user speaks or not.\n"
		"        - In the remote speakers' callback, the callback reports the IDs and volumes of the three loudest speakers when there are more than three remote users in the channel, and `speakerNumber` = 3.\n"
		"    :type totalVolume: int\n"
		"    :param totalVolume: Total volume after audio mixing. The value ranges between 0 (lowest volume) and 255 (highest volume).\n"
		"        - In the local user’s callback, `totalVolume` is the sum of the voice volume and audio-mixing volume of the local user.\n"
		"        - In the remote speakers' callback, `totalVolume` is the sum of the voice volume and audio-mixing volume of all the remote speakers.\n"
		""},
	 { "RtcEngineEventHandlerBase_onWarning", _wrap_RtcEngineEventHandlerBase_onWarning, METH_VARARGS, "\n"
		"Reports a warning during SDK runtime.\n"
		"\n"
		"    In most cases, the application can ignore the warning reported by the SDK because the SDK can usually fix the issue and resume running. For example, when losing connection with the server, the SDK may report #WARN_LOOKUP_CHANNEL_TIMEOUT and automatically try to reconnect.\n"
		"\n"
		"    :type warn: int\n"
		"    :param warn: Warning code: #WARN_CODE_TYPE.\n"
		"    :type msg: string\n"
		"    :param msg: Pointer to the warning message.\n"
		""},
	 { "RtcEngineEventHandlerBase_onError", _wrap_RtcEngineEventHandlerBase_onError, METH_VARARGS, "\n"
		"Reports an error during SDK runtime.\n"
		"\n"
		"    In most cases, the SDK cannot fix the issue and resume running. The SDK requires the application to take action or informs the user about the issue.\n"
		"\n"
		"    For example, the SDK reports an #ERR_START_CALL error when failing to initialize a call. The application informs the user that the call initialization failed and invokes the 'leaveChannel' method to leave the channel.\n"
		"\n"
		"    :type err: int\n"
		"    :param err: Error code: #ERROR_CODE_TYPE.\n"
		"    :type msg: string\n"
		"    :param msg: Pointer to the error message.\n"
		""},
	 { "RtcEngineEventHandlerBase_onRtcStats", _wrap_RtcEngineEventHandlerBase_onRtcStats, METH_VARARGS, "\n"
		"Reports the statistics of the current call.\n"
		"\n"
		"    The SDK triggers this callback once every two seconds after the user joins the channel.\n"
		"\n"
		"    :type stats: :py:class:`RtcStats`\n"
		"    :param stats: Statistics of the IRtcEngine: RtcStats.\n"
		""},
	 { "RtcEngineEventHandlerBase_onAudioMixingFinished", _wrap_RtcEngineEventHandlerBase_onAudioMixingFinished, METH_O, "\n"
		" Occurs when the audio mixing file playback finishes.\n"
		"\n"
		"DEPRECATED**  use onAudioMixingStateChanged instead.\n"
		"\n"
		"     You can start an audio mixing file playback by calling the 'startAudioMixing' method. The SDK triggers this callback when the audio mixing file playback finishes.\n"
		"\n"
		"     If the *startAudioMixing* method call fails, an error code returns in the 'onError' callback.\n"
		""},
	 { "RtcEngineEventHandlerBase_onVideoSizeChanged", _wrap_RtcEngineEventHandlerBase_onVideoSizeChanged, METH_VARARGS, "\n"
		"Occurs when the video size or rotation of a specified user changes.\n"
		"\n"
		"    :type uid: int\n"
		"    :param uid: User ID of the remote user or local user (0) whose video size or rotation changes.\n"
		"    :type width: int\n"
		"    :param width: New width (pixels) of the video.\n"
		"    :type height: int\n"
		"    :param height: New height (pixels) of the video.\n"
		"    :type rotation: int\n"
		"    :param rotation: New rotation of the video [0 to 360).\n"
		""},
	 { "RtcEngineEventHandlerBase_onConnectionInterrupted", _wrap_RtcEngineEventHandlerBase_onConnectionInterrupted, METH_O, "\n"
		"DEPRECATED** Occurs when the connection between the SDK and the server is interrupted.\n"
		"\n"
		"     Deprecated as of v2.3.2. Replaced by the 'onConnectionStateChanged(CONNECTION_STATE_RECONNECTING, CONNECTION_CHANGED_INTERRUPTED)' callback.\n"
		"\n"
		"     The SDK triggers this callback when it loses connection with the server for more than four seconds after the connection is established.\n"
		"\n"
		"     After triggering this callback, the SDK tries reconnecting to the server. You can use this callback to implement pop-up reminders.\n"
		"\n"
		"     This callback is different from 'onConnectionLost':\n"
		"     - The SDK triggers the 'onConnectionInterrupted' callback when it loses connection with the server for more than four seconds after it successfully joins the channel.\n"
		"     - The SDK triggers the 'onConnectionLost' callback when it loses connection with the server for more than 10 seconds, whether or not it joins the channel.\n"
		"\n"
		"     If the SDK fails to rejoin the channel 20 minutes after being disconnected from Agora's edge server, the SDK stops rejoining the channel.\n"
		""},
	 { "RtcEngineEventHandlerBase_onMicrophoneEnabled", _wrap_RtcEngineEventHandlerBase_onMicrophoneEnabled, METH_VARARGS, "\n"
		" Occurs when the microphone is enabled/disabled.\n"
		"\n"
		"Deprecated: v2.9.0\n"
		"\n"
		"The 'onMicrophoneEnabled' callback is\n"
		"deprecated. Use #LOCAL_AUDIO_STREAM_STATE_STOPPED (0) or\n"
		"#LOCAL_AUDIO_STREAM_STATE_RECORDING (1) in the\n"
		"'onLocalAudioStateChanged' callback\n"
		"instead.\n"
		"\n"
		"The SDK triggers this callback when the local user resumes or stops\n"
		"capturing the local audio stream by calling the\n"
		"'enbaleLocalAudio' method.\n"
		"\n"
		":type enabled: boolean\n"
		":param enabled: Whether the microphone is enabled/disabled:\n"
		"    - true: Enabled.\n"
		"    - false: Disabled.\n"
		""},
	 { "RtcEngineEventHandlerBase_onAudioQuality", _wrap_RtcEngineEventHandlerBase_onAudioQuality, METH_VARARGS, "\n"
		"DEPRECATED** Reports the statistics of the audio stream from each remote user/host.\n"
		"\n"
		"    Deprecated as of v2.3.2. Use the 'onRemoteAudioStats' callback instead.\n"
		"\n"
		"     The SDK triggers this callback once every two seconds to report the audio quality of each remote user/host sending an audio stream. If a channel has multiple users/hosts sending audio streams, the SDK triggers this callback as many times.\n"
		"\n"
		"     :type uid: int\n"
		"     :param uid: User ID of the speaker.\n"
		"     :type quality: int\n"
		"     :param quality: Audio quality of the user: #QUALITY_TYPE.\n"
		"     :type delay: int\n"
		"     :param delay: Time delay (ms) of sending the audio packet from the sender to the receiver, including the time delay of audio sampling pre-processing, transmission, and the jitter buffer.\n"
		"     :type lost: int\n"
		"     :param lost: Packet loss rate (%) of the audio packet sent from the sender to the receiver.\n"
		""},
	 { "RtcEngineEventHandlerBase_onRemoteVideoTransportStats", _wrap_RtcEngineEventHandlerBase_onRemoteVideoTransportStats, METH_VARARGS, "\n"
		" Reports the transport-layer statistics of each remote video stream.\n"
		"\n"
		"Deprecated: \n"
		"This callback is deprecated and replaced by the\n"
		"'onRemoteVideoStats' callback.\n"
		"\n"
		"This callback reports the transport-layer statistics, such as the\n"
		"packet loss rate and network time delay, once every two seconds after\n"
		"the local user receives a video packet from a remote user.\n"
		"\n"
		":type uid: int\n"
		":param uid: User ID of the remote user sending the video packet.\n"
		":type delay: int\n"
		":param delay: Network time delay (ms) from the remote user sending the\n"
		"    video packet to the local user.\n"
		":type lost: int\n"
		":param lost: Packet loss rate (%) of the video packet sent from the\n"
		"    remote user.\n"
		":type rxKBitRate: int\n"
		":param rxKBitRate: Received bitrate (Kbps) of the video packet sent\n"
		"    from the remote user.\n"
		""},
	 { "RtcEngineEventHandlerBase_onRemoteAudioTransportStats", _wrap_RtcEngineEventHandlerBase_onRemoteAudioTransportStats, METH_VARARGS, "\n"
		" Reports the transport-layer statistics of each remote audio stream.\n"
		"\n"
		"Deprecated: \n"
		"This callback is deprecated and replaced by the\n"
		"'onRemoteAudioStats' callback.\n"
		"\n"
		"This callback reports the transport-layer statistics, such as the\n"
		"packet loss rate and network time delay, once every two seconds after\n"
		"the local user receives an audio packet from a remote user.\n"
		"\n"
		":type uid: int\n"
		":param uid:  User ID of the remote user sending the audio packet.\n"
		":type delay: int\n"
		":param delay: Network time delay (ms) from the remote user sending the\n"
		"    audio packet to the local user.\n"
		":type lost: int\n"
		":param lost: Packet loss rate (%) of the audio packet sent from the\n"
		"    remote user.\n"
		":type rxKBitRate: int\n"
		":param rxKBitRate:  Received bitrate (Kbps) of the audio packet sent\n"
		"    from the remote user.\n"
		""},
	 { "RtcEngineEventHandlerBase_onStreamInjectedStatus", _wrap_RtcEngineEventHandlerBase_onStreamInjectedStatus, METH_VARARGS, "\n"
		"Occurs when a voice or video stream URL address is added to the live interactive streaming.\n"
		"\n"
		"   :type url: string\n"
		"   :param url: Pointer to the URL address of the externally injected stream.\n"
		"   :type uid: int\n"
		"   :param uid: User ID.\n"
		"   :type status: int\n"
		"   :param status: State of the externally injected stream: #INJECT_STREAM_STATUS.\n"
		""},
	 { "RtcEngineEventHandlerBase_onTranscodingUpdated", _wrap_RtcEngineEventHandlerBase_onTranscodingUpdated, METH_O, "\n"
		" Occurs when the publisher's transcoding is updated.\n"
		"\n"
		"When the `LiveTranscoding` class in the 'setLiveTranscoding' method updates, the SDK triggers the `onTranscodingUpdated` callback to report the update information to the local host.\n"
		"\n"
		"Notes: If you call the `setLiveTranscoding` method to set the LiveTranscoding class for the first time, the SDK does not trigger the `onTranscodingUpdated` callback.\n"
		""},
	 { "RtcEngineEventHandlerBase_onStreamUnpublished", _wrap_RtcEngineEventHandlerBase_onStreamUnpublished, METH_VARARGS, "\n"
		"Deprecated: This method is deprecated, use the 'onRtmpStreamingStateChanged' callback instead.\n"
		"\n"
		"    Reports the result of calling the 'removePublishStreamUrl' method. (CDN live only.)\n"
		"\n"
		"    This callback indicates whether you have successfully removed an RTMP stream from the CDN.\n"
		"\n"
		"    :type url: string\n"
		"    :param url: The RTMP URL address.\n"
		""},
	 { "RtcEngineEventHandlerBase_onStreamPublished", _wrap_RtcEngineEventHandlerBase_onStreamPublished, METH_VARARGS, "\n"
		"Deprecated: This method is deprecated, use the 'onRtmpStreamingStateChanged' callback instead.\n"
		"\n"
		"    Reports the result of calling the 'addPublishStreamUrl' method. (CDN live only.)\n"
		"\n"
		"    :type url: string\n"
		"    :param url: The RTMP URL address.\n"
		"    :type error: int\n"
		"    :param error: Error code: #ERROR_CODE_TYPE. Main errors include:\n"
		"        - #ERR_OK (0): The publishing succeeds.\n"
		"        - #ERR_FAILED (1): The publishing fails.\n"
		"        - #ERR_INVALID_ARGUMENT (2): Invalid argument used. If, for example, you did not call 'setLiveTranscoding' to configure LiveTranscoding before calling 'addPublishStreamUrl', the SDK reports #ERR_INVALID_ARGUMENT.\n"
		"        - #ERR_TIMEDOUT (10): The publishing timed out.\n"
		"        - #ERR_ALREADY_IN_USE (19): The chosen URL address is already in use for CDN live streaming.\n"
		"        - #ERR_RESOURCE_LIMITED (22): The backend system does not have enough resources for the CDN live streaming.\n"
		"        - #ERR_ENCRYPTED_STREAM_NOT_ALLOWED_PUBLISH (130): You cannot publish an encrypted stream.\n"
		"        - #ERR_PUBLISH_STREAM_CDN_ERROR (151)\n"
		"        - #ERR_PUBLISH_STREAM_NUM_REACH_LIMIT (152)\n"
		"        - #ERR_PUBLISH_STREAM_NOT_AUTHORIZED (153)\n"
		"        - #ERR_PUBLISH_STREAM_INTERNAL_SERVER_ERROR (154)\n"
		"        - #ERR_PUBLISH_STREAM_FORMAT_NOT_SUPPORTED (156)\n"
		""},
	 { "RtcEngineEventHandlerBase_onAudioDeviceVolumeChanged", _wrap_RtcEngineEventHandlerBase_onAudioDeviceVolumeChanged, METH_VARARGS, "\n"
		"Occurs when the volume of the playback device, microphone, or application changes.\n"
		"\n"
		"    :type deviceType: int\n"
		"    :param deviceType: Device type: #MEDIA_DEVICE_TYPE.\n"
		"    :type volume: int\n"
		"    :param volume: Volume of the device. The value ranges between 0 and 255.\n"
		"    :type muted: boolean\n"
		"    :param muted:\n"
		"        - true: The audio device is muted.\n"
		"        - false: The audio device is not muted.\n"
		""},
	 { "RtcEngineEventHandlerBase_onActiveSpeaker", _wrap_RtcEngineEventHandlerBase_onActiveSpeaker, METH_VARARGS, "\n"
		"Reports which user is the loudest speaker.\n"
		"\n"
		"   If the user enables the audio volume indication by calling the 'IRtcEngine::enableAudioVolumeIndication(int', int, bool) \"enableAudioVolumeIndication\" method, this callback returns the ``uid`` of the active speaker detected by the audio volume detection module of the SDK.\n"
		"\n"
		"   Notes: \n"
		"   - To receive this callback, you need to call the 'IRtcEngine::enableAudioVolumeIndication(int', int, bool) \"enableAudioVolumeIndication\" method.\n"
		"   - This callback returns the user ID of the user with the highest voice volume during a period of time, instead of at the moment.\n"
		"\n"
		"   :type uid: int\n"
		"   :param uid: User ID of the active speaker. A ``uid`` of 0 represents the local user.\n"
		""},
	 { "RtcEngineEventHandlerBase_onFirstRemoteAudioFrame", _wrap_RtcEngineEventHandlerBase_onFirstRemoteAudioFrame, METH_VARARGS, "\n"
		"Occurs when the engine receives the first audio frame from a specific remote user.\n"
		"\n"
		"   Deprecated: v3.0.0\n"
		"\n"
		"   This callback is deprecated. Use `onRemoteAudioStateChanged` instead.\n"
		"\n"
		"   :type uid: int\n"
		"   :param uid: User ID of the remote user.\n"
		"   :type elapsed: int\n"
		"   :param elapsed: Time elapsed (ms) from the remote user calling 'joinChannel' until the SDK triggers this callback.\n"
		""},
	 { "RtcEngineEventHandlerBase_onFirstLocalAudioFrame", _wrap_RtcEngineEventHandlerBase_onFirstLocalAudioFrame, METH_VARARGS, "\n"
		"Occurs when the engine sends the first local audio frame.\n"
		"\n"
		"    Deprecated: Deprecated as of v3.1.0. Use the 'onFirstLocalAudioFramePublished' callback instead.\n"
		"\n"
		"    :type elapsed: int\n"
		"    :param elapsed: Time elapsed (ms) from the local user calling 'joinChannel' until the SDK triggers this callback.\n"
		""},
	 { "RtcEngineEventHandlerBase_onMediaEngineStartCallSuccess", _wrap_RtcEngineEventHandlerBase_onMediaEngineStartCallSuccess, METH_O, " Occurs when the media engine call starts."},
	 { "RtcEngineEventHandlerBase_onMediaEngineLoadSuccess", _wrap_RtcEngineEventHandlerBase_onMediaEngineLoadSuccess, METH_O, " Occurs when the media engine loads."},
	 { "RtcEngineEventHandlerBase_onStreamMessageError", _wrap_RtcEngineEventHandlerBase_onStreamMessageError, METH_VARARGS, "\n"
		"Occurs when the local user does not receive the data stream from the remote user within five seconds.\n"
		"\n"
		"    The SDK triggers this callback when the local user fails to receive the stream message that the remote user sends by calling the 'sendStreamMessage' method.\n"
		"    :type uid: int\n"
		"    :param uid: User ID of the remote user sending the message.\n"
		"    :type streamId: int\n"
		"    :param streamId: Stream ID.\n"
		"    :type code: int\n"
		"    :param code: Error code: #ERROR_CODE_TYPE.\n"
		"    :type missed: int\n"
		"    :param missed: Number of lost messages.\n"
		"    :type cached: int\n"
		"    :param cached: Number of incoming cached messages when the data stream is interrupted.\n"
		""},
	 { "RtcEngineEventHandlerBase_onStreamMessage", _wrap_RtcEngineEventHandlerBase_onStreamMessage, METH_VARARGS, "\n"
		"Occurs when the local user receives the data stream from the remote user within five seconds.\n"
		"\n"
		"   The SDK triggers this callback when the local user receives the stream message that the remote user sends by calling the 'sendStreamMessage' method.\n"
		"   :type uid: int\n"
		"   :param uid: User ID of the remote user sending the message.\n"
		"   :type streamId: int\n"
		"   :param streamId: Stream ID.\n"
		"   :type data: string\n"
		"   :param data: Pointer to the data received by the local user.\n"
		"   :type length: int\n"
		"   :param length: Length of the data in bytes.\n"
		""},
	 { "RtcEngineEventHandlerBase_onConnectionBanned", _wrap_RtcEngineEventHandlerBase_onConnectionBanned, METH_O, "\n"
		"DEPRECATED** Deprecated as of v2.3.2. Replaced by the 'onConnectionStateChanged(CONNECTION_STATE_FAILED, CONNECTION_CHANGED_BANNED_BY_SERVER)' callback.\n"
		"\n"
		"    Occurs when your connection is banned by the Agora Server.\n"
		""},
	 { "RtcEngineEventHandlerBase_onLastmileQuality", _wrap_RtcEngineEventHandlerBase_onLastmileQuality, METH_VARARGS, "\n"
		"Reports the last mile network quality of the local user once every two seconds before the user joins the channel.\n"
		"\n"
		"    Last mile refers to the connection between the local device and Agora's edge server. After the application calls the 'enableLastmileTest' method, this callback reports once every two seconds the uplink and downlink last mile network conditions of the local user before the user joins the channel.\n"
		"\n"
		"    :type quality: int\n"
		"    :param quality: The last mile network quality: #QUALITY_TYPE.\n"
		""},
	 { "RtcEngineEventHandlerBase_onVideoStopped", _wrap_RtcEngineEventHandlerBase_onVideoStopped, METH_O, "\n"
		"DEPRECATED** Occurs when the video stops playing.\n"
		"\n"
		"     The application can use this callback to change the configuration of the view (for example, displaying other pictures in the view) after the video stops playing.\n"
		"\n"
		"     Deprecated as of v2.4.1. Use LOCAL_VIDEO_STREAM_STATE_STOPPED(0) in the 'onLocalVideoStateChanged' callback instead.\n"
		""},
	 { "RtcEngineEventHandlerBase_onApiCallExecuted", _wrap_RtcEngineEventHandlerBase_onApiCallExecuted, METH_VARARGS, "\n"
		"Occurs when a method is executed by the SDK.\n"
		"\n"
		"    :type err: int\n"
		"    :param err: The error code (#ERROR_CODE_TYPE) returned by the SDK when a method call fails. If the SDK returns 0, then the method call is successful.\n"
		"    :type api: string\n"
		"    :param api: Pointer to the method executed by the SDK.\n"
		"    :type result: string\n"
		"    :param result: Pointer to the result of the method call.\n"
		""},
	 { "RtcEngineEventHandlerBase_onTokenPrivilegeWillExpire", _wrap_RtcEngineEventHandlerBase_onTokenPrivilegeWillExpire, METH_VARARGS, "\n"
		"Occurs when the token expires in 30 seconds.\n"
		"\n"
		"    The user becomes offline if the token used in the 'joinChannel' method expires. The SDK triggers this callback 30 seconds before the token expires to remind the application to get a new token. Upon receiving this callback, generate a new token on the server and call the 'renewToken' method to pass the new token to the SDK.\n"
		"\n"
		"    :type token: string\n"
		"    :param token: Pointer to the token that expires in 30 seconds.\n"
		""},
	 { "RtcEngineEventHandlerBase_onNetworkQuality", _wrap_RtcEngineEventHandlerBase_onNetworkQuality, METH_VARARGS, "\n"
		"Reports the last mile network quality of each user in the channel once every two seconds.\n"
		"\n"
		"    Last mile refers to the connection between the local device and Agora's edge server. This callback reports once every two seconds the last mile network conditions of each user in the channel. If a channel includes multiple users, the SDK triggers this callback as many times.\n"
		"\n"
		"    :type uid: int\n"
		"    :param uid: User ID. The network quality of the user with this ``uid`` is reported. If ``uid`` is 0, the local network quality is reported.\n"
		"    :type txQuality: int\n"
		"    :param txQuality: Uplink transmission quality rating of the user in terms of the transmission bitrate, packet loss rate, average RTT (Round-Trip Time), and jitter of the uplink network. ``txQuality`` is a quality rating helping you understand how well the current uplink network conditions can support the selected VideoEncoderConfiguration. For example, a 1000 Kbps uplink network may be adequate for video frames with a resolution of 640 * 480 and a frame rate of 15 fps in the `LIVE_BROADCASTING` profile, but may be inadequate for resolutions higher than 1280 * 720. See #QUALITY_TYPE.\n"
		"    :type rxQuality: int\n"
		"    :param rxQuality: Downlink network quality rating of the user in terms of the packet loss rate, average RTT, and jitter of the downlink network. See #QUALITY_TYPE.\n"
		""},
	 { "RtcEngineEventHandlerBase_onLocalVideoStats", _wrap_RtcEngineEventHandlerBase_onLocalVideoStats, METH_VARARGS, "\n"
		" Reports the statistics of the local video stream.\n"
		"\n"
		"The SDK triggers this callback once every two seconds for each\n"
		"user/host. If there are multiple users/hosts in the channel, the SDK\n"
		"triggers this callback as many times.\n"
		"\n"
		"Notes: \n"
		"If you have called the\n"
		"'enableDualStreamMode'\n"
		"method, the 'onLocalVideoStats' callback\n"
		"reports the statistics of the high-video\n"
		"stream (high bitrate, and high-resolution video stream).\n"
		"\n"
		":type stats: :py:class:`LocalVideoStats`\n"
		":param stats: Statistics of the local video stream. See LocalVideoStats.\n"
		""},
	 { "RtcEngineEventHandlerBase_onLocalAudioStats", _wrap_RtcEngineEventHandlerBase_onLocalAudioStats, METH_VARARGS, "\n"
		" Reports the statistics of the local audio stream.\n"
		"\n"
		"The SDK triggers this callback once every two seconds.\n"
		"\n"
		":type stats: :py:class:`LocalAudioStats`\n"
		":param stats: The statistics of the local audio stream.\n"
		"    See LocalAudioStats.\n"
		""},
	 { "RtcEngineEventHandlerBase_onRemoteVideoStats", _wrap_RtcEngineEventHandlerBase_onRemoteVideoStats, METH_VARARGS, "\n"
		" Reports the statistics of the video stream from each remote user/host.\n"
		"\n"
		"The SDK triggers this callback once every two seconds for each remote\n"
		"user/host. If a channel includes multiple remote users, the SDK\n"
		"triggers this callback as many times.\n"
		"\n"
		":type stats: :py:class:`RemoteVideoStats`\n"
		":param stats: Statistics of the remote video stream. See\n"
		"    RemoteVideoStats.\n"
		""},
	 { "RtcEngineEventHandlerBase_onRemoteAudioStats", _wrap_RtcEngineEventHandlerBase_onRemoteAudioStats, METH_VARARGS, "\n"
		"Reports the statistics of the audio stream from each remote user/host.\n"
		"\n"
		"    This callback replaces the 'onAudioQuality' callback.\n"
		"\n"
		"    The SDK triggers this callback once every two seconds for each remote user/host. If a channel includes multiple remote users, the SDK triggers this callback as many times.\n"
		"\n"
		"    :type stats: :py:class:`RemoteAudioStats`\n"
		"    :param stats: Pointer to the statistics of the received remote audio streams. See RemoteAudioStats.\n"
		""},
	 { "RtcEngineEventHandlerBase_onFirstLocalVideoFrame", _wrap_RtcEngineEventHandlerBase_onFirstLocalVideoFrame, METH_VARARGS, "\n"
		"Occurs when the first local video frame is displayed/rendered on the local video view.\n"
		"\n"
		"   :type width: int\n"
		"   :param width: Width (px) of the first local video frame.\n"
		"   :type height: int\n"
		"   :param height: Height (px) of the first local video frame.\n"
		"   :type elapsed: int\n"
		"   :param elapsed: Time elapsed (ms) from the local user calling the 'joinChannel' method until the SDK triggers this callback.\n"
		"       If you call the 'startPreview' method  before calling the *joinChannel* method, then ``elapsed`` is the time elapsed from calling the *startPreview* method until the SDK triggers this callback.\n"
		""},
	 { "RtcEngineEventHandlerBase_onFirstRemoteVideoFrame", _wrap_RtcEngineEventHandlerBase_onFirstRemoteVideoFrame, METH_VARARGS, "\n"
		"Occurs when the first remote video frame is rendered.\n"
		"\n"
		"    The SDK triggers this callback when the first frame of the remote video is displayed in the user's video window. The application can retrieve the time elapsed from a user joining the channel until the first video frame is displayed.\n"
		"\n"
		"    :type uid: int\n"
		"    :param uid: User ID of the remote user sending the video stream.\n"
		"    :type width: int\n"
		"    :param width: Width (px) of the video frame.\n"
		"    :type height: int\n"
		"    :param height: Height (px) of the video stream.\n"
		"    :type elapsed: int\n"
		"    :param elapsed: Time elapsed (ms) from the local user calling the 'joinChannel' method until the SDK triggers this callback.\n"
		""},
	 { "RtcEngineEventHandlerBase_onUserEnableVideo", _wrap_RtcEngineEventHandlerBase_onUserEnableVideo, METH_VARARGS, "\n"
		" Occurs when a specific remote user enables/disables the video\n"
		"module.\n"
		"\n"
		"Deprecated: v2.9.0\n"
		"\n"
		"This callback is deprecated and replaced by the\n"
		"'onRemoteVideoStateChanged' callback\n"
		"with the following parameters:\n"
		"- #REMOTE_VIDEO_STATE_STOPPED (0) and\n"
		"#REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED (5).\n"
		"- #REMOTE_VIDEO_STATE_DECODING (2) and\n"
		"#REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED (6).\n"
		"\n"
		"Once the video module is disabled, the remote user can only use a\n"
		"voice call. The remote user cannot send or receive any video from\n"
		"other users.\n"
		"\n"
		"The SDK triggers this callback when the remote user enables or disables\n"
		"the video module by calling the\n"
		"'enableVideo' or\n"
		"'disableVideo' method.\n"
		"\n"
		"Notes: This callback returns invalid when the number of users in a\n"
		"channel exceeds 20.\n"
		"\n"
		":type uid: int\n"
		":param uid: User ID of the remote user.\n"
		":type enabled: boolean\n"
		":param enabled: Whether the remote user enables/disables the video\n"
		"    module:\n"
		"    - true: Enable. The remote user can enter a video session.\n"
		"    - false: Disable. The remote user can only enter a voice session, and\n"
		"    cannot send or receive any video stream.\n"
		""},
	 { "RtcEngineEventHandlerBase_onAudioDeviceStateChanged", _wrap_RtcEngineEventHandlerBase_onAudioDeviceStateChanged, METH_VARARGS, "\n"
		"Occurs when the audio device state changes.\n"
		"\n"
		"    This callback notifies the application that the system's audio device state is changed. For example, a headset is unplugged from the device.\n"
		"\n"
		"    :type deviceId: string\n"
		"    :param deviceId: Pointer to the device ID.\n"
		"    :type deviceType: int\n"
		"    :param deviceType: Device type: #MEDIA_DEVICE_TYPE.\n"
		"    :type deviceState: int\n"
		"    :param deviceState: Device state: #MEDIA_DEVICE_STATE_TYPE.\n"
		""},
	 { "RtcEngineEventHandlerBase_onCameraReady", _wrap_RtcEngineEventHandlerBase_onCameraReady, METH_O, "\n"
		"DEPRECATED** Occurs when the camera turns on and is ready to capture the video.\n"
		"\n"
		"     If the camera fails to turn on, fix the error reported in the 'onError' callback.\n"
		"\n"
		"     Deprecated as of v2.4.1. Use #LOCAL_VIDEO_STREAM_STATE_CAPTURING (1) in the 'onLocalVideoStateChanged' callback instead.\n"
		""},
	 { "RtcEngineEventHandlerBase_onCameraFocusAreaChanged", _wrap_RtcEngineEventHandlerBase_onCameraFocusAreaChanged, METH_VARARGS, "\n"
		"Occurs when the camera focus area changes.\n"
		"\n"
		"    The SDK triggers this callback when the local user changes the camera focus position by calling the setCameraFocusPositionInPreview method.\n"
		"\n"
		"    Notes: This callback is for Android and iOS only.\n"
		"\n"
		"    :type x: int\n"
		"    :param x: x coordinate of the changed camera focus area.\n"
		"    :type y: int\n"
		"    :param y: y coordinate of the changed camera focus area.\n"
		"    :type width: int\n"
		"    :param width: Width of the changed camera focus area.\n"
		"    :type height: int\n"
		"    :param height: Height of the changed camera focus area.\n"
		""},
	 { "RtcEngineEventHandlerBase_onCameraExposureAreaChanged", _wrap_RtcEngineEventHandlerBase_onCameraExposureAreaChanged, METH_VARARGS, "\n"
		"Occurs when the camera exposure area changes.\n"
		"\n"
		"   The SDK triggers this callback when the local user changes the camera exposure position by calling the setCameraExposurePosition method.\n"
		"\n"
		"    Notes: This callback is for Android and iOS only.\n"
		"\n"
		"    :type x: int\n"
		"    :param x: x coordinate of the changed camera exposure area.\n"
		"    :type y: int\n"
		"    :param y: y coordinate of the changed camera exposure area.\n"
		"    :type width: int\n"
		"    :param width: Width of the changed camera exposure area.\n"
		"    :type height: int\n"
		"    :param height: Height of the changed camera exposure area.\n"
		""},
	 { "RtcEngineEventHandlerBase_onRemoteAudioMixingBegin", _wrap_RtcEngineEventHandlerBase_onRemoteAudioMixingBegin, METH_O, "\n"
		" Occurs when the audio mixing file playback finishes.\n"
		"\n"
		"DEPRECATED**  use onAudioMixingStateChanged instead.\n"
		"\n"
		"     You can start an audio mixing file playback by calling the 'startAudioMixing' method. The SDK triggers this callback when the audio mixing file playback finishes.\n"
		"\n"
		"     If the *startAudioMixing* method call fails, an error code returns in the 'onError' callback.\n"
		""},
	 { "RtcEngineEventHandlerBase_onRemoteAudioMixingEnd", _wrap_RtcEngineEventHandlerBase_onRemoteAudioMixingEnd, METH_O, " Occurs when a remote user finishes audio mixing."},
	 { "RtcEngineEventHandlerBase_onAudioEffectFinished", _wrap_RtcEngineEventHandlerBase_onAudioEffectFinished, METH_VARARGS, "\n"
		"Occurs when the local audio effect playback finishes.\n"
		"\n"
		"    The SDK triggers this callback when the local audio effect file playback finishes.\n"
		"\n"
		"    :type soundId: int\n"
		"    :param soundId: ID of the local audio effect. Each local audio effect has a unique ID.\n"
		""},
	 { "RtcEngineEventHandlerBase_onVideoDeviceStateChanged", _wrap_RtcEngineEventHandlerBase_onVideoDeviceStateChanged, METH_VARARGS, "\n"
		"Occurs when the video device state changes.\n"
		"\n"
		"    Notes: On a Windows device with an external camera for video capturing, the video disables once the external camera is unplugged.\n"
		"\n"
		"    :type deviceId: string\n"
		"    :param deviceId: Pointer to the device ID of the video device that changes state.\n"
		"    :type deviceType: int\n"
		"    :param deviceType: Device type: #MEDIA_DEVICE_TYPE.\n"
		"    :type deviceState: int\n"
		"    :param deviceState: Device state: #MEDIA_DEVICE_STATE_TYPE.\n"
		""},
	 { "RtcEngineEventHandlerBase_onRemoteVideoStateChanged", _wrap_RtcEngineEventHandlerBase_onRemoteVideoStateChanged, METH_VARARGS, "\n"
		"Occurs when the remote video state changes.\n"
		"    Notes: This callback does not work properly when the number of users (in the `COMMUNICATION` profile) or hosts (in the `LIVE_BROADCASTING` profile) in the channel exceeds 17.\n"
		"\n"
		"    :type uid: int\n"
		"    :param uid: ID of the remote user whose video state changes.\n"
		"    :type state: int\n"
		"    :param state: State of the remote video. See #REMOTE_VIDEO_STATE.\n"
		"    :type reason: int\n"
		"    :param reason: The reason of the remote video state change. See\n"
		"        #REMOTE_VIDEO_STATE_REASON.\n"
		"    :type elapsed: int\n"
		"    :param elapsed: Time elapsed (ms) from the local user calling the\n"
		"        'joinChannel' method until the\n"
		"        SDK triggers this callback.\n"
		""},
	 { "RtcEngineEventHandlerBase_onUserEnableLocalVideo", _wrap_RtcEngineEventHandlerBase_onUserEnableLocalVideo, METH_VARARGS, "\n"
		" Occurs when a specified remote user enables/disables the local video\n"
		"capturing function.\n"
		"\n"
		"Deprecated: v2.9.0\n"
		"\n"
		"This callback is deprecated and replaced by the\n"
		"'onRemoteVideoStateChanged' callback\n"
		"with the following parameters:\n"
		"- #REMOTE_VIDEO_STATE_STOPPED (0) and\n"
		"#REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED (5).\n"
		"- #REMOTE_VIDEO_STATE_DECODING (2) and\n"
		"#REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED (6).\n"
		"\n"
		"This callback is only applicable to the scenario when the user only\n"
		"wants to watch the remote video without sending any video stream to the\n"
		"other user.\n"
		"\n"
		"The SDK triggers this callback when the remote user resumes or stops\n"
		"capturing the video stream by calling the\n"
		"'enableLocalVideo' method.\n"
		"\n"
		":type uid: int\n"
		":param uid: User ID of the remote user.\n"
		":type enabled: boolean\n"
		":param enabled: Whether the specified remote user enables/disables the\n"
		"    local video capturing function:\n"
		"    - true: Enable. Other users in the channel can see the video of this\n"
		"    remote user.\n"
		"    - false: Disable. Other users in the channel can no longer receive the\n"
		"    video stream from this remote user, while this remote user can still\n"
		"    receive the video streams from other users.\n"
		""},
	 { "RtcEngineEventHandlerBase_onLocalPublishFallbackToAudioOnly", _wrap_RtcEngineEventHandlerBase_onLocalPublishFallbackToAudioOnly, METH_VARARGS, "\n"
		"Occurs when the published media stream falls back to an audio-only stream due to poor network conditions or switches back to the video after the network conditions improve.\n"
		"\n"
		"   If you call 'setLocalPublishFallbackOption' and set *option* as #STREAM_FALLBACK_OPTION_AUDIO_ONLY, the SDK triggers this callback when the\n"
		"   published stream falls back to audio-only mode due to poor uplink conditions, or when the audio stream switches back to the video after the uplink network condition improves.\n"
		"   Notes: If the local stream fallbacks to the audio-only stream, the remote user receives the 'onUserMuteVideo' callback.\n"
		"\n"
		"   :type isFallbackOrRecover: boolean\n"
		"   :param isFallbackOrRecover: Whether the published stream falls back to audio-only or switches back to the video:\n"
		"       - true: The published stream falls back to audio-only due to poor network conditions.\n"
		"       - false: The published stream switches back to the video after the network conditions improve.\n"
		""},
	 { "RtcEngineEventHandlerBase_onRemoteSubscribeFallbackToAudioOnly", _wrap_RtcEngineEventHandlerBase_onRemoteSubscribeFallbackToAudioOnly, METH_VARARGS, "\n"
		" Occurs when the remote media stream falls back to audio-only stream\n"
		"due to poor network conditions or switches back to the video stream\n"
		"after the network conditions improve.\n"
		"\n"
		"If you call\n"
		"'IRtcEngine::setRemoteSubscribeFallbackOption'\n"
		"\"setRemoteSubscribeFallbackOption\" and set\n"
		"``option`` as #STREAM_FALLBACK_OPTION_AUDIO_ONLY, the SDK triggers this\n"
		"callback when the remote media stream falls back to audio-only mode due\n"
		"to poor uplink conditions, or when the remote media stream switches\n"
		"back to the video after the uplink network condition improves.\n"
		"\n"
		"Notes: Once the remote media stream switches to the low stream due to\n"
		"poor network conditions, you can monitor the stream switch between a\n"
		"high and low stream in the RemoteVideoStats callback.\n"
		"\n"
		":type uid: int\n"
		":param uid: ID of the remote user sending the stream.\n"
		":type isFallbackOrRecover: boolean\n"
		":param isFallbackOrRecover: Whether the remotely subscribed media stream\n"
		"    falls back to audio-only or switches back to the video:\n"
		"    - true: The remotely subscribed media stream falls back to audio-only\n"
		"    due to poor network conditions.\n"
		"    - false: The remotely subscribed media stream switches back to the\n"
		"    video stream after the network conditions improved.\n"
		""},
	 { "RtcEngineEventHandlerBase_onConnectionStateChanged", _wrap_RtcEngineEventHandlerBase_onConnectionStateChanged, METH_VARARGS, "\n"
		"Occurs when the connection state between the SDK and the server changes.\n"
		"\n"
		"    :type state: int\n"
		"    :param state: See #CONNECTION_STATE_TYPE.\n"
		"    :type reason: int\n"
		"    :param reason: See #CONNECTION_CHANGED_REASON_TYPE.\n"
		""},
	 { "RtcEngineEventHandlerBase_onFirstRemoteAudioDecoded", _wrap_RtcEngineEventHandlerBase_onFirstRemoteAudioDecoded, METH_VARARGS, "\n"
		"Occurs when the SDK decodes the first remote audio frame for playback.\n"
		"\n"
		"Deprecated: v3.0.0\n"
		"\n"
		"This callback is deprecated. Use `onRemoteAudioStateChanged` instead.\n"
		"\n"
		"This callback is triggered in either of the following scenarios:\n"
		"\n"
		"- The remote user joins the channel and sends the audio stream.\n"
		"- The remote user stops sending the audio stream and re-sends it after 15 seconds. Reasons for such an interruption include:\n"
		"    - The remote user leaves channel.\n"
		"    - The remote user drops offline.\n"
		"    - The remote user calls the 'muteLocalAudioStream' method to stop sending the local audio stream.\n"
		"    - The remote user calls the 'disableAudio' method to disable audio.\n"
		"\n"
		":type uid: int\n"
		":param uid: User ID of the remote user sending the audio stream.\n"
		":type elapsed: int\n"
		":param elapsed: Time elapsed (ms) from the local user calling the 'joinChannel' method until the SDK triggers this callback.\n"
		""},
	 { "RtcEngineEventHandlerBase_onLocalVideoStateChanged", _wrap_RtcEngineEventHandlerBase_onLocalVideoStateChanged, METH_VARARGS, "\n"
		"Occurs when the local video stream state changes.\n"
		"\n"
		"    This callback indicates the state of the local video stream, including camera capturing and video encoding, and allows you to troubleshoot issues when exceptions occur.\n"
		"\n"
		"    Notes: For some device models, the SDK will not trigger this callback when the state of the local video changes while the local video capturing device is in use, so you have to make your own timeout judgment.\n"
		"\n"
		"    :type localVideoState: int\n"
		"    :param localVideoState: State type #LOCAL_VIDEO_STREAM_STATE. When the state is LOCAL_VIDEO_STREAM_STATE_FAILED (3), see the `error` parameter for details.\n"
		"    :type error: int\n"
		"    :param error: The detailed error information: #LOCAL_VIDEO_STREAM_ERROR.\n"
		""},
	 { "RtcEngineEventHandlerBase_onRtmpStreamingStateChanged", _wrap_RtcEngineEventHandlerBase_onRtmpStreamingStateChanged, METH_VARARGS, "\n"
		"Occurs when the state of the RTMP streaming changes.\n"
		"\n"
		"The SDK triggers this callback to report the result of the local user calling the 'addPublishStreamUrl' or 'removePublishStreamUrl' method.\n"
		"\n"
		"This callback indicates the state of the RTMP streaming. When exceptions occur, you can troubleshoot issues by referring to the detailed error descriptions in the *errCode* parameter.\n"
		"\n"
		":type url: string\n"
		":param url: The RTMP URL address.\n"
		":type state: int\n"
		":param state: The RTMP streaming state. See: #RTMP_STREAM_PUBLISH_STATE.\n"
		":type errCode: int\n"
		":param errCode: The detailed error information for streaming. See: #RTMP_STREAM_PUBLISH_ERROR.\n"
		""},
	 { "RtcEngineEventHandlerBase_onNetworkTypeChanged", _wrap_RtcEngineEventHandlerBase_onNetworkTypeChanged, METH_VARARGS, "\n"
		"Occurs when the local network type changes.\n"
		"\n"
		"    When the network connection is interrupted, this callback indicates whether the interruption is caused by a network type change or poor network conditions.\n"
		"\n"
		"    :type type: int\n"
		"    :param type: See #NETWORK_TYPE.\n"
		""},
	 { "RtcEngineEventHandlerBase_onLastmileProbeResult", _wrap_RtcEngineEventHandlerBase_onLastmileProbeResult, METH_VARARGS, "\n"
		"Reports the last-mile network probe result.\n"
		"\n"
		"    The SDK triggers this callback within 30 seconds after the app calls the 'startLastmileProbeTest' method.\n"
		"\n"
		"    :type result: :py:class:`LastmileProbeResult`\n"
		"    :param result: The uplink and downlink last-mile network probe test result. See LastmileProbeResult.\n"
		""},
	 { "RtcEngineEventHandlerBase_onLocalUserRegistered", _wrap_RtcEngineEventHandlerBase_onLocalUserRegistered, METH_VARARGS, "\n"
		"Occurs when the local user successfully registers a user account by calling the 'registerLocalUserAccount' method or joins a channel by calling the 'joinChannelWithUserAccount' method.This callback reports the user ID and user account of the local user.\n"
		"\n"
		"    :type uid: int\n"
		"    :param uid: The ID of the local user.\n"
		"    :type userAccount: string\n"
		"    :param userAccount: The user account of the local user.\n"
		""},
	 { "RtcEngineEventHandlerBase_onUserInfoUpdated", _wrap_RtcEngineEventHandlerBase_onUserInfoUpdated, METH_VARARGS, "\n"
		"Occurs when the SDK gets the user ID and user account of the remote user.\n"
		"\n"
		"    After a remote user joins the channel, the SDK gets the UID and user account of the remote user,\n"
		"    caches them in a mapping table object (`userInfo`), and triggers this callback on the local client.\n"
		"\n"
		"    :type uid: int\n"
		"    :param uid: The ID of the remote user.\n"
		"    :type info: :py:class:`UserInfo`\n"
		"    :param info: The `UserInfo` object that contains the user ID and user account of the remote user.\n"
		""},
	 { "RtcEngineEventHandlerBase_onLocalAudioStateChanged", _wrap_RtcEngineEventHandlerBase_onLocalAudioStateChanged, METH_VARARGS, "\n"
		" Occurs when the local audio state changes.\n"
		"This callback indicates the state change of the local audio stream,\n"
		"including the state of the audio recording and encoding, and allows\n"
		"you to troubleshoot issues when exceptions occur.\n"
		"\n"
		"Notes: \n"
		"When the state is #LOCAL_AUDIO_STREAM_STATE_FAILED (3), see the `error`\n"
		"parameter for details.\n"
		"\n"
		":type state: int\n"
		":param state: State of the local audio. See #LOCAL_AUDIO_STREAM_STATE.\n"
		":type error: int\n"
		":param error: The error information of the local audio.\n"
		"    See #LOCAL_AUDIO_STREAM_ERROR.\n"
		""},
	 { "RtcEngineEventHandlerBase_onRemoteAudioStateChanged", _wrap_RtcEngineEventHandlerBase_onRemoteAudioStateChanged, METH_VARARGS, "\n"
		"Occurs when the remote audio state changes.\n"
		"\n"
		"    This callback indicates the state change of the remote audio stream.\n"
		"    Notes: This callback does not work properly when the number of users (in the `COMMUNICATION` profile) or hosts (in the `LIVE_BROADCASTING` profile) in the channel exceeds 17.\n"
		"\n"
		"    :type uid: int\n"
		"    :param uid: ID of the remote user whose audio state changes.\n"
		"    :type state: int\n"
		"    :param state: State of the remote audio. See #REMOTE_AUDIO_STATE.\n"
		"    :type reason: int\n"
		"    :param reason: The reason of the remote audio state change.\n"
		"        See #REMOTE_AUDIO_STATE_REASON.\n"
		"    :type elapsed: int\n"
		"    :param elapsed: Time elapsed (ms) from the local user calling the\n"
		"        'joinChannel' method until the SDK\n"
		"        triggers this callback.\n"
		""},
	 { "RtcEngineEventHandlerBase_onChannelMediaRelayStateChanged", _wrap_RtcEngineEventHandlerBase_onChannelMediaRelayStateChanged, METH_VARARGS, "\n"
		" Occurs when the state of the media stream relay changes.\n"
		"\n"
		"The SDK returns the state of the current media relay with any error\n"
		"message.\n"
		"\n"
		":type state: int\n"
		":param state: The state code in #CHANNEL_MEDIA_RELAY_STATE.\n"
		":type code: int\n"
		":param code: The error code in #CHANNEL_MEDIA_RELAY_ERROR.\n"
		""},
	 { "RtcEngineEventHandlerBase_onChannelMediaRelayEvent", _wrap_RtcEngineEventHandlerBase_onChannelMediaRelayEvent, METH_VARARGS, "\n"
		" Reports events during the media stream relay.\n"
		"\n"
		":type code: int\n"
		":param code: The event code in #CHANNEL_MEDIA_RELAY_EVENT.\n"
		""},
	 { "RtcEngineEventHandlerBase_onTestEnd", _wrap_RtcEngineEventHandlerBase_onTestEnd, METH_O, NULL},
	 { "new_RtcEngineEventHandlerBase", _wrap_new_RtcEngineEventHandlerBase, METH_O, NULL},
	 { "disown_RtcEngineEventHandlerBase", _wrap_disown_RtcEngineEventHandlerBase, METH_O, NULL},
	 { "RtcEngineEventHandlerBase_swigregister", RtcEngineEventHandlerBase_swigregister, METH_O, NULL},
	 { "RtcEngineEventHandlerBase_swiginit", RtcEngineEventHandlerBase_swiginit, METH_VARARGS, NULL},
	 { "new_IChannelEventHandler", _wrap_new_IChannelEventHandler, METH_NOARGS, NULL},
	 { "delete_IChannelEventHandler", _wrap_delete_IChannelEventHandler, METH_O, NULL},
	 { "IChannelEventHandler_swigregister", IChannelEventHandler_swigregister, METH_O, NULL},
	 { "IChannelEventHandler_swiginit", IChannelEventHandler_swiginit, METH_VARARGS, NULL},
	 { "delete_RtcChannelEventHandlerBase", _wrap_delete_RtcChannelEventHandlerBase, METH_O, NULL},
	 { "RtcChannelEventHandlerBase_onChannelWarning", _wrap_RtcChannelEventHandlerBase_onChannelWarning, METH_VARARGS, "\n"
		" Reports the warning code of `IChannel`.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type warn: int\n"
		":param warn: The warning code: #WARN_CODE_TYPE\n"
		"    		 :type msg: string\n"
		":param msg: The warning message.\n"
		""},
	 { "RtcChannelEventHandlerBase_onChannelError", _wrap_RtcChannelEventHandlerBase_onChannelError, METH_VARARGS, "\n"
		" Reports the error code of `IChannel`.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type err: int\n"
		":param err: The error code: #ERROR_CODE_TYPE\n"
		"    		 :type msg: string\n"
		":param msg: The error message.\n"
		""},
	 { "RtcChannelEventHandlerBase_onJoinChannelSuccess", _wrap_RtcChannelEventHandlerBase_onJoinChannelSuccess, METH_VARARGS, "\n"
		" Occurs when a user joins a channel.\n"
		"\n"
		"		     This callback notifies the application that a user joins a specified channel.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type uid: int\n"
		":param uid: The user ID. If the `uid` is not specified in the 'joinChannel' method, the server automatically assigns a `uid`.\n"
		"\n"
		"		     :type elapsed: int\n"
		":param elapsed: Time elapsed (ms) from the local user calling 'joinChannel' until this callback is triggered.\n"
		""},
	 { "RtcChannelEventHandlerBase_onRejoinChannelSuccess", _wrap_RtcChannelEventHandlerBase_onRejoinChannelSuccess, METH_VARARGS, "\n"
		" Occurs when a user rejoins the channel after being disconnected due to network problems.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type uid: int\n"
		":param uid: The user ID.\n"
		"    		 :type elapsed: int\n"
		":param elapsed: Time elapsed (ms) from the local user starting to reconnect until this callback is triggered.\n"
		""},
	 { "RtcChannelEventHandlerBase_onLeaveChannel", _wrap_RtcChannelEventHandlerBase_onLeaveChannel, METH_VARARGS, "\n"
		" Occurs when a user leaves the channel.\n"
		"\n"
		"		     This callback notifies the application that a user leaves the channel when the application calls the 'leaveChannel' method.\n"
		"\n"
		"		     The application retrieves information, such as the call duration and statistics.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type stats: :py:class:`RtcStats`\n"
		":param stats: The call statistics: RtcStats.\n"
		""},
	 { "RtcChannelEventHandlerBase_onClientRoleChanged", _wrap_RtcChannelEventHandlerBase_onClientRoleChanged, METH_VARARGS, "\n"
		" Occurs when the user role switches in the live interactive streaming. For example, from a host to an audience or vice versa.\n"
		"\n"
		"		     This callback notifies the application of a user role switch when the application calls the 'setClientRole' method.\n"
		"\n"
		"		     The SDK triggers this callback when the local user switches the user role by calling the 'setClientRole' method after joining the channel.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type oldRole: int\n"
		":param oldRole: Role that the user switches from: #CLIENT_ROLE_TYPE.\n"
		"    		 :type newRole: int\n"
		":param newRole: Role that the user switches to: #CLIENT_ROLE_TYPE.\n"
		""},
	 { "RtcChannelEventHandlerBase_onUserJoined", _wrap_RtcChannelEventHandlerBase_onUserJoined, METH_VARARGS, "\n"
		" Occurs when a remote user (`COMMUNICATION`)/ host (`LIVE_BROADCASTING`) joins the channel.\n"
		"\n"
		"		     - `COMMUNICATION` profile: This callback notifies the application that another user joins the channel. If other users are already in the channel, the SDK also reports to the application on the existing users.\n"
		"		     - `LIVE_BROADCASTING` profile: This callback notifies the application that the host joins the channel. If other hosts are already in the channel, the SDK also reports to the application on the existing hosts. We recommend limiting the number of hosts to 17.\n"
		"\n"
		"		     The SDK triggers this callback under one of the following circumstances:\n"
		"		     - A remote user/host joins the channel by calling the 'joinChannel' method.\n"
		"		     - A remote user switches the user role to the host by calling the 'setClientRole' method after joining the channel.\n"
		"		     - A remote user/host rejoins the channel after a network interruption.\n"
		"		     - The host injects an online media stream into the channel by calling the 'addInjectStreamUrl' method.\n"
		"\n"
		"		     Notes: In the `LIVE_BROADCASTING` profile:\n"
		"		     - The host receives this callback when another host joins the channel.\n"
		"		     - The audience in the channel receives this callback when a new host joins the channel.\n"
		"		     - When a web application joins the channel, the SDK triggers this callback as long as the web application publishes streams.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type uid: int\n"
		":param uid: User ID of the user or host joining the channel.\n"
		"    		 :type elapsed: int\n"
		":param elapsed: Time delay (ms) from the local user calling the 'joinChannel' method until the SDK triggers this callback.\n"
		""},
	 { "RtcChannelEventHandlerBase_onUserOffline", _wrap_RtcChannelEventHandlerBase_onUserOffline, METH_VARARGS, "\n"
		" Occurs when a remote user ( `COMMUNICATION`)/host (`LIVE_BROADCASTING`) leaves the channel.\n"
		"\n"
		"		     Reasons why the user is offline:\n"
		"\n"
		"		     - Leave the channel: When the user/host leaves the channel, the user/host sends a goodbye message. When the message is received, the SDK assumes that the user/host leaves the channel.\n"
		"		     - Drop offline: When no data packet of the user or host is received for a certain period of time, the SDK assumes that the user/host drops offline. Unreliable network connections may lead to false detections, so we recommend using the Agora RTM SDK for more reliable offline detection.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type uid: int\n"
		":param uid: User ID of the user leaving the channel or going offline.\n"
		"    		 :type reason: int\n"
		":param reason: Reason why the user is offline: #USER_OFFLINE_REASON_TYPE.\n"
		""},
	 { "RtcChannelEventHandlerBase_onConnectionLost", _wrap_RtcChannelEventHandlerBase_onConnectionLost, METH_VARARGS, "\n"
		" Occurs when the SDK cannot reconnect to Agora's edge server 10 seconds after its connection to the server is interrupted.\n"
		"\n"
		"		     The SDK triggers this callback when it cannot connect to the server 10 seconds after calling the 'joinChannel' method, whether or not it is in the channel.\n"
		"\n"
		"		     This callback is different from 'onConnectionInterrupted':\n"
		"\n"
		"		     - The SDK triggers the `onConnectionInterrupted` callback when it loses connection with the server for more than four seconds after it successfully joins the channel.\n"
		"		     - The SDK triggers the `onConnectionLost` callback when it loses connection with the server for more than 10 seconds, whether or not it joins the channel.\n"
		"\n"
		"		     If the SDK fails to rejoin the channel 20 minutes after being disconnected from Agora's edge server, the SDK stops rejoining the channel.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		""},
	 { "RtcChannelEventHandlerBase_onRequestToken", _wrap_RtcChannelEventHandlerBase_onRequestToken, METH_VARARGS, "\n"
		" Occurs when the token expires.\n"
		"\n"
		"		     After a token is specified by calling the 'joinChannel' method, if the SDK losses connection with the Agora server due to network issues, the token may expire after a certain period of time and a new token may be required to reconnect to the server.\n"
		"\n"
		"		     This callback notifies the app to generate a new token and call `joinChannel` to rejoin the channel with the new token.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		""},
	 { "RtcChannelEventHandlerBase_onTokenPrivilegeWillExpire", _wrap_RtcChannelEventHandlerBase_onTokenPrivilegeWillExpire, METH_VARARGS, "\n"
		" Occurs when the token expires in 30 seconds.\n"
		"\n"
		"		     The user becomes offline if the token used in the 'joinChannel' method expires. The SDK triggers this callback 30 seconds before the token expires to remind the application to get a new token. Upon receiving this callback, generate a new token on the server and call the 'renewToken' method to pass the new token to the SDK.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type token: string\n"
		":param token: Token that expires in 30 seconds.\n"
		""},
	 { "RtcChannelEventHandlerBase_onRtcStats", _wrap_RtcChannelEventHandlerBase_onRtcStats, METH_VARARGS, "\n"
		" Reports the statistics of the current call.\n"
		"\n"
		"		     The SDK triggers this callback once every two seconds after the user joins the channel.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type stats: :py:class:`RtcStats`\n"
		":param stats: Statistics of the RtcEngine: RtcStats.\n"
		""},
	 { "RtcChannelEventHandlerBase_onNetworkQuality", _wrap_RtcChannelEventHandlerBase_onNetworkQuality, METH_VARARGS, "\n"
		" Reports the last mile network quality of each user in the channel once every two seconds.\n"
		"\n"
		"		     Last mile refers to the connection between the local device and Agora's edge server. This callback reports once every two seconds the last mile network conditions of each user in the channel. If a channel includes multiple users, the SDK triggers this callback as many times.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type uid: int\n"
		":param uid: User ID. The network quality of the user with this ``uid`` is reported. If ``uid`` is 0, the local network quality is reported.\n"
		"    		 :type txQuality: int\n"
		":param txQuality: Uplink transmission quality rating of the user in terms of the transmission bitrate, packet loss rate, average RTT (Round-Trip Time), and jitter of the uplink network. ``txQuality`` is a quality rating helping you understand how well the current uplink network conditions can support the selected VideoEncoderConfiguration. For example, a 1000 Kbps uplink network may be adequate for video frames with a resolution of 640 * 480 and a frame rate of 15 fps in the `LIVE_BROADCASTING` profile, but may be inadequate for resolutions higher than 1280 * 720. See #QUALITY_TYPE.\n"
		"    		 :type rxQuality: int\n"
		":param rxQuality: Downlink network quality rating of the user in terms of the packet loss rate, average RTT, and jitter of the downlink network. See #QUALITY_TYPE.\n"
		""},
	 { "RtcChannelEventHandlerBase_onRemoteVideoStats", _wrap_RtcChannelEventHandlerBase_onRemoteVideoStats, METH_VARARGS, "\n"
		" Reports the statistics of the video stream from each remote user/host.\n"
		"\n"
		"The SDK triggers this callback once every two seconds for each remote\n"
		"user/host. If a channel includes multiple remote users, the SDK\n"
		"triggers this callback as many times.\n"
		"\n"
		":type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		":type stats: :py:class:`RemoteVideoStats`\n"
		":param stats: Statistics of the remote video stream. See\n"
		"    RemoteVideoStats.\n"
		""},
	 { "RtcChannelEventHandlerBase_onRemoteAudioStats", _wrap_RtcChannelEventHandlerBase_onRemoteAudioStats, METH_VARARGS, "\n"
		" Reports the statistics of the audio stream from each remote user/host.\n"
		"\n"
		"		     This callback replaces the 'onAudioQuality' callback.\n"
		"\n"
		"		     The SDK triggers this callback once every two seconds for each remote user/host. If a channel includes multiple remote users, the SDK triggers this callback as many times.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type stats: :py:class:`RemoteAudioStats`\n"
		":param stats: The statistics of the received remote audio streams. See RemoteAudioStats.\n"
		""},
	 { "RtcChannelEventHandlerBase_onRemoteAudioStateChanged", _wrap_RtcChannelEventHandlerBase_onRemoteAudioStateChanged, METH_VARARGS, "\n"
		" Occurs when the remote audio state changes.\n"
		"\n"
		"		      This callback indicates the state change of the remote audio stream.\n"
		"		      Notes: This callback does not work properly when the number of users (in the `COMMUNICATION` profile) or hosts (in the `LIVE_BROADCASTING` profile) in the channel exceeds 17.\n"
		"\n"
		"		      :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		  :type uid: int\n"
		":param uid: ID of the remote user whose audio state changes.\n"
		"    		  :type state: int\n"
		":param state: State of the remote audio. See #REMOTE_AUDIO_STATE.\n"
		"    		  :type reason: int\n"
		":param reason: The reason of the remote audio state change.\n"
		"    		      See #REMOTE_AUDIO_STATE_REASON.\n"
		"    		  :type elapsed: int\n"
		":param elapsed: Time elapsed (ms) from the local user calling the\n"
		"    		      'joinChannel' method until the SDK\n"
		"    		      triggers this callback.\n"
		""},
	 { "RtcChannelEventHandlerBase_onActiveSpeaker", _wrap_RtcChannelEventHandlerBase_onActiveSpeaker, METH_VARARGS, "\n"
		" Reports which user is the loudest speaker.\n"
		"\n"
		"		     If the user enables the audio volume indication by calling the 'IRtcEngine::enableAudioVolumeIndication(int', int, bool) \"enableAudioVolumeIndication\" method, this callback returns the ``uid`` of the active speaker detected by the audio volume detection module of the SDK.\n"
		"\n"
		"		     Notes: \n"
		"		     - To receive this callback, you need to call the 'IRtcEngine::enableAudioVolumeIndication(int', int, bool) \"enableAudioVolumeIndication\" method.\n"
		"		     - This callback returns the user ID of the user with the highest voice volume during a period of time, instead of at the moment.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type uid: int\n"
		":param uid: User ID of the active speaker. A `uid` of 0 represents the local user.\n"
		""},
	 { "RtcChannelEventHandlerBase_onVideoSizeChanged", _wrap_RtcChannelEventHandlerBase_onVideoSizeChanged, METH_VARARGS, "\n"
		" Occurs when the video size or rotation of a specified user changes.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type uid: int\n"
		":param uid: User ID of the remote user or local user (0) whose video size or rotation changes.\n"
		"    		 :type width: int\n"
		":param width: New width (pixels) of the video.\n"
		"    		 :type height: int\n"
		":param height: New height (pixels) of the video.\n"
		"    		 :type rotation: int\n"
		":param rotation: New rotation of the video [0 to 360).\n"
		""},
	 { "RtcChannelEventHandlerBase_onRemoteVideoStateChanged", _wrap_RtcChannelEventHandlerBase_onRemoteVideoStateChanged, METH_VARARGS, "\n"
		" Occurs when the remote video state changes.\n"
		"\n"
		"		     Notes: This callback does not work properly when the number of users (in the `COMMUNICATION` profile) or hosts (in the `LIVE_BROADCASTING` profile) in the channel exceeds 17.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type uid: int\n"
		":param uid: ID of the remote user whose video state changes.\n"
		"    		 :type state: int\n"
		":param state: State of the remote video. See #REMOTE_VIDEO_STATE.\n"
		"    		 :type reason: int\n"
		":param reason: The reason of the remote video state change. See\n"
		"    		     #REMOTE_VIDEO_STATE_REASON.\n"
		"    		 :type elapsed: int\n"
		":param elapsed: Time elapsed (ms) from the local user calling the\n"
		"    		     'joinChannel' method until the\n"
		"    		     SDK triggers this callback.\n"
		""},
	 { "RtcChannelEventHandlerBase_onStreamMessage", _wrap_RtcChannelEventHandlerBase_onStreamMessage, METH_VARARGS, "\n"
		" Occurs when the local user receives the data stream from the remote user within five seconds.\n"
		"\n"
		"		     The SDK triggers this callback when the local user receives the stream message that the remote user sends by calling the 'sendStreamMessage' method.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type uid: int\n"
		":param uid: User ID of the remote user sending the message.\n"
		"    		 :type streamId: int\n"
		":param streamId: Stream ID.\n"
		"    		 :type data: string\n"
		":param data: The data received by the local user.\n"
		"    		 :type length: int\n"
		":param length: Length of the data in bytes.\n"
		""},
	 { "RtcChannelEventHandlerBase_onStreamMessageError", _wrap_RtcChannelEventHandlerBase_onStreamMessageError, METH_VARARGS, "\n"
		" Occurs when the local user does not receive the data stream from the remote user within five seconds.\n"
		"\n"
		"		     The SDK triggers this callback when the local user fails to receive the stream message that the remote user sends by calling the 'sendStreamMessage' method.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type uid: int\n"
		":param uid: User ID of the remote user sending the message.\n"
		"    		 :type streamId: int\n"
		":param streamId: Stream ID.\n"
		"    		 :type code: int\n"
		":param code: Error code: #ERROR_CODE_TYPE.\n"
		"    		 :type missed: int\n"
		":param missed: Number of lost messages.\n"
		"    		 :type cached: int\n"
		":param cached: Number of incoming cached messages when the data stream is interrupted.\n"
		""},
	 { "RtcChannelEventHandlerBase_onChannelMediaRelayStateChanged", _wrap_RtcChannelEventHandlerBase_onChannelMediaRelayStateChanged, METH_VARARGS, "\n"
		" Occurs when the state of the media stream relay changes.\n"
		"\n"
		"The SDK returns the state of the current media relay with any error\n"
		"message.\n"
		":type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		":type state: int\n"
		":param state: The state code in #CHANNEL_MEDIA_RELAY_STATE.\n"
		":type code: int\n"
		":param code: The error code in #CHANNEL_MEDIA_RELAY_ERROR.\n"
		""},
	 { "RtcChannelEventHandlerBase_onChannelMediaRelayEvent", _wrap_RtcChannelEventHandlerBase_onChannelMediaRelayEvent, METH_VARARGS, "\n"
		" Reports events during the media stream relay.\n"
		":type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		":type code: int\n"
		":param code: The event code in #CHANNEL_MEDIA_RELAY_EVENT.\n"
		""},
	 { "RtcChannelEventHandlerBase_onRtmpStreamingStateChanged", _wrap_RtcChannelEventHandlerBase_onRtmpStreamingStateChanged, METH_VARARGS, "\n"
		"		     Occurs when the state of the RTMP streaming changes.\n"
		"\n"
		"		     The SDK triggers this callback to report the result of the local user calling the 'addPublishStreamUrl' or 'removePublishStreamUrl' method.\n"
		"\n"
		"		     This callback indicates the state of the RTMP streaming. When exceptions occur, you can troubleshoot issues by referring to the detailed error descriptions in the *errCode* parameter.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type url: string\n"
		":param url: The RTMP URL address.\n"
		"    		 :type state: int\n"
		":param state: The RTMP streaming state. See: #RTMP_STREAM_PUBLISH_STATE.\n"
		"    		 :type errCode: int\n"
		":param errCode: The detailed error information for streaming. See: #RTMP_STREAM_PUBLISH_ERROR.\n"
		""},
	 { "RtcChannelEventHandlerBase_onTranscodingUpdated", _wrap_RtcChannelEventHandlerBase_onTranscodingUpdated, METH_VARARGS, "\n"
		" Reports events during the RTMP streaming.\n"
		"\n"
		"Since: v3.1.0\n"
		"\n"
		":type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		":param url: The RTMP streaming URL.\n"
		":param eventCode: The event code. See #RTMP_STREAMING_EVENT\n"
		""},
	 { "RtcChannelEventHandlerBase_onStreamInjectedStatus", _wrap_RtcChannelEventHandlerBase_onStreamInjectedStatus, METH_VARARGS, "\n"
		" Occurs when a voice or video stream URL address is added to the live interactive streaming.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type url: string\n"
		":param url: The URL address of the externally injected stream.\n"
		"    		 :type uid: int\n"
		":param uid: User ID.\n"
		"    		 :type status: int\n"
		":param status: State of the externally injected stream: #INJECT_STREAM_STATUS.\n"
		""},
	 { "RtcChannelEventHandlerBase_onLocalPublishFallbackToAudioOnly", _wrap_RtcChannelEventHandlerBase_onLocalPublishFallbackToAudioOnly, METH_VARARGS, "\n"
		" Occurs when the published media stream falls back to an audio-only stream due to poor network conditions or switches back to the video after the network conditions improve.\n"
		"\n"
		"		    If you call 'setLocalPublishFallbackOption' and set *option* as #STREAM_FALLBACK_OPTION_AUDIO_ONLY, the SDK triggers this callback when the published stream falls back to audio-only mode due to poor uplink conditions, or when the audio stream switches back to the video after the uplink network condition improves.\n"
		"\n"
		"		    :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		:type isFallbackOrRecover: boolean\n"
		":param isFallbackOrRecover: Whether the published stream falls back to audio-only or switches back to the video:\n"
		"    		    - true: The published stream falls back to audio-only due to poor network conditions.\n"
		"    		    - false: The published stream switches back to the video after the network conditions improve.\n"
		""},
	 { "RtcChannelEventHandlerBase_onRemoteSubscribeFallbackToAudioOnly", _wrap_RtcChannelEventHandlerBase_onRemoteSubscribeFallbackToAudioOnly, METH_VARARGS, "\n"
		" Occurs when the remote media stream falls back to audio-only stream\n"
		"due to poor network conditions or switches back to the video stream\n"
		"after the network conditions improve.\n"
		"\n"
		"If you call\n"
		"'IRtcEngine::setRemoteSubscribeFallbackOption'\n"
		"\"setRemoteSubscribeFallbackOption\" and set\n"
		"``option`` as #STREAM_FALLBACK_OPTION_AUDIO_ONLY, the SDK triggers this\n"
		"callback when the remote media stream falls back to audio-only mode due\n"
		"to poor uplink conditions, or when the remote media stream switches\n"
		"back to the video after the uplink network condition improves.\n"
		"\n"
		"Notes: Once the remote media stream switches to the low stream due to\n"
		"poor network conditions, you can monitor the stream switch between a\n"
		"high and low stream in the RemoteVideoStats callback.\n"
		":type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		":type uid: int\n"
		":param uid: ID of the remote user sending the stream.\n"
		":type isFallbackOrRecover: boolean\n"
		":param isFallbackOrRecover: Whether the remotely subscribed media stream\n"
		"    falls back to audio-only or switches back to the video:\n"
		"    - true: The remotely subscribed media stream falls back to audio-only\n"
		"    due to poor network conditions.\n"
		"    - false: The remotely subscribed media stream switches back to the\n"
		"    video stream after the network conditions improved.\n"
		""},
	 { "RtcChannelEventHandlerBase_onConnectionStateChanged", _wrap_RtcChannelEventHandlerBase_onConnectionStateChanged, METH_VARARGS, "\n"
		" Occurs when the connection state between the SDK and the server changes.\n"
		"\n"
		"		     :type rtcChannel: :py:class:`IChannel`\n"
		":param rtcChannel: IChannel\n"
		"    		 :type state: int\n"
		":param state: See #CONNECTION_STATE_TYPE.\n"
		"    		 :type reason: int\n"
		":param reason: See #CONNECTION_CHANGED_REASON_TYPE.\n"
		""},
	 { "RtcChannelEventHandlerBase_onTestEnd", _wrap_RtcChannelEventHandlerBase_onTestEnd, METH_VARARGS, NULL},
	 { "new_RtcChannelEventHandlerBase", _wrap_new_RtcChannelEventHandlerBase, METH_O, NULL},
	 { "disown_RtcChannelEventHandlerBase", _wrap_disown_RtcChannelEventHandlerBase, METH_O, NULL},
	 { "RtcChannelEventHandlerBase_swigregister", RtcChannelEventHandlerBase_swigregister, METH_O, NULL},
	 { "RtcChannelEventHandlerBase_swiginit", RtcChannelEventHandlerBase_swiginit, METH_VARARGS, NULL},
	 { "createVideoCanvas", _wrap_createVideoCanvas, METH_O, NULL},
	 { "createRtcEngineBridge", _wrap_createRtcEngineBridge, METH_NOARGS, NULL},
	 { "delete_VideoFrameObserver", _wrap_delete_VideoFrameObserver, METH_O, NULL},
	 { "VideoFrameObserver_onCaptureVideoFrame", _wrap_VideoFrameObserver_onCaptureVideoFrame, METH_VARARGS, NULL},
	 { "VideoFrameObserver_onRenderVideoFrame", _wrap_VideoFrameObserver_onRenderVideoFrame, METH_VARARGS, NULL},
	 { "VideoFrameObserver_privateData_set", _wrap_VideoFrameObserver_privateData_set, METH_VARARGS, NULL},
	 { "VideoFrameObserver_privateData_get", _wrap_VideoFrameObserver_privateData_get, METH_O, NULL},
	 { "new_VideoFrameObserver", _wrap_new_VideoFrameObserver, METH_O, NULL},
	 { "disown_VideoFrameObserver", _wrap_disown_VideoFrameObserver, METH_O, NULL},
	 { "VideoFrameObserver_swigregister", VideoFrameObserver_swigregister, METH_O, NULL},
	 { "VideoFrameObserver_swiginit", VideoFrameObserver_swiginit, METH_VARARGS, NULL},
	 { "registerVideoFrameObserver", _wrap_registerVideoFrameObserver, METH_VARARGS, NULL},
	 { "unregisterVideoFrameObserver", _wrap_unregisterVideoFrameObserver, METH_VARARGS, NULL},
	 { "delete_AudioFrameObserver", _wrap_delete_AudioFrameObserver, METH_O, NULL},
	 { "AudioFrameObserver_onRecordAudioFrame", _wrap_AudioFrameObserver_onRecordAudioFrame, METH_VARARGS, NULL},
	 { "AudioFrameObserver_onPlaybackAudioFrame", _wrap_AudioFrameObserver_onPlaybackAudioFrame, METH_VARARGS, NULL},
	 { "AudioFrameObserver_onMixedAudioFrame", _wrap_AudioFrameObserver_onMixedAudioFrame, METH_VARARGS, NULL},
	 { "AudioFrameObserver_onPlaybackAudioFrameBeforeMixing", _wrap_AudioFrameObserver_onPlaybackAudioFrameBeforeMixing, METH_VARARGS, NULL},
	 { "AudioFrameObserver_privateData_set", _wrap_AudioFrameObserver_privateData_set, METH_VARARGS, NULL},
	 { "AudioFrameObserver_privateData_get", _wrap_AudioFrameObserver_privateData_get, METH_O, NULL},
	 { "new_AudioFrameObserver", _wrap_new_AudioFrameObserver, METH_O, NULL},
	 { "disown_AudioFrameObserver", _wrap_disown_AudioFrameObserver, METH_O, NULL},
	 { "AudioFrameObserver_swigregister", AudioFrameObserver_swigregister, METH_O, NULL},
	 { "AudioFrameObserver_swiginit", AudioFrameObserver_swiginit, METH_VARARGS, NULL},
	 { "registerAudioFrameObserver", _wrap_registerAudioFrameObserver, METH_VARARGS, NULL},
	 { "unregisterAudioFrameObserver", _wrap_unregisterAudioFrameObserver, METH_VARARGS, NULL},
	 { "APICaseHandler_handleAPICase", _wrap_APICaseHandler_handleAPICase, METH_VARARGS, NULL},
	 { "delete_APICaseHandler", _wrap_delete_APICaseHandler, METH_O, NULL},
	 { "new_APICaseHandler", _wrap_new_APICaseHandler, METH_O, NULL},
	 { "disown_APICaseHandler", _wrap_disown_APICaseHandler, METH_O, NULL},
	 { "APICaseHandler_swigregister", APICaseHandler_swigregister, METH_O, NULL},
	 { "APICaseHandler_swiginit", APICaseHandler_swiginit, METH_VARARGS, NULL},
	 { "BeginApiTest", _wrap_BeginApiTest, METH_VARARGS, NULL},
	 { "CompareAndDumpApiTestResult", _wrap_CompareAndDumpApiTestResult, METH_VARARGS, NULL},
	 { "BeginRtcEngineEventTest", _wrap_BeginRtcEngineEventTest, METH_VARARGS, NULL},
	 { "CompareAndDumpRtcEngineEventTestResult", _wrap_CompareAndDumpRtcEngineEventTestResult, METH_VARARGS, NULL},
	 { "LogEngineEventCase", _wrap_LogEngineEventCase, METH_VARARGS, NULL},
	 { "BeginChannelEventTest", _wrap_BeginChannelEventTest, METH_VARARGS, NULL},
	 { "CompareAndDumpChannelEventTestResult", _wrap_CompareAndDumpChannelEventTestResult, METH_VARARGS, NULL},
	 { "LogChannelEventCase", _wrap_LogChannelEventCase, METH_VARARGS, NULL},
	 { "IChannel_channelId", _wrap_IChannel_channelId, METH_O, NULL},
	 { "delete_IChannel", _wrap_delete_IChannel, METH_O, NULL},
	 { "IChannel_swigregister", IChannel_swigregister, METH_O, NULL},
	 { "ChannelMediaOptions_autoSubscribeAudio_set", _wrap_ChannelMediaOptions_autoSubscribeAudio_set, METH_VARARGS, "\n"
		"Determines whether to subscribe to audio streams when the user joins the channel:\n"
		"    - true: (Default) Subscribe.\n"
		"    - false: Do not subscribe.\n"
		"\n"
		"    This member serves a similar function to the 'muteAllRemoteAudioStreams' method. After joining the channel,\n"
		"    you can call the `muteAllRemoteAudioStreams` method to set whether to subscribe to audio streams in the channel.\n"
		""},
	 { "ChannelMediaOptions_autoSubscribeAudio_get", _wrap_ChannelMediaOptions_autoSubscribeAudio_get, METH_O, "\n"
		"Determines whether to subscribe to audio streams when the user joins the channel:\n"
		"    - true: (Default) Subscribe.\n"
		"    - false: Do not subscribe.\n"
		"\n"
		"    This member serves a similar function to the 'muteAllRemoteAudioStreams' method. After joining the channel,\n"
		"    you can call the `muteAllRemoteAudioStreams` method to set whether to subscribe to audio streams in the channel.\n"
		""},
	 { "ChannelMediaOptions_autoSubscribeVideo_set", _wrap_ChannelMediaOptions_autoSubscribeVideo_set, METH_VARARGS, "\n"
		"Determines whether to subscribe to video streams when the user joins the channel:\n"
		"    - true: (Default) Subscribe.\n"
		"    - false: Do not subscribe.\n"
		"\n"
		"    This member serves a similar function to the 'muteAllRemoteVideoStreams' method. After joining the channel,\n"
		"    you can call the `muteAllRemoteVideoStreams` method to set whether to subscribe to video streams in the channel.\n"
		""},
	 { "ChannelMediaOptions_autoSubscribeVideo_get", _wrap_ChannelMediaOptions_autoSubscribeVideo_get, METH_O, "\n"
		"Determines whether to subscribe to video streams when the user joins the channel:\n"
		"    - true: (Default) Subscribe.\n"
		"    - false: Do not subscribe.\n"
		"\n"
		"    This member serves a similar function to the 'muteAllRemoteVideoStreams' method. After joining the channel,\n"
		"    you can call the `muteAllRemoteVideoStreams` method to set whether to subscribe to video streams in the channel.\n"
		""},
	 { "new_ChannelMediaOptions", _wrap_new_ChannelMediaOptions, METH_NOARGS, NULL},
	 { "delete_ChannelMediaOptions", _wrap_delete_ChannelMediaOptions, METH_O, NULL},
	 { "ChannelMediaOptions_swigregister", ChannelMediaOptions_swigregister, METH_O, NULL},
	 { "ChannelMediaOptions_swiginit", ChannelMediaOptions_swiginit, METH_VARARGS, NULL},
	 { "RtcChannelBridge_initChannelEventHandler", _wrap_RtcChannelBridge_initChannelEventHandler, METH_VARARGS, NULL},
	 { "RtcChannelBridge_release", _wrap_RtcChannelBridge_release, METH_O, "\n"
		" Releases all IChannel resources.\n"
		"\n"
		"		     :rtype: void\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		"    		        - `ERR_NOT_INITIALIZED (7)`: The SDK is not initialized before calling this method.\n"
		""},
	 { "RtcChannelBridge_joinChannel", _wrap_RtcChannelBridge_joinChannel, METH_VARARGS, "\n"
		" Joins the channel with a user ID.\n"
		"\n"
		"		     This method differs from the `joinChannel` method in the `IRtcEngine` class in the following aspects:\n"
		"\n"
		"		     | IChannel::joinChannel                                                                                                                    | IRtcEngine::joinChannel                                                                                      |\n"
		"		     |------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------|\n"
		"		     | Does not contain the `channelId` parameter, because `channelId` is specified when creating the `IChannel` object.                              | Contains the `channelId` parameter, which specifies the channel to join.                                       |\n"
		"		     | Contains the `options` parameter, which decides whether to subscribe to all streams before joining the channel.                            | Does not contain the `options` parameter. By default, users subscribe to all streams when joining the channel. |\n"
		"		     | Users can join multiple channels simultaneously by creating multiple `IChannel` objects and calling the `joinChannel` method of each object. | Users can join only one channel.                                                                             |\n"
		"		     | By default, the SDK does not publish any stream after the user joins the channel. You need to call the publish method to do that.        | By default, the SDK publishes streams once the user joins the channel.                                       |\n"
		"\n"
		"		     Notes: \n"
		"		     - If you are already in a channel, you cannot rejoin it with the same `uid`.\n"
		"		     - We recommend using different UIDs for different channels.\n"
		"		     - If you want to join the same channel from different devices, ensure that the UIDs in all devices are different.\n"
		"		     - Ensure that the app ID you use to generate the token is the same with the app ID used when creating the `IRtcEngine` object.\n"
		"\n"
		"		     :type token: string\n"
		":param token: The token for authentication:\n"
		"    		     - In situations not requiring high security: You can use the temporary token generated at Console. For details, see [Get a temporary token](https://docs.agora.io/en/Agora%20Platform/token?platfor%20*%20m=All%20Platforms#get-a-temporary-token).\n"
		"    		     - In situations requiring high security: Set it as the token generated at your server. For details, see [Generate a token](https://docs.agora.io/en/Agora%20Platform/token?platfor%20*%20m=All%20Platforms#get-a-token).\n"
		"    		 :type info: string\n"
		":param info: (Optional) Additional information about the channel. This parameter can be set as null. Other users in the channel do not receive this information.\n"
		"    		 :type uid: int\n"
		":param uid: The user ID. A 32-bit unsigned integer with a value ranging from 1 to (232-1). This parameter must be unique. If `uid` is not assigned (or set as `0`), the SDK assigns a `uid` and reports it in the 'onJoinChannelSuccess' callback. The app must maintain this user ID.\n"
		"    		 :type options: :py:class:`ChannelMediaOptions`\n"
		":param options: The channel media options: 'ChannelMediaOptions'\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0(ERR_OK): Success.\n"
		"    		     - < 0: Failure.\n"
		"    		        - -2(ERR_INALID_ARGUMENT): The parameter is invalid.\n"
		"    		        - -3(ERR_NOT_READY): The SDK fails to be initialized. You can try re-initializing the SDK.\n"
		"    		        - -5(ERR_REFUSED): The request is rejected. This may be caused by the following:\n"
		"    		           - You have created an IChannel object with the same channel name.\n"
		"    		           - You have joined and published a stream in a channel created by the IChannel object.\n"
		""},
	 { "RtcChannelBridge_joinChannelWithUserAccount", _wrap_RtcChannelBridge_joinChannelWithUserAccount, METH_VARARGS, "\n"
		" Joins the channel with a user account.\n"
		"\n"
		"		     After the user successfully joins the channel, the SDK triggers the following callbacks:\n"
		"\n"
		"		     - The local client: 'onLocalUserRegistered' and 'onJoinChannelSuccess' .\n"
		"		     - The remote client: 'onUserJoined' and 'onUserInfoUpdated' , if the user joining the channel is in the `COMMUNICATION` profile, or is a host in the `LIVE_BROADCASTING` profile.\n"
		"\n"
		"		     Notes: To ensure smooth communication, use the same parameter type to identify the user. For example, if a user joins the channel with a user ID, then ensure all the other users use the user ID too. The same applies to the user account.\n"
		"		     If a user joins the channel with the Agora Web SDK, ensure that the uid of the user is set to the same parameter type.\n"
		"\n"
		"		     :type token: string\n"
		":param token: The token generated at your server:\n"
		"    		     - For low-security requirements: You can use the temporary token generated at Console. For details, see [Get a temporary toke](https://docs.agora.io/en/Voice/token?platform=All%20Platforms#get-a-temporary-token).\n"
		"    		     - For high-security requirements: Set it as the token generated at your server. For details, see [Get a token](https://docs.agora.io/en/Voice/token?platform=All%20Platforms#get-a-token).\n"
		"    		 :type userAccount: string\n"
		":param userAccount: The user account. The maximum length of this parameter is 255 bytes. Ensure that you set this parameter and do not set it as null. Supported character scopes are:\n"
		"    		     - All lowercase English letters: a to z.\n"
		"    		     - All uppercase English letters: A to Z.\n"
		"    		     - All numeric characters: 0 to 9.\n"
		"    		     - The space character.\n"
		"    		     - Punctuation characters and other symbols, including: \"!\", \"#\", \"$\", \"%\", \"&\", \"(\", \")\", \"+\", \"-\", \":\", \";\", \"<\", \"=\", \".\", \">\", \"?\", \"@\", \"[\", \"]\", \"^\", \"_\", \" {\", \"}\", \"|\", \"~\", \",\".\n"
		"    		 :type options: :py:class:`ChannelMediaOptions`\n"
		":param options: The channel media options: 'agora::rtc::ChannelMediaOptions::ChannelMediaOptions' “ChannelMediaOptions”.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		"    		        - #ERR_INVALID_ARGUMENT (-2)\n"
		"    		        - #ERR_NOT_READY (-3)\n"
		"    		        - #ERR_REFUSED (-5)\n"
		""},
	 { "RtcChannelBridge_leaveChannel", _wrap_RtcChannelBridge_leaveChannel, METH_O, "\n"
		" Allows a user to leave a channel, such as hanging up or exiting a call.\n"
		"\n"
		"		     After joining a channel, the user must call the *leaveChannel* method to end the call before joining another channel.\n"
		"\n"
		"		     This method returns 0 if the user leaves the channel and releases all resources related to the call.\n"
		"\n"
		"		     This method call is asynchronous, and the user has not left the channel when the method call returns. Once the user leaves the channel, the SDK triggers the 'onLeaveChannel' callback.\n"
		"\n"
		"		     A successful 'leaveChannel' method call triggers the following callbacks:\n"
		"		     - The local client: 'onLeaveChannel'\n"
		"		     - The remote client: 'onUserOffline' , if the user leaving the channel is in the Communication channel, or is a host in the `LIVE_BROADCASTING` profile.\n"
		"\n"
		"		     Notes: \n"
		"		     - If you call the 'release' method immediately after the *leaveChannel* method, the *leaveChannel* process interrupts, and the 'onLeaveChannel' callback is not triggered.\n"
		"		     - If you call the *leaveChannel* method during a CDN live streaming, the SDK triggers the 'removePublishStreamUrl' method.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0(ERR_OK): Success.\n"
		"    		     - < 0: Failure.\n"
		"    		        - -1(ERR_FAILED): A general error occurs (no specified reason).\n"
		"    		        - -2(ERR_INALID_ARGUMENT): The parameter is invalid.\n"
		"    		        - -7(ERR_NOT_INITIALIZED): The SDK is not initialized.\n"
		""},
	 { "RtcChannelBridge_publish", _wrap_RtcChannelBridge_publish, METH_O, "\n"
		" Publishes the local stream to the channel.\n"
		"\n"
		"		     You must keep the following restrictions in mind when calling this method. Otherwise, the SDK returns the #ERR_REFUSED (5):\n"
		"		     - This method publishes one stream only to the channel corresponding to the current `IChannel` object.\n"
		"		     - In the live interactive streaming channel, only a host can call this method. To switch the client role, call 'setClientRole' of the current `IChannel` object.\n"
		"		     - You can publish a stream to only one channel at a time. For details on joining multiple channels, see the advanced guide *Join Multiple Channels*.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		"    		        - #ERR_REFUSED (5): The method call is refused.\n"
		""},
	 { "RtcChannelBridge_unpublish", _wrap_RtcChannelBridge_unpublish, METH_O, "\n"
		" Stops publishing a stream to the channel.\n"
		"\n"
		"		     If you call this method in a channel where you are not publishing streams, the SDK returns #ERR_REFUSED (5).\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		"    		        - #ERR_REFUSED (5): The method call is refused.\n"
		""},
	 { "RtcChannelBridge_channelId", _wrap_RtcChannelBridge_channelId, METH_O, "\n"
		" Gets the channel ID of the current `IChannel` object.\n"
		"\n"
		"		     :rtype: string\n"
		":return: \n"
		"    		     - The channel ID of the current `IChannel` object, if the method call succeeds.\n"
		"    		     - The empty string \"\", if the method call fails.\n"
		""},
	 { "RtcChannelBridge_getCallId", _wrap_RtcChannelBridge_getCallId, METH_VARARGS, "\n"
		" Retrieves the current call ID.\n"
		"\n"
		"		     When a user joins a channel on a client, a `callId` is generated to identify the call from the client.\n"
		"		     Feedback methods, such as 'rate' and 'complain', must be called after the call ends to submit feedback to the SDK.\n"
		"\n"
		"		     The `rate` and `complain` methods require the `callId` parameter retrieved from the `getCallId` method during a call. `callId` is passed as an argument into the `rate` and `complain` methods after the call ends.\n"
		"\n"
		"		     :type callId: agora::util::AString\n"
		":param callId: The current call ID.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_renewToken", _wrap_RtcChannelBridge_renewToken, METH_VARARGS, "\n"
		" Gets a new token when the current token expires after a period of time.\n"
		"\n"
		"		     The `token` expires after a period of time once the token schema is enabled when:\n"
		"\n"
		"		     - The SDK triggers the 'onTokenPrivilegeWillExpire' callback, or\n"
		"		     - The 'onConnectionStateChanged' reports CONNECTION_CHANGED_TOKEN_EXPIRED(9).\n"
		"\n"
		"		     The application should call this method to get the new `token`. Failure to do so will result in the SDK disconnecting from the server.\n"
		"\n"
		"		     :type token: string\n"
		":param token: Pointer to the new token.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0(ERR_OK): Success.\n"
		"    		     - < 0: Failure.\n"
		"    		        - -1(ERR_FAILED): A general error occurs (no specified reason).\n"
		"    		        - -2(ERR_INALID_ARGUMENT): The parameter is invalid.\n"
		"    		        - -7(ERR_NOT_INITIALIZED): The SDK is not initialized.\n"
		""},
	 { "RtcChannelBridge_setEncryptionSecret", _wrap_RtcChannelBridge_setEncryptionSecret, METH_VARARGS, "\n"
		" Enables built-in encryption with an encryption password before users join a channel.\n"
		"\n"
		"		     Deprecated: Deprecated as of v3.1.0. Use the 'enableEncryption' instead.\n"
		"\n"
		"		     All users in a channel must use the same encryption password. The encryption password is automatically cleared once a user leaves the channel.\n"
		"\n"
		"		     If an encryption password is not specified, the encryption functionality will be disabled.\n"
		"\n"
		"		     Notes: \n"
		"		     - Do not use this method for CDN live streaming.\n"
		"		     - For optimal transmission, ensure that the encrypted data size does not exceed the original data size + 16 bytes. 16 bytes is the maximum padding size for AES encryption.\n"
		"\n"
		"		     :type secret: string\n"
		":param secret: Pointer to the encryption password.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_setEncryptionMode", _wrap_RtcChannelBridge_setEncryptionMode, METH_VARARGS, "\n"
		" Sets the built-in encryption mode.\n"
		"\n"
		"		     Deprecated: Deprecated as of v3.1.0. Use the 'enableEncryption' instead.\n"
		"\n"
		"		     The Agora SDK supports built-in encryption, which is set to the `aes-128-xts` mode by default. Call this method to use other encryption modes.\n"
		"\n"
		"		     All users in the same channel must use the same encryption mode and password.\n"
		"\n"
		"		     Refer to the information related to the AES encryption algorithm on the differences between the encryption modes.\n"
		"\n"
		"		     Notes: Call the 'setEncryptionSecret' method to enable the built-in encryption function before calling this method.\n"
		"\n"
		"		     :type encryptionMode: string\n"
		":param encryptionMode: The set encryption mode:\n"
		"    		     - \"aes-128-xts\": (Default) 128-bit AES encryption, XTS mode.\n"
		"    		     - \"aes-128-ecb\": 128-bit AES encryption, ECB mode.\n"
		"    		     - \"aes-256-xts\": 256-bit AES encryption, XTS mode.\n"
		"    		     - \"\": When encryptionMode is set as NULL, the encryption mode is set as \"aes-128-xts\" by default.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_registerPacketObserver", _wrap_RtcChannelBridge_registerPacketObserver, METH_VARARGS, "\n"
		" Registers a packet observer.\n"
		"\n"
		"		     The Agora SDK allows your application to register a packet observer to receive callbacks for voice or video packet transmission.\n"
		"\n"
		"		     Notes: \n"
		"		     - The size of the packet sent to the network after processing should not exceed 1200 bytes, otherwise, the packet may fail to be sent.\n"
		"		     - Ensure that both receivers and senders call this method, otherwise, you may meet undefined behaviors such as no voice and black screen.\n"
		"		     - When you use CDN live streaming, recording or storage functions, Agora doesn't recommend calling this method.\n"
		"\n"
		"		     :type observer: agora::rtc::IPacketObserver\n"
		":param observer: The registered packet observer. See IPacketObserver.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_setClientRole", _wrap_RtcChannelBridge_setClientRole, METH_VARARGS, "\n"
		" Sets the role of the user, such as a host or an audience (default), before joining a channel in the interactive live streaming.\n"
		"\n"
		"		     This method can be used to switch the user role in the interactive live streaming after the user joins a channel.\n"
		"\n"
		"		     In the `LIVE_BROADCASTING` profile, when a user switches user roles after joining a channel, a successful 'setClientRole' method call triggers the following callbacks:\n"
		"		     - The local client: 'onClientRoleChanged'\n"
		"		     - The remote client: 'onUserJoined' or 'onUserOffline' (BECOME_AUDIENCE)\n"
		"\n"
		"		     Notes: \n"
		"		     This method applies only to the `LIVE_BROADCASTING` profile.\n"
		"\n"
		"		     :type role: int\n"
		":param role: Sets the role of the user. See #CLIENT_ROLE_TYPE.\n"
		"    		 :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_setRemoteUserPriority", _wrap_RtcChannelBridge_setRemoteUserPriority, METH_VARARGS, "\n"
		" Prioritizes a remote user's stream.\n"
		"\n"
		"		     Use this method with the 'setRemoteSubscribeFallbackOption' method.\n"
		"		     If the fallback function is enabled for a subscribed stream, the SDK ensures the high-priority user gets the best possible stream quality.\n"
		"\n"
		"		     Notes: The Agora SDK supports setting `serPriority` as high for one user only.\n"
		"\n"
		"		     :type uid: int\n"
		":param uid:  The ID of the remote user.\n"
		"    		 :type userPriority: int\n"
		":param userPriority: Sets the priority of the remote user. See #PRIORITY_TYPE.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_setRemoteVoicePosition", _wrap_RtcChannelBridge_setRemoteVoicePosition, METH_VARARGS, "\n"
		" Sets the sound position and gain of a remote user.\n"
		"\n"
		"		     When the local user calls this method to set the sound position of a remote user, the sound difference between the left and right channels allows the\n"
		"		     local user to track the real-time position of the remote user, creating a real sense of space. This method applies to massively multiplayer online games,\n"
		"		     such as Battle Royale games.\n"
		"\n"
		"		     Notes: \n"
		"		     - For this method to work, enable stereo panning for remote users by calling the 'enableSoundPositionIndication' method before joining a channel.\n"
		"		     - This method requires hardware support. For the best sound positioning, we recommend using a stereo speaker.\n"
		"\n"
		"		     :type uid: int\n"
		":param uid: The ID of the remote user.\n"
		"    		 :type pan: float\n"
		":param pan: The sound position of the remote user. The value ranges from -1.0 to 1.0:\n"
		"    		     - 0.0: the remote sound comes from the front.\n"
		"    		     - -1.0: the remote sound comes from the left.\n"
		"    		     - 1.0: the remote sound comes from the right.\n"
		"    		 :type gain: float\n"
		":param gain: Gain of the remote user. The value ranges from 0.0 to 100.0. The default value is 100.0 (the original gain of the remote user).\n"
		"    		     The smaller the value, the less the gain.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_setRemoteRenderMode", _wrap_RtcChannelBridge_setRemoteRenderMode, METH_VARARGS, "\n"
		" Updates the display mode of the video view of a remote user.\n"
		"\n"
		"		     After initializing the video view of a remote user, you can call this method to update its rendering and mirror modes.\n"
		"		     This method affects only the video view that the local user sees.\n"
		"\n"
		"		     Notes: \n"
		"		     - Call this method after calling the 'setupRemoteVideo' method to initialize the remote video view.\n"
		"		     - During a call, you can call this method as many times as necessary to update the display mode of the video view of a remote user.\n"
		"\n"
		"		     :type userId: int\n"
		":param userId: The ID of the remote user.\n"
		"    		 :type renderMode: int\n"
		":param renderMode: The rendering mode of the remote video view. See #RENDER_MODE_TYPE.\n"
		"    		 :type mirrorMode: int\n"
		":param mirrorMode:\n"
		"    		     - The mirror mode of the remote video view. See #VIDEO_MIRROR_MODE_TYPE.\n"
		"    		     - **Note**: The SDK disables the mirror mode by default.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_setDefaultMuteAllRemoteAudioStreams", _wrap_RtcChannelBridge_setDefaultMuteAllRemoteAudioStreams, METH_VARARGS, "\n"
		" Sets whether to receive all remote audio streams by default.\n"
		"\n"
		"		     You can call this method either before or after joining a channel. If you call `setDefaultMuteAllRemoteAudioStreams (true)` after joining a channel, the remote audio streams of all subsequent users are not received.\n"
		"\n"
		"		     Notes: If you want to resume receiving the audio stream, call 'muteRemoteAudioStream (false)',\n"
		"		     and specify the ID of the remote user whose audio stream you want to receive.\n"
		"		     To receive the audio streams of multiple remote users, call `muteRemoteAudioStream (false)` as many times.\n"
		"		     Calling `setDefaultMuteAllRemoteAudioStreams (false)` resumes receiving the audio streams of subsequent users only.\n"
		"\n"
		"		     :type mute: boolean\n"
		":param mute: Sets whether to receive/stop receiving all remote users' audio streams by default:\n"
		"    		     - true:  Stops receiving all remote users' audio streams by default.\n"
		"    		     - false: (Default) Receives all remote users' audio streams by default.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_setDefaultMuteAllRemoteVideoStreams", _wrap_RtcChannelBridge_setDefaultMuteAllRemoteVideoStreams, METH_VARARGS, "\n"
		" Sets whether to receive all remote video streams by default.\n"
		"\n"
		"		     You can call this method either before or after joining a channel. If you\n"
		"		     call `setDefaultMuteAllRemoteVideoStreams (true)` after joining a channel,\n"
		"		     the remote video streams of all subsequent users are not received.\n"
		"\n"
		"		     Notes: If you want to resume receiving the video stream, call\n"
		"		     'muteRemoteVideoStream (false)',\n"
		"		     and specify the ID of the remote user whose video stream you want to receive.\n"
		"		     To receive the video streams of multiple remote users, call `muteRemoteVideoStream (false)`\n"
		"		     as many times. Calling `setDefaultMuteAllRemoteVideoStreams (false)` resumes\n"
		"		     receiving the video streams of subsequent users only.\n"
		"\n"
		"		     :type mute: boolean\n"
		":param mute: Sets whether to receive/stop receiving all remote users' video streams by default:\n"
		"    		     - true: Stop receiving all remote users' video streams by default.\n"
		"    		     - false: (Default) Receive all remote users' video streams by default.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_muteAllRemoteAudioStreams", _wrap_RtcChannelBridge_muteAllRemoteAudioStreams, METH_VARARGS, "\n"
		" Stops/Resumes receiving all remote users' audio streams.\n"
		"\n"
		"		     :type mute: boolean\n"
		":param mute: Sets whether to receive/stop receiving all remote users' audio streams.\n"
		"    		     - true: Stops receiving all remote users' audio streams.\n"
		"    		     - false: (Default) Receives all remote users' audio streams.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_adjustUserPlaybackSignalVolume", _wrap_RtcChannelBridge_adjustUserPlaybackSignalVolume, METH_VARARGS, "\n"
		" Adjust the playback volume of the specified remote user.\n"
		"\n"
		"		     After joining a channel, call 'adjustPlaybackSignalVolume' to adjust the playback volume of different remote users,\n"
		"		     or adjust multiple times for one remote user.\n"
		"\n"
		"		     Notes: \n"
		"		     - Call this method after joining a channel.\n"
		"		     - This method adjusts the playback volume, which is the mixed volume for the specified remote user.\n"
		"		     - This method can only adjust the playback volume of one specified remote user at a time. If you want to adjust the playback volume of several remote users,\n"
		"		     call the method multiple times, once for each remote user.\n"
		"\n"
		"		     :type userId: int\n"
		":param userId: The user ID, which should be the same as the `uid` of 'joinChannel'\n"
		"    		 :type volume: int\n"
		":param volume: The playback volume of the voice. The value ranges from 0 to 100:\n"
		"    		     - 0: Mute.\n"
		"    		     - 100: Original volume.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    			 - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_muteRemoteAudioStream", _wrap_RtcChannelBridge_muteRemoteAudioStream, METH_VARARGS, "\n"
		" Stops/Resumes receiving a specified remote user's audio stream.\n"
		"\n"
		"			 Notes: If you called the 'muteAllRemoteAudioStreams' method and set `mute` as `true` to stop\n"
		"		     receiving all remote users' audio streams, call the `muteAllRemoteAudioStreams` method and set `mute` as `false` before calling this method.\n"
		"		     The `muteAllRemoteAudioStreams` method sets all remote audio streams, while the `muteRemoteAudioStream` method sets a specified remote audio stream.\n"
		"\n"
		"			 :type userId: int\n"
		":param userId: The user ID of the specified remote user sending the audio.\n"
		"    			 :type mute: boolean\n"
		":param mute: Sets whether to receive/stop receiving a specified remote user's audio stream:\n"
		"    			 - true: Stops receiving the specified remote user's audio stream.\n"
		"    			 - false: (Default) Receives the specified remote user's audio stream.\n"
		"\n"
		"			 :rtype: int\n"
		":return: \n"
		"    			 - 0: Success.\n"
		"    			 - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_muteAllRemoteVideoStreams", _wrap_RtcChannelBridge_muteAllRemoteVideoStreams, METH_VARARGS, "\n"
		" Stops/Resumes receiving all video stream from a specified remote user.\n"
		"\n"
		"		     :type mute: boolean\n"
		":param mute: Sets whether to receive/stop receiving all remote users' video streams:\n"
		"    		     - true: Stop receiving all remote users' video streams.\n"
		"    		     - false: (Default) Receive all remote users' video streams.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_muteRemoteVideoStream", _wrap_RtcChannelBridge_muteRemoteVideoStream, METH_VARARGS, "\n"
		" Stops/Resumes receiving the video stream from a specified remote user.\n"
		"\n"
		"		     Notes: If you called the 'muteAllRemoteVideoStreams' method and\n"
		"		     set `mute` as `true` to stop receiving all remote video streams, call the `muteAllRemoteVideoStreams` method and\n"
		"		     set `mute` as `false` before calling this method.\n"
		"\n"
		"		     :type userId: int\n"
		":param userId: The user ID of the specified remote user.\n"
		"    		 :type mute: boolean\n"
		":param mute: Sets whether to stop/resume receiving the video stream from a specified remote user:\n"
		"    		     - true: Stop receiving the specified remote user's video stream.\n"
		"    		     - false: (Default) Receive the specified remote user's video stream.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_setRemoteVideoStreamType", _wrap_RtcChannelBridge_setRemoteVideoStreamType, METH_VARARGS, "\n"
		" Sets the stream type of the remote video.\n"
		"\n"
		"		     Under limited network conditions, if the publisher has not disabled the dual-stream mode using\n"
		"		     'enableDualStreamMode' (false),\n"
		"		     the receiver can choose to receive either the high-quality video stream (the high resolution, and high bitrate video stream) or\n"
		"		     the low-video stream (the low resolution, and low bitrate video stream).\n"
		"\n"
		"		     By default, users receive the high-quality video stream. Call this method if you want to switch to the low-video stream.\n"
		"		     This method allows the app to adjust the corresponding video stream type based on the size of the video window to\n"
		"		     reduce the bandwidth and resources.\n"
		"\n"
		"		     The aspect ratio of the low-video stream is the same as the high-quality video stream. Once the resolution of the high-quality video\n"
		"		     stream is set, the system automatically sets the resolution, frame rate, and bitrate of the low-video stream.\n"
		"\n"
		"		     The method result returns in the 'onApiCallExecuted' callback.\n"
		"\n"
		"		     :type userId: int\n"
		":param userId: The ID of the remote user sending the video stream.\n"
		"    		 :type streamType: int\n"
		":param streamType:  Sets the video-stream type. See #REMOTE_VIDEO_STREAM_TYPE.\n"
		"    		 :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_setRemoteDefaultVideoStreamType", _wrap_RtcChannelBridge_setRemoteDefaultVideoStreamType, METH_VARARGS, "\n"
		" Sets the default stream type of remote videos.\n"
		"\n"
		"		     Under limited network conditions, if the publisher has not disabled the dual-stream mode using\n"
		"		     'enableDualStreamMode' (false),\n"
		"		     the receiver can choose to receive either the high-quality video stream (the high resolution, and high bitrate video stream) or\n"
		"		     the low-video stream (the low resolution, and low bitrate video stream).\n"
		"\n"
		"		     By default, users receive the high-quality video stream. Call this method if you want to switch to the low-video stream.\n"
		"		     This method allows the app to adjust the corresponding video stream type based on the size of the video window to\n"
		"		     reduce the bandwidth and resources. The aspect ratio of the low-video stream is the same as the high-quality video stream.\n"
		"		      Once the resolution of the high-quality video\n"
		"		     stream is set, the system automatically sets the resolution, frame rate, and bitrate of the low-video stream.\n"
		"\n"
		"		     The method result returns in the 'onApiCallExecuted' callback.\n"
		"\n"
		"		     :type streamType: int\n"
		":param streamType: Sets the default video-stream type. See #REMOTE_VIDEO_STREAM_TYPE.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_addPublishStreamUrl", _wrap_RtcChannelBridge_addPublishStreamUrl, METH_VARARGS, "\n"
		" Publishes the local stream to a specified CDN live RTMP address.  (CDN live only.)\n"
		"\n"
		"		     The SDK returns the result of this method call in the 'onStreamPublished' callback.\n"
		"\n"
		"		     The 'addPublishStreamUrl' method call triggers\n"
		"		     the 'onRtmpStreamingStateChanged' callback on the local client\n"
		"		     to report the state of adding a local stream to the CDN.\n"
		"\n"
		"		     Notes: \n"
		"		     - Ensure that the user joins the channel before calling this method.\n"
		"		     - Ensure that you enable the RTMP Converter service before using this function. See Prerequisites in the advanced guide *Push Streams to CDN*.\n"
		"		     - This method adds only one stream RTMP URL address each time it is called.\n"
		"\n"
		"		     :type url: string\n"
		":param url: The CDN streaming URL in the RTMP format. The maximum length of this parameter is 1024 bytes. The RTMP URL address must not contain special characters, such as Chinese language characters.\n"
		"    		 :type transcodingEnabled: boolean\n"
		":param transcodingEnabled: Sets whether transcoding is enabled/disabled:\n"
		"    		     - true: Enable transcoding. To [transcode](https://docs.agora.io/en/Agora%20Platform/terms?platform=All%20Platforms#transcoding) the audio or video streams when publishing them to CDN live, often used for combining the audio and video streams of multiple hosts in CDN live. If you set this parameter as `true`, ensure that you call the 'setLiveTranscoding' method before this method.\n"
		"    		     - false: Disable transcoding.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		"    		          - #ERR_INVALID_ARGUMENT (2): The RTMP URL address is NULL or has a string length of 0.\n"
		"    		          - #ERR_NOT_INITIALIZED (7): You have not initialized `IChannel` when publishing the stream.\n"
		""},
	 { "RtcChannelBridge_removePublishStreamUrl", _wrap_RtcChannelBridge_removePublishStreamUrl, METH_VARARGS, "\n"
		" Removes an RTMP stream from the CDN.\n"
		"\n"
		"		     This method removes the RTMP URL address (added by the 'addPublishStreamUrl' method) from a CDN live stream.\n"
		"\n"
		"		     The SDK returns the result of this method call in the 'onStreamUnpublished' callback.\n"
		"\n"
		"		     The 'removePublishStreamUrl' method call triggers\n"
		"		     the 'onRtmpStreamingStateChanged' callback on the local client to report the state of removing an RTMP stream from the CDN.\n"
		"\n"
		"		     Notes: \n"
		"		     - This method removes only one RTMP URL address each time it is called.\n"
		"		     - The RTMP URL address must not contain special characters, such as Chinese language characters.\n"
		"\n"
		"		     :type url: string\n"
		":param url: The RTMP URL address to be removed. The maximum length of this parameter is 1024 bytes.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_setLiveTranscoding", _wrap_RtcChannelBridge_setLiveTranscoding, METH_VARARGS, "\n"
		" Sets the video layout and audio settings for CDN live. (CDN live only.)\n"
		"\n"
		"		     The SDK triggers the 'onTranscodingUpdated' callback when you\n"
		"		     call the `setLiveTranscoding` method to update the transcoding setting.\n"
		"\n"
		"		     Notes: \n"
		"		     - Ensure that you enable the RTMP Converter service before using this function. See Prerequisites in the advanced guide *Push Streams to CDN*..\n"
		"		     - If you call the `setLiveTranscoding` method to set the transcoding setting for the first time, the SDK does not trigger the `onTranscodingUpdated` callback.\n"
		"\n"
		"		     :type transcoding: :py:class:`LiveTranscoding`\n"
		":param transcoding: Sets the CDN live audio/video transcoding settings. See LiveTranscoding.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_addInjectStreamUrl", _wrap_RtcChannelBridge_addInjectStreamUrl, METH_VARARGS, "\n"
		" Adds a voice or video stream URL address to the interactive live streaming.\n"
		"\n"
		"		    The 'onStreamPublished' callback returns the inject status.\n"
		"		    If this method call is successful, the server pulls the voice or video stream and injects it into a live channel.\n"
		"		    This is applicable to scenarios where all audience members in the channel can watch a live show and interact with each other.\n"
		"\n"
		"		     The 'addInjectStreamUrl' method call triggers the following callbacks:\n"
		"		    - The local client:\n"
		"		      - 'onStreamInjectedStatus' , with the state of the injecting the online stream.\n"
		"		      - 'onUserJoined' (uid: 666), if the method call is successful and the online media stream is injected into the channel.\n"
		"		    - The remote client:\n"
		"		      - 'onUserJoined' (uid: 666), if the method call is successful and the online media stream is injected into the channel.\n"
		"\n"
		"		     Notes: \n"
		"		     - Ensure that you enable the RTMP Converter service before using this function. See Prerequisites in the advanced guide *Push Streams to CDN*.\n"
		"		     - This method applies to the Native SDK v2.4.1 and later.\n"
		"		     - This method applies to the `LIVE_BROADCASTING` profile only.\n"
		"		     - You can inject only one media stream into the channel at the same time.\n"
		"\n"
		"		     :type url: string\n"
		":param url: The URL address to be added to the ongoing live streaming. Valid protocols are RTMP, HLS, and HTTP-FLV.\n"
		"    		     - Supported audio codec type: AAC.\n"
		"    		     - Supported video codec type: H264 (AVC).\n"
		"    		 :type config: :py:class:`InjectStreamConfig`\n"
		":param config: The InjectStreamConfig object that contains the configuration of the added voice or video stream.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		"    		        - #ERR_INVALID_ARGUMENT (2): The injected URL does not exist. Call this method again to inject the stream and ensure that the URL is valid.\n"
		"    		        - #ERR_NOT_READY (3): The user is not in the channel.\n"
		"    		        - #ERR_NOT_SUPPORTED (4): The channel profile is not `LIVE_BROADCASTING`. Call the 'setChannelProfile' method and set the channel profile to `LIVE_BROADCASTING` before calling this method.\n"
		"    		        - #ERR_NOT_INITIALIZED (7): The SDK is not initialized. Ensure that the IChannel object is initialized before calling this method.\n"
		""},
	 { "RtcChannelBridge_removeInjectStreamUrl", _wrap_RtcChannelBridge_removeInjectStreamUrl, METH_VARARGS, "\n"
		" Removes the voice or video stream URL address from a live streaming.\n"
		"\n"
		"		     This method removes the URL address (added by the 'addInjectStreamUrl' method) from the live streaming.\n"
		"\n"
		"		     Notes: If this method is called successfully, the SDK triggers the 'onUserOffline' callback and returns a stream uid of 666.\n"
		"\n"
		"		     :type url: string\n"
		":param url: Pointer to the URL address of the added stream to be removed.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_startChannelMediaRelay", _wrap_RtcChannelBridge_startChannelMediaRelay, METH_VARARGS, "\n"
		" Starts to relay media streams across channels.\n"
		"\n"
		"After a successful method call, the SDK triggers the\n"
		"'agora::rtc::IChannelEventHandler::onChannelMediaRelayStateChanged'\n"
		" \"onChannelMediaRelayStateChanged\" and\n"
		"'agora::rtc::IChannelEventHandler::onChannelMediaRelayEvent'\n"
		"\"onChannelMediaRelayEvent\" callbacks, and these callbacks return the\n"
		"state and events of the media stream relay.\n"
		"- If the\n"
		"'agora::rtc::IChannelEventHandler::onChannelMediaRelayStateChanged'\n"
		" \"onChannelMediaRelayStateChanged\" callback returns\n"
		"#RELAY_STATE_RUNNING (2) and #RELAY_OK (0), and the\n"
		"'agora::rtc::IChannelEventHandler::onChannelMediaRelayEvent'\n"
		"\"onChannelMediaRelayEvent\" callback returns\n"
		"#RELAY_EVENT_PACKET_SENT_TO_DEST_CHANNEL (4), the host starts\n"
		"sending data to the destination channel.\n"
		"- If the\n"
		"'agora::rtc::IChannelEventHandler::onChannelMediaRelayStateChanged'\n"
		" \"onChannelMediaRelayStateChanged\" callback returns\n"
		"#RELAY_STATE_FAILURE (3), an exception occurs during the media stream\n"
		"relay.\n"
		"\n"
		"Notes: \n"
		"- Call this method after the 'joinChannel' method.\n"
		"- This method takes effect only when you are a host in a\n"
		"`LIVE_BROADCASTING` channel.\n"
		"- After a successful method call, if you want to call this method\n"
		"again, ensure that you call the\n"
		"'stopChannelMediaRelay' method to quit the\n"
		"current relay.\n"
		"- Contact sales-us.io before implementing this function.\n"
		"- We do not support string user accounts in this API.\n"
		"\n"
		":type configuration: :py:class:`ChannelMediaRelayConfiguration`\n"
		":param configuration: The configuration of the media stream relay:\n"
		"    ChannelMediaRelayConfiguration.\n"
		"\n"
		":rtype: int\n"
		":return: \n"
		"    - 0: Success.\n"
		"    - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_updateChannelMediaRelay", _wrap_RtcChannelBridge_updateChannelMediaRelay, METH_VARARGS, "\n"
		" Updates the channels for media stream relay.\n"
		"\n"
		"After a successful\n"
		"'startChannelMediaRelay' method call, if\n"
		"you want to relay the media stream to more channels, or leave the\n"
		"current relay channel, you can call the\n"
		"'updateChannelMediaRelay' method.\n"
		"\n"
		"After a successful method call, the SDK triggers the\n"
		"'agora::rtc::IChannelEventHandler::onChannelMediaRelayEvent'\n"
		" \"onChannelMediaRelayEvent\" callback with the\n"
		"#RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL (7) state code.\n"
		"\n"
		"Notes: \n"
		"Call this method after the\n"
		"'startChannelMediaRelay' method to update\n"
		"the destination channel.\n"
		"\n"
		":type configuration: :py:class:`ChannelMediaRelayConfiguration`\n"
		":param configuration: The media stream relay configuration:\n"
		"    ChannelMediaRelayConfiguration.\n"
		"\n"
		":rtype: int\n"
		":return: \n"
		"    - 0: Success.\n"
		"    - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_stopChannelMediaRelay", _wrap_RtcChannelBridge_stopChannelMediaRelay, METH_O, "\n"
		" Stops the media stream relay.\n"
		"\n"
		"Once the relay stops, the host quits all the destination\n"
		"channels.\n"
		"\n"
		"After a successful method call, the SDK triggers the\n"
		"'agora::rtc::IChannelEventHandler::onChannelMediaRelayStateChanged'\n"
		" \"onChannelMediaRelayStateChanged\" callback. If the callback returns\n"
		"#RELAY_STATE_IDLE (0) and #RELAY_OK (0), the host successfully\n"
		"stops the relay.\n"
		"\n"
		"Notes: \n"
		"If the method call fails, the SDK triggers the\n"
		"'agora::rtc::IChannelEventHandler::onChannelMediaRelayStateChanged'\n"
		" \"onChannelMediaRelayStateChanged\" callback with the\n"
		"#RELAY_ERROR_SERVER_NO_RESPONSE (2) or\n"
		"#RELAY_ERROR_SERVER_CONNECTION_LOST (8) state code. You can leave the\n"
		"channel by calling the 'leaveChannel' method, and\n"
		"the media stream relay automatically stops.\n"
		"\n"
		":rtype: int\n"
		":return: \n"
		"    - 0: Success.\n"
		"    - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_createDataStream", _wrap_RtcChannelBridge_createDataStream, METH_VARARGS, "\n"
		" Creates a data stream.\n"
		"\n"
		"		     Each user can create up to five data streams during the lifecycle of the IChannel.\n"
		"\n"
		"		     Notes: Set both the `reliable` and `ordered` parameters to `true` or `false`. Do not set one as `true` and the other as `false`.\n"
		"\n"
		"		     :type streamId: int\n"
		":param streamId: The ID of the created data stream.\n"
		"    		 :type reliable: boolean\n"
		":param reliable: Sets whether or not the recipients are guaranteed to receive the data stream from the sender within five seconds:\n"
		"    		     - true: The recipients receive the data stream from the sender within five seconds. If the recipient does not receive the data stream within five seconds,\n"
		"    		     an error is reported to the application.\n"
		"    		     - false: There is no guarantee that the recipients receive the data stream within five seconds and no error message is reported for\n"
		"    		     any delay or missing data stream.\n"
		"    		 :type ordered: boolean\n"
		":param ordered: Sets whether or not the recipients receive the data stream in the sent order:\n"
		"    		     - true: The recipients receive the data stream in the sent order.\n"
		"    		     - false: The recipients do not receive the data stream in the sent order.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - Returns 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_sendStreamMessage", _wrap_RtcChannelBridge_sendStreamMessage, METH_VARARGS, "\n"
		" Sends data stream messages to all users in a channel.\n"
		"\n"
		"		     The SDK has the following restrictions on this method:\n"
		"		     - Up to 30 packets can be sent per second in a channel with each packet having a maximum size of 1 kB.\n"
		"		     - Each client can send up to 6 kB of data per second.\n"
		"		     - Each user can have up to five data streams simultaneously.\n"
		"\n"
		"		     A successful 'sendStreamMessage' method call triggers\n"
		"		     the 'onStreamMessage' callback on the remote client, from which the remote user gets the stream message.\n"
		"\n"
		"		     A failed 'sendStreamMessage' method call triggers\n"
		"		     the 'onStreamMessage' callback on the remote client.\n"
		"\n"
		"		     Notes: \n"
		"		     - This method applies only to the `COMMUNICATION` profile or to the hosts in the `LIVE_BROADCASTING` profile. If an audience in the `LIVE_BROADCASTING` profile calls this method, the audience may be switched to a host.\n"
		"		     - Ensure that you have created the data stream using 'createDataStream' before calling this method.\n"
		"\n"
		"		     :type streamId: int\n"
		":param streamId:  The ID of the sent data stream, returned in the 'createDataStream' method.\n"
		"    		 :type data: string\n"
		":param data: The sent data.\n"
		"    		 :type length: int\n"
		":param length: The length of the sent data.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_getConnectionState", _wrap_RtcChannelBridge_getConnectionState, METH_O, "\n"
		" Gets the current connection state of the SDK.\n"
		"\n"
		"		     :rtype: int\n"
		":return: #CONNECTION_STATE_TYPE.\n"
		""},
	 { "RtcChannelBridge_registerMediaMetadataObserver", _wrap_RtcChannelBridge_registerMediaMetadataObserver, METH_VARARGS, "\n"
		" Registers the metadata observer.\n"
		"\n"
		"		     Registers the metadata observer. You need to implement the IMetadataObserver class and specify the metadata type in this method. A successful call of this method triggers the 'getMaxMetadataSize' callback.\n"
		"		     This method enables you to add synchronized metadata in the video stream for more diversified interactive live streaming, such as sending shopping links, digital coupons, and online quizzes.\n"
		"\n"
		"		     Notes: \n"
		"		     - Call this method before the joinChannel method.\n"
		"		     - This method applies to the `LIVE_BROADCASTING` channel profile.\n"
		"\n"
		"		     :type observer: agora::rtc::IMetadataObserver\n"
		":param observer: The IMetadataObserver class. See the definition of IMetadataObserver for details.\n"
		"    		 :type type: agora::rtc::IMetadataObserver::METADATA_TYPE\n"
		":param type: See 'METADATA_TYPE'. The SDK supports VIDEO_METADATA (0) only for now.\n"
		"\n"
		"		     :rtype: int\n"
		":return: \n"
		"    		     - 0: Success.\n"
		"    		     - < 0: Failure.\n"
		""},
	 { "RtcChannelBridge_sendMetadata", _wrap_RtcChannelBridge_sendMetadata, METH_VARARGS, NULL},
	 { "RtcChannelBridge_setMaxMetadataSize", _wrap_RtcChannelBridge_setMaxMetadataSize, METH_VARARGS, NULL},
	 { "RtcChannelBridge_getChannel", _wrap_RtcChannelBridge_getChannel, METH_O, NULL},
	 { "delete_RtcChannelBridge", _wrap_delete_RtcChannelBridge, METH_O, NULL},
	 { "RtcChannelBridge_swigregister", RtcChannelBridge_swigregister, METH_O, NULL},
	 { "VideoDeviceManager_startDeviceTest", _wrap_VideoDeviceManager_startDeviceTest, METH_VARARGS, NULL},
	 { "VideoDeviceManager_stopDeviceTest", _wrap_VideoDeviceManager_stopDeviceTest, METH_O, NULL},
	 { "VideoDeviceManager_getDeviceCount", _wrap_VideoDeviceManager_getDeviceCount, METH_O, NULL},
	 { "VideoDeviceManager_setDevice", _wrap_VideoDeviceManager_setDevice, METH_VARARGS, NULL},
	 { "VideoDeviceManager_getCurrentDevice", _wrap_VideoDeviceManager_getCurrentDevice, METH_VARARGS, NULL},
	 { "VideoDeviceManager_getDevice", _wrap_VideoDeviceManager_getDevice, METH_VARARGS, NULL},
	 { "VideoDeviceManager_release", _wrap_VideoDeviceManager_release, METH_O, NULL},
	 { "delete_VideoDeviceManager", _wrap_delete_VideoDeviceManager, METH_O, NULL},
	 { "VideoDeviceManager_swigregister", VideoDeviceManager_swigregister, METH_O, NULL},
	 { "AudioPlaybackDeviceManager_release", _wrap_AudioPlaybackDeviceManager_release, METH_O, NULL},
	 { "AudioPlaybackDeviceManager_getCount", _wrap_AudioPlaybackDeviceManager_getCount, METH_O, NULL},
	 { "AudioPlaybackDeviceManager_getDevice", _wrap_AudioPlaybackDeviceManager_getDevice, METH_VARARGS, NULL},
	 { "AudioPlaybackDeviceManager_getCurrentDevice", _wrap_AudioPlaybackDeviceManager_getCurrentDevice, METH_VARARGS, NULL},
	 { "AudioPlaybackDeviceManager_getCurrentDeviceInfo", _wrap_AudioPlaybackDeviceManager_getCurrentDeviceInfo, METH_VARARGS, NULL},
	 { "AudioPlaybackDeviceManager_setDevice", _wrap_AudioPlaybackDeviceManager_setDevice, METH_VARARGS, NULL},
	 { "AudioPlaybackDeviceManager_setDeviceVolume", _wrap_AudioPlaybackDeviceManager_setDeviceVolume, METH_VARARGS, NULL},
	 { "AudioPlaybackDeviceManager_getDeviceVolume", _wrap_AudioPlaybackDeviceManager_getDeviceVolume, METH_O, NULL},
	 { "AudioPlaybackDeviceManager_setDeviceMute", _wrap_AudioPlaybackDeviceManager_setDeviceMute, METH_VARARGS, NULL},
	 { "AudioPlaybackDeviceManager_getDeviceMute", _wrap_AudioPlaybackDeviceManager_getDeviceMute, METH_O, NULL},
	 { "AudioPlaybackDeviceManager_startDeviceTest", _wrap_AudioPlaybackDeviceManager_startDeviceTest, METH_VARARGS, NULL},
	 { "AudioPlaybackDeviceManager_stopDeviceTest", _wrap_AudioPlaybackDeviceManager_stopDeviceTest, METH_O, NULL},
	 { "AudioPlaybackDeviceManager_startAudioDeviceLoopbackTest", _wrap_AudioPlaybackDeviceManager_startAudioDeviceLoopbackTest, METH_VARARGS, NULL},
	 { "AudioPlaybackDeviceManager_stopAudioDeviceLoopbackTest", _wrap_AudioPlaybackDeviceManager_stopAudioDeviceLoopbackTest, METH_O, NULL},
	 { "delete_AudioPlaybackDeviceManager", _wrap_delete_AudioPlaybackDeviceManager, METH_O, NULL},
	 { "AudioPlaybackDeviceManager_swigregister", AudioPlaybackDeviceManager_swigregister, METH_O, NULL},
	 { "AudioRecordingDeviceManager_release", _wrap_AudioRecordingDeviceManager_release, METH_O, NULL},
	 { "AudioRecordingDeviceManager_getCount", _wrap_AudioRecordingDeviceManager_getCount, METH_O, NULL},
	 { "AudioRecordingDeviceManager_getDevice", _wrap_AudioRecordingDeviceManager_getDevice, METH_VARARGS, NULL},
	 { "AudioRecordingDeviceManager_getCurrentDevice", _wrap_AudioRecordingDeviceManager_getCurrentDevice, METH_VARARGS, NULL},
	 { "AudioRecordingDeviceManager_getCurrentDeviceInfo", _wrap_AudioRecordingDeviceManager_getCurrentDeviceInfo, METH_VARARGS, NULL},
	 { "AudioRecordingDeviceManager_setDevice", _wrap_AudioRecordingDeviceManager_setDevice, METH_VARARGS, NULL},
	 { "AudioRecordingDeviceManager_setDeviceVolume", _wrap_AudioRecordingDeviceManager_setDeviceVolume, METH_VARARGS, NULL},
	 { "AudioRecordingDeviceManager_getDeviceVolume", _wrap_AudioRecordingDeviceManager_getDeviceVolume, METH_O, NULL},
	 { "AudioRecordingDeviceManager_setDeviceMute", _wrap_AudioRecordingDeviceManager_setDeviceMute, METH_VARARGS, NULL},
	 { "AudioRecordingDeviceManager_getDeviceMute", _wrap_AudioRecordingDeviceManager_getDeviceMute, METH_O, NULL},
	 { "AudioRecordingDeviceManager_startDeviceTest", _wrap_AudioRecordingDeviceManager_startDeviceTest, METH_VARARGS, NULL},
	 { "AudioRecordingDeviceManager_stopDeviceTest", _wrap_AudioRecordingDeviceManager_stopDeviceTest, METH_O, NULL},
	 { "AudioRecordingDeviceManager_startAudioDeviceLoopbackTest", _wrap_AudioRecordingDeviceManager_startAudioDeviceLoopbackTest, METH_VARARGS, NULL},
	 { "AudioRecordingDeviceManager_stopAudioDeviceLoopbackTest", _wrap_AudioRecordingDeviceManager_stopAudioDeviceLoopbackTest, METH_O, NULL},
	 { "delete_AudioRecordingDeviceManager", _wrap_delete_AudioRecordingDeviceManager, METH_O, NULL},
	 { "AudioRecordingDeviceManager_swigregister", AudioRecordingDeviceManager_swigregister, METH_O, NULL},
	 { NULL, NULL, 0, NULL }
};

static PyMethodDef SwigMethods_proxydocs[] = {
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_agora__common__RtcChannelEventHandlerBaseTo_p_agora__rtc__IChannelEventHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((agora::rtc::IChannelEventHandler *)  ((agora::common::RtcChannelEventHandlerBase *) x));
}
static void *_p_agora__common__RtcEngineEventHandlerBaseTo_p_agora__rtc__IRtcEngineEventHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((agora::rtc::IRtcEngineEventHandler *)  ((agora::common::RtcEngineEventHandlerBase *) x));
}
static swig_type_info _swigt__p_AudioFrameObserver = {"_p_AudioFrameObserver", "AudioFrameObserver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VideoFrameObserver = {"_p_VideoFrameObserver", "VideoFrameObserver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__common__APICaseHandler = {"_p_agora__common__APICaseHandler", "agora::common::APICaseHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__common__AudioPlaybackDeviceManager = {"_p_agora__common__AudioPlaybackDeviceManager", "agora::common::AudioPlaybackDeviceManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__common__AudioRecordingDeviceManager = {"_p_agora__common__AudioRecordingDeviceManager", "agora::common::AudioRecordingDeviceManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__common__RtcChannelBridge = {"_p_agora__common__RtcChannelBridge", "agora::common::RtcChannelBridge *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__common__RtcChannelEventHandlerBase = {"_p_agora__common__RtcChannelEventHandlerBase", "agora::common::RtcChannelEventHandlerBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__common__RtcEngineBridge = {"_p_agora__common__RtcEngineBridge", "agora::common::RtcEngineBridge *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__common__RtcEngineEventHandlerBase = {"_p_agora__common__RtcEngineEventHandlerBase", "agora::common::RtcEngineEventHandlerBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__common__VideoDeviceManager = {"_p_agora__common__VideoDeviceManager", "agora::common::VideoDeviceManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__AudioVolumeInfo = {"_p_agora__rtc__AudioVolumeInfo", "agora::rtc::AudioVolumeInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__BeautyOptions = {"_p_agora__rtc__BeautyOptions", "agora::rtc::BeautyOptions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__CameraCapturerConfiguration = {"_p_agora__rtc__CameraCapturerConfiguration", "agora::rtc::CameraCapturerConfiguration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__ChannelMediaInfo = {"_p_agora__rtc__ChannelMediaInfo", "agora::rtc::ChannelMediaInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__ChannelMediaOptions = {"_p_agora__rtc__ChannelMediaOptions", "agora::rtc::ChannelMediaOptions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__ChannelMediaRelayConfiguration = {"_p_agora__rtc__ChannelMediaRelayConfiguration", "agora::rtc::ChannelMediaRelayConfiguration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__IChannel = {"_p_agora__rtc__IChannel", "agora::rtc::IChannel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__IChannelEventHandler = {"_p_agora__rtc__IChannelEventHandler", "agora::rtc::IChannelEventHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__IMetadataObserver = {"_p_agora__rtc__IMetadataObserver", "agora::rtc::IMetadataObserver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__IMetadataObserver__METADATA_TYPE = {"_p_agora__rtc__IMetadataObserver__METADATA_TYPE", "agora::rtc::IMetadataObserver::METADATA_TYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__IMetadataObserver__Metadata = {"_p_agora__rtc__IMetadataObserver__Metadata", "agora::rtc::IMetadataObserver::Metadata *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__IPacketObserver = {"_p_agora__rtc__IPacketObserver", "agora::rtc::IPacketObserver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__IRtcEngineEventHandler = {"_p_agora__rtc__IRtcEngineEventHandler", "agora::rtc::IRtcEngineEventHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__InjectStreamConfig = {"_p_agora__rtc__InjectStreamConfig", "agora::rtc::InjectStreamConfig *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__LastmileProbeConfig = {"_p_agora__rtc__LastmileProbeConfig", "agora::rtc::LastmileProbeConfig *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__LastmileProbeOneWayResult = {"_p_agora__rtc__LastmileProbeOneWayResult", "agora::rtc::LastmileProbeOneWayResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__LastmileProbeResult = {"_p_agora__rtc__LastmileProbeResult", "agora::rtc::LastmileProbeResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__LiveStreamAdvancedFeature = {"_p_agora__rtc__LiveStreamAdvancedFeature", "agora::rtc::LiveStreamAdvancedFeature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__LiveTranscoding = {"_p_agora__rtc__LiveTranscoding", "agora::rtc::LiveTranscoding *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__LocalAudioStats = {"_p_agora__rtc__LocalAudioStats", "agora::rtc::LocalAudioStats *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__LocalVideoStats = {"_p_agora__rtc__LocalVideoStats", "agora::rtc::LocalVideoStats *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__Rect = {"_p_agora__rtc__Rect", "agora::rtc::Rect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__Rectangle = {"_p_agora__rtc__Rectangle", "agora::rtc::Rectangle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__RemoteAudioStats = {"_p_agora__rtc__RemoteAudioStats", "agora::rtc::RemoteAudioStats *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__RemoteVideoStats = {"_p_agora__rtc__RemoteVideoStats", "agora::rtc::RemoteVideoStats *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__RtcImage = {"_p_agora__rtc__RtcImage", "agora::rtc::RtcImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__RtcStats = {"_p_agora__rtc__RtcStats", "agora::rtc::RtcStats *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__ScreenCaptureParameters = {"_p_agora__rtc__ScreenCaptureParameters", "agora::rtc::ScreenCaptureParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__TranscodingUser = {"_p_agora__rtc__TranscodingUser", "agora::rtc::TranscodingUser *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__UserInfo = {"_p_agora__rtc__UserInfo", "agora::rtc::UserInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__VideoCanvas = {"_p_agora__rtc__VideoCanvas", "agora::rtc::VideoCanvas *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__VideoDimensions = {"_p_agora__rtc__VideoDimensions", "agora::rtc::VideoDimensions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__VideoEncoderConfiguration = {"_p_agora__rtc__VideoEncoderConfiguration", "agora::rtc::VideoEncoderConfiguration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__rtc__WatermarkOptions = {"_p_agora__rtc__WatermarkOptions", "agora::rtc::WatermarkOptions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__util__AutoPtrT_agora__util__IString_t = {"_p_agora__util__AutoPtrT_agora__util__IString_t", "agora::util::AutoPtr< agora::util::IString > *|agora::util::AString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_agora__util__IString = {"_p_agora__util__IString", "agora::util::IString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "agora::rtc::view_t *|void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|agora::rtc::uid_t *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *|agora::rtc::view_t", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AudioFrameObserver,
  &_swigt__p_VideoFrameObserver,
  &_swigt__p_agora__common__APICaseHandler,
  &_swigt__p_agora__common__AudioPlaybackDeviceManager,
  &_swigt__p_agora__common__AudioRecordingDeviceManager,
  &_swigt__p_agora__common__RtcChannelBridge,
  &_swigt__p_agora__common__RtcChannelEventHandlerBase,
  &_swigt__p_agora__common__RtcEngineBridge,
  &_swigt__p_agora__common__RtcEngineEventHandlerBase,
  &_swigt__p_agora__common__VideoDeviceManager,
  &_swigt__p_agora__rtc__AudioVolumeInfo,
  &_swigt__p_agora__rtc__BeautyOptions,
  &_swigt__p_agora__rtc__CameraCapturerConfiguration,
  &_swigt__p_agora__rtc__ChannelMediaInfo,
  &_swigt__p_agora__rtc__ChannelMediaOptions,
  &_swigt__p_agora__rtc__ChannelMediaRelayConfiguration,
  &_swigt__p_agora__rtc__IChannel,
  &_swigt__p_agora__rtc__IChannelEventHandler,
  &_swigt__p_agora__rtc__IMetadataObserver,
  &_swigt__p_agora__rtc__IMetadataObserver__METADATA_TYPE,
  &_swigt__p_agora__rtc__IMetadataObserver__Metadata,
  &_swigt__p_agora__rtc__IPacketObserver,
  &_swigt__p_agora__rtc__IRtcEngineEventHandler,
  &_swigt__p_agora__rtc__InjectStreamConfig,
  &_swigt__p_agora__rtc__LastmileProbeConfig,
  &_swigt__p_agora__rtc__LastmileProbeOneWayResult,
  &_swigt__p_agora__rtc__LastmileProbeResult,
  &_swigt__p_agora__rtc__LiveStreamAdvancedFeature,
  &_swigt__p_agora__rtc__LiveTranscoding,
  &_swigt__p_agora__rtc__LocalAudioStats,
  &_swigt__p_agora__rtc__LocalVideoStats,
  &_swigt__p_agora__rtc__Rect,
  &_swigt__p_agora__rtc__Rectangle,
  &_swigt__p_agora__rtc__RemoteAudioStats,
  &_swigt__p_agora__rtc__RemoteVideoStats,
  &_swigt__p_agora__rtc__RtcImage,
  &_swigt__p_agora__rtc__RtcStats,
  &_swigt__p_agora__rtc__ScreenCaptureParameters,
  &_swigt__p_agora__rtc__TranscodingUser,
  &_swigt__p_agora__rtc__UserInfo,
  &_swigt__p_agora__rtc__VideoCanvas,
  &_swigt__p_agora__rtc__VideoDimensions,
  &_swigt__p_agora__rtc__VideoEncoderConfiguration,
  &_swigt__p_agora__rtc__WatermarkOptions,
  &_swigt__p_agora__util__AutoPtrT_agora__util__IString_t,
  &_swigt__p_agora__util__IString,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_p_void,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_AudioFrameObserver[] = {  {&_swigt__p_AudioFrameObserver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VideoFrameObserver[] = {  {&_swigt__p_VideoFrameObserver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__common__APICaseHandler[] = {  {&_swigt__p_agora__common__APICaseHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__common__AudioPlaybackDeviceManager[] = {  {&_swigt__p_agora__common__AudioPlaybackDeviceManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__common__AudioRecordingDeviceManager[] = {  {&_swigt__p_agora__common__AudioRecordingDeviceManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__common__RtcChannelBridge[] = {  {&_swigt__p_agora__common__RtcChannelBridge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__common__RtcChannelEventHandlerBase[] = {  {&_swigt__p_agora__common__RtcChannelEventHandlerBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__common__RtcEngineBridge[] = {  {&_swigt__p_agora__common__RtcEngineBridge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__common__RtcEngineEventHandlerBase[] = {  {&_swigt__p_agora__common__RtcEngineEventHandlerBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__common__VideoDeviceManager[] = {  {&_swigt__p_agora__common__VideoDeviceManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__AudioVolumeInfo[] = {  {&_swigt__p_agora__rtc__AudioVolumeInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__BeautyOptions[] = {  {&_swigt__p_agora__rtc__BeautyOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__CameraCapturerConfiguration[] = {  {&_swigt__p_agora__rtc__CameraCapturerConfiguration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__ChannelMediaInfo[] = {  {&_swigt__p_agora__rtc__ChannelMediaInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__ChannelMediaOptions[] = {  {&_swigt__p_agora__rtc__ChannelMediaOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__ChannelMediaRelayConfiguration[] = {  {&_swigt__p_agora__rtc__ChannelMediaRelayConfiguration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__IChannel[] = {  {&_swigt__p_agora__rtc__IChannel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__IChannelEventHandler[] = {  {&_swigt__p_agora__common__RtcChannelEventHandlerBase, _p_agora__common__RtcChannelEventHandlerBaseTo_p_agora__rtc__IChannelEventHandler, 0, 0},  {&_swigt__p_agora__rtc__IChannelEventHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__IMetadataObserver[] = {  {&_swigt__p_agora__rtc__IMetadataObserver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__IMetadataObserver__METADATA_TYPE[] = {  {&_swigt__p_agora__rtc__IMetadataObserver__METADATA_TYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__IMetadataObserver__Metadata[] = {  {&_swigt__p_agora__rtc__IMetadataObserver__Metadata, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__IPacketObserver[] = {  {&_swigt__p_agora__rtc__IPacketObserver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__IRtcEngineEventHandler[] = {  {&_swigt__p_agora__common__RtcEngineEventHandlerBase, _p_agora__common__RtcEngineEventHandlerBaseTo_p_agora__rtc__IRtcEngineEventHandler, 0, 0},  {&_swigt__p_agora__rtc__IRtcEngineEventHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__InjectStreamConfig[] = {  {&_swigt__p_agora__rtc__InjectStreamConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__LastmileProbeConfig[] = {  {&_swigt__p_agora__rtc__LastmileProbeConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__LastmileProbeOneWayResult[] = {  {&_swigt__p_agora__rtc__LastmileProbeOneWayResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__LastmileProbeResult[] = {  {&_swigt__p_agora__rtc__LastmileProbeResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__LiveStreamAdvancedFeature[] = {  {&_swigt__p_agora__rtc__LiveStreamAdvancedFeature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__LiveTranscoding[] = {  {&_swigt__p_agora__rtc__LiveTranscoding, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__LocalAudioStats[] = {  {&_swigt__p_agora__rtc__LocalAudioStats, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__LocalVideoStats[] = {  {&_swigt__p_agora__rtc__LocalVideoStats, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__Rect[] = {  {&_swigt__p_agora__rtc__Rect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__Rectangle[] = {  {&_swigt__p_agora__rtc__Rectangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__RemoteAudioStats[] = {  {&_swigt__p_agora__rtc__RemoteAudioStats, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__RemoteVideoStats[] = {  {&_swigt__p_agora__rtc__RemoteVideoStats, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__RtcImage[] = {  {&_swigt__p_agora__rtc__RtcImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__RtcStats[] = {  {&_swigt__p_agora__rtc__RtcStats, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__ScreenCaptureParameters[] = {  {&_swigt__p_agora__rtc__ScreenCaptureParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__TranscodingUser[] = {  {&_swigt__p_agora__rtc__TranscodingUser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__UserInfo[] = {  {&_swigt__p_agora__rtc__UserInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__VideoCanvas[] = {  {&_swigt__p_agora__rtc__VideoCanvas, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__VideoDimensions[] = {  {&_swigt__p_agora__rtc__VideoDimensions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__VideoEncoderConfiguration[] = {  {&_swigt__p_agora__rtc__VideoEncoderConfiguration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__rtc__WatermarkOptions[] = {  {&_swigt__p_agora__rtc__WatermarkOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__util__AutoPtrT_agora__util__IString_t[] = {  {&_swigt__p_agora__util__AutoPtrT_agora__util__IString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_agora__util__IString[] = {  {&_swigt__p_agora__util__IString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AudioFrameObserver,
  _swigc__p_VideoFrameObserver,
  _swigc__p_agora__common__APICaseHandler,
  _swigc__p_agora__common__AudioPlaybackDeviceManager,
  _swigc__p_agora__common__AudioRecordingDeviceManager,
  _swigc__p_agora__common__RtcChannelBridge,
  _swigc__p_agora__common__RtcChannelEventHandlerBase,
  _swigc__p_agora__common__RtcEngineBridge,
  _swigc__p_agora__common__RtcEngineEventHandlerBase,
  _swigc__p_agora__common__VideoDeviceManager,
  _swigc__p_agora__rtc__AudioVolumeInfo,
  _swigc__p_agora__rtc__BeautyOptions,
  _swigc__p_agora__rtc__CameraCapturerConfiguration,
  _swigc__p_agora__rtc__ChannelMediaInfo,
  _swigc__p_agora__rtc__ChannelMediaOptions,
  _swigc__p_agora__rtc__ChannelMediaRelayConfiguration,
  _swigc__p_agora__rtc__IChannel,
  _swigc__p_agora__rtc__IChannelEventHandler,
  _swigc__p_agora__rtc__IMetadataObserver,
  _swigc__p_agora__rtc__IMetadataObserver__METADATA_TYPE,
  _swigc__p_agora__rtc__IMetadataObserver__Metadata,
  _swigc__p_agora__rtc__IPacketObserver,
  _swigc__p_agora__rtc__IRtcEngineEventHandler,
  _swigc__p_agora__rtc__InjectStreamConfig,
  _swigc__p_agora__rtc__LastmileProbeConfig,
  _swigc__p_agora__rtc__LastmileProbeOneWayResult,
  _swigc__p_agora__rtc__LastmileProbeResult,
  _swigc__p_agora__rtc__LiveStreamAdvancedFeature,
  _swigc__p_agora__rtc__LiveTranscoding,
  _swigc__p_agora__rtc__LocalAudioStats,
  _swigc__p_agora__rtc__LocalVideoStats,
  _swigc__p_agora__rtc__Rect,
  _swigc__p_agora__rtc__Rectangle,
  _swigc__p_agora__rtc__RemoteAudioStats,
  _swigc__p_agora__rtc__RemoteVideoStats,
  _swigc__p_agora__rtc__RtcImage,
  _swigc__p_agora__rtc__RtcStats,
  _swigc__p_agora__rtc__ScreenCaptureParameters,
  _swigc__p_agora__rtc__TranscodingUser,
  _swigc__p_agora__rtc__UserInfo,
  _swigc__p_agora__rtc__VideoCanvas,
  _swigc__p_agora__rtc__VideoDimensions,
  _swigc__p_agora__rtc__VideoEncoderConfiguration,
  _swigc__p_agora__rtc__WatermarkOptions,
  _swigc__p_agora__util__AutoPtrT_agora__util__IString_t,
  _swigc__p_agora__util__IString,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_p_void,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        "swigvarlink",                      /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        0,                                  /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
        0,                                  /* tp_del */
        0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
        0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
        0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
        0,                                  /* tp_prev */
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        memcpy(gv->name, name, size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *globals = 0;
    if (!globals) {
      globals = SWIG_newvarlink();
    }
    return globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
  /* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */
  
  /* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
    /* Find the function in the modified method table */
    size_t offset = 0;
    int found = 0;
    while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
      if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
        found = 1;
        break;
      }
      offset++;
    }
    /* Use the copy with the modified docstring if available */
    return found ? &SwigMethods_proxydocs[offset] : NULL;
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
#if PY_VERSION_HEX >= 0x03000000
    return PyInstanceMethod_New(func);
#else
    return PyMethod_New(func, NULL, NULL);
#endif
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
    return PyStaticMethod_New(func);
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "AGORA_IID_AUDIO_DEVICE_MANAGER",SWIG_From_int(static_cast< int >(agora::AGORA_IID_AUDIO_DEVICE_MANAGER)));
  SWIG_Python_SetConstant(d, "AGORA_IID_VIDEO_DEVICE_MANAGER",SWIG_From_int(static_cast< int >(agora::AGORA_IID_VIDEO_DEVICE_MANAGER)));
  SWIG_Python_SetConstant(d, "AGORA_IID_RTC_ENGINE_PARAMETER",SWIG_From_int(static_cast< int >(agora::AGORA_IID_RTC_ENGINE_PARAMETER)));
  SWIG_Python_SetConstant(d, "AGORA_IID_MEDIA_ENGINE",SWIG_From_int(static_cast< int >(agora::AGORA_IID_MEDIA_ENGINE)));
  SWIG_Python_SetConstant(d, "AGORA_IID_SIGNALING_ENGINE",SWIG_From_int(static_cast< int >(agora::AGORA_IID_SIGNALING_ENGINE)));
  SWIG_Python_SetConstant(d, "WARN_INVALID_VIEW",SWIG_From_int(static_cast< int >(agora::WARN_INVALID_VIEW)));
  SWIG_Python_SetConstant(d, "WARN_INIT_VIDEO",SWIG_From_int(static_cast< int >(agora::WARN_INIT_VIDEO)));
  SWIG_Python_SetConstant(d, "WARN_PENDING",SWIG_From_int(static_cast< int >(agora::WARN_PENDING)));
  SWIG_Python_SetConstant(d, "WARN_NO_AVAILABLE_CHANNEL",SWIG_From_int(static_cast< int >(agora::WARN_NO_AVAILABLE_CHANNEL)));
  SWIG_Python_SetConstant(d, "WARN_LOOKUP_CHANNEL_TIMEOUT",SWIG_From_int(static_cast< int >(agora::WARN_LOOKUP_CHANNEL_TIMEOUT)));
  SWIG_Python_SetConstant(d, "WARN_LOOKUP_CHANNEL_REJECTED",SWIG_From_int(static_cast< int >(agora::WARN_LOOKUP_CHANNEL_REJECTED)));
  SWIG_Python_SetConstant(d, "WARN_OPEN_CHANNEL_TIMEOUT",SWIG_From_int(static_cast< int >(agora::WARN_OPEN_CHANNEL_TIMEOUT)));
  SWIG_Python_SetConstant(d, "WARN_OPEN_CHANNEL_REJECTED",SWIG_From_int(static_cast< int >(agora::WARN_OPEN_CHANNEL_REJECTED)));
  SWIG_Python_SetConstant(d, "WARN_SWITCH_LIVE_VIDEO_TIMEOUT",SWIG_From_int(static_cast< int >(agora::WARN_SWITCH_LIVE_VIDEO_TIMEOUT)));
  SWIG_Python_SetConstant(d, "WARN_SET_CLIENT_ROLE_TIMEOUT",SWIG_From_int(static_cast< int >(agora::WARN_SET_CLIENT_ROLE_TIMEOUT)));
  SWIG_Python_SetConstant(d, "WARN_OPEN_CHANNEL_INVALID_TICKET",SWIG_From_int(static_cast< int >(agora::WARN_OPEN_CHANNEL_INVALID_TICKET)));
  SWIG_Python_SetConstant(d, "WARN_OPEN_CHANNEL_TRY_NEXT_VOS",SWIG_From_int(static_cast< int >(agora::WARN_OPEN_CHANNEL_TRY_NEXT_VOS)));
  SWIG_Python_SetConstant(d, "WARN_CHANNEL_CONNECTION_UNRECOVERABLE",SWIG_From_int(static_cast< int >(agora::WARN_CHANNEL_CONNECTION_UNRECOVERABLE)));
  SWIG_Python_SetConstant(d, "WARN_CHANNEL_CONNECTION_IP_CHANGED",SWIG_From_int(static_cast< int >(agora::WARN_CHANNEL_CONNECTION_IP_CHANGED)));
  SWIG_Python_SetConstant(d, "WARN_CHANNEL_CONNECTION_PORT_CHANGED",SWIG_From_int(static_cast< int >(agora::WARN_CHANNEL_CONNECTION_PORT_CHANGED)));
  SWIG_Python_SetConstant(d, "WARN_AUDIO_MIXING_OPEN_ERROR",SWIG_From_int(static_cast< int >(agora::WARN_AUDIO_MIXING_OPEN_ERROR)));
  SWIG_Python_SetConstant(d, "WARN_ADM_RUNTIME_PLAYOUT_WARNING",SWIG_From_int(static_cast< int >(agora::WARN_ADM_RUNTIME_PLAYOUT_WARNING)));
  SWIG_Python_SetConstant(d, "WARN_ADM_RUNTIME_RECORDING_WARNING",SWIG_From_int(static_cast< int >(agora::WARN_ADM_RUNTIME_RECORDING_WARNING)));
  SWIG_Python_SetConstant(d, "WARN_ADM_RECORD_AUDIO_SILENCE",SWIG_From_int(static_cast< int >(agora::WARN_ADM_RECORD_AUDIO_SILENCE)));
  SWIG_Python_SetConstant(d, "WARN_ADM_PLAYOUT_MALFUNCTION",SWIG_From_int(static_cast< int >(agora::WARN_ADM_PLAYOUT_MALFUNCTION)));
  SWIG_Python_SetConstant(d, "WARN_ADM_RECORD_MALFUNCTION",SWIG_From_int(static_cast< int >(agora::WARN_ADM_RECORD_MALFUNCTION)));
  SWIG_Python_SetConstant(d, "WARN_ADM_CALL_INTERRUPTION",SWIG_From_int(static_cast< int >(agora::WARN_ADM_CALL_INTERRUPTION)));
  SWIG_Python_SetConstant(d, "WARN_ADM_IOS_CATEGORY_NOT_PLAYANDRECORD",SWIG_From_int(static_cast< int >(agora::WARN_ADM_IOS_CATEGORY_NOT_PLAYANDRECORD)));
  SWIG_Python_SetConstant(d, "WARN_ADM_RECORD_AUDIO_LOWLEVEL",SWIG_From_int(static_cast< int >(agora::WARN_ADM_RECORD_AUDIO_LOWLEVEL)));
  SWIG_Python_SetConstant(d, "WARN_ADM_PLAYOUT_AUDIO_LOWLEVEL",SWIG_From_int(static_cast< int >(agora::WARN_ADM_PLAYOUT_AUDIO_LOWLEVEL)));
  SWIG_Python_SetConstant(d, "WARN_ADM_RECORD_AUDIO_IS_ACTIVE",SWIG_From_int(static_cast< int >(agora::WARN_ADM_RECORD_AUDIO_IS_ACTIVE)));
  SWIG_Python_SetConstant(d, "WARN_ADM_WINDOWS_NO_DATA_READY_EVENT",SWIG_From_int(static_cast< int >(agora::WARN_ADM_WINDOWS_NO_DATA_READY_EVENT)));
  SWIG_Python_SetConstant(d, "WARN_ADM_INCONSISTENT_AUDIO_DEVICE",SWIG_From_int(static_cast< int >(agora::WARN_ADM_INCONSISTENT_AUDIO_DEVICE)));
  SWIG_Python_SetConstant(d, "WARN_APM_HOWLING",SWIG_From_int(static_cast< int >(agora::WARN_APM_HOWLING)));
  SWIG_Python_SetConstant(d, "WARN_ADM_GLITCH_STATE",SWIG_From_int(static_cast< int >(agora::WARN_ADM_GLITCH_STATE)));
  SWIG_Python_SetConstant(d, "WARN_APM_RESIDUAL_ECHO",SWIG_From_int(static_cast< int >(agora::WARN_APM_RESIDUAL_ECHO)));
  SWIG_Python_SetConstant(d, "WARN_ADM_WIN_CORE_NO_RECORDING_DEVICE",SWIG_From_int(static_cast< int >(agora::WARN_ADM_WIN_CORE_NO_RECORDING_DEVICE)));
  SWIG_Python_SetConstant(d, "WARN_ADM_WIN_CORE_NO_PLAYOUT_DEVICE",SWIG_From_int(static_cast< int >(agora::WARN_ADM_WIN_CORE_NO_PLAYOUT_DEVICE)));
  SWIG_Python_SetConstant(d, "WARN_ADM_WIN_CORE_IMPROPER_CAPTURE_RELEASE",SWIG_From_int(static_cast< int >(agora::WARN_ADM_WIN_CORE_IMPROPER_CAPTURE_RELEASE)));
  SWIG_Python_SetConstant(d, "WARN_SUPER_RESOLUTION_STREAM_OVER_LIMITATION",SWIG_From_int(static_cast< int >(agora::WARN_SUPER_RESOLUTION_STREAM_OVER_LIMITATION)));
  SWIG_Python_SetConstant(d, "WARN_SUPER_RESOLUTION_USER_COUNT_OVER_LIMITATION",SWIG_From_int(static_cast< int >(agora::WARN_SUPER_RESOLUTION_USER_COUNT_OVER_LIMITATION)));
  SWIG_Python_SetConstant(d, "WARN_SUPER_RESOLUTION_DEVICE_NOT_SUPPORTED",SWIG_From_int(static_cast< int >(agora::WARN_SUPER_RESOLUTION_DEVICE_NOT_SUPPORTED)));
  SWIG_Python_SetConstant(d, "WARN_RTM_LOGIN_TIMEOUT",SWIG_From_int(static_cast< int >(agora::WARN_RTM_LOGIN_TIMEOUT)));
  SWIG_Python_SetConstant(d, "WARN_RTM_KEEP_ALIVE_TIMEOUT",SWIG_From_int(static_cast< int >(agora::WARN_RTM_KEEP_ALIVE_TIMEOUT)));
  SWIG_Python_SetConstant(d, "ERR_OK",SWIG_From_int(static_cast< int >(agora::ERR_OK)));
  SWIG_Python_SetConstant(d, "ERR_FAILED",SWIG_From_int(static_cast< int >(agora::ERR_FAILED)));
  SWIG_Python_SetConstant(d, "ERR_INVALID_ARGUMENT",SWIG_From_int(static_cast< int >(agora::ERR_INVALID_ARGUMENT)));
  SWIG_Python_SetConstant(d, "ERR_NOT_READY",SWIG_From_int(static_cast< int >(agora::ERR_NOT_READY)));
  SWIG_Python_SetConstant(d, "ERR_NOT_SUPPORTED",SWIG_From_int(static_cast< int >(agora::ERR_NOT_SUPPORTED)));
  SWIG_Python_SetConstant(d, "ERR_REFUSED",SWIG_From_int(static_cast< int >(agora::ERR_REFUSED)));
  SWIG_Python_SetConstant(d, "ERR_BUFFER_TOO_SMALL",SWIG_From_int(static_cast< int >(agora::ERR_BUFFER_TOO_SMALL)));
  SWIG_Python_SetConstant(d, "ERR_NOT_INITIALIZED",SWIG_From_int(static_cast< int >(agora::ERR_NOT_INITIALIZED)));
  SWIG_Python_SetConstant(d, "ERR_NO_PERMISSION",SWIG_From_int(static_cast< int >(agora::ERR_NO_PERMISSION)));
  SWIG_Python_SetConstant(d, "ERR_TIMEDOUT",SWIG_From_int(static_cast< int >(agora::ERR_TIMEDOUT)));
  SWIG_Python_SetConstant(d, "ERR_CANCELED",SWIG_From_int(static_cast< int >(agora::ERR_CANCELED)));
  SWIG_Python_SetConstant(d, "ERR_TOO_OFTEN",SWIG_From_int(static_cast< int >(agora::ERR_TOO_OFTEN)));
  SWIG_Python_SetConstant(d, "ERR_BIND_SOCKET",SWIG_From_int(static_cast< int >(agora::ERR_BIND_SOCKET)));
  SWIG_Python_SetConstant(d, "ERR_NET_DOWN",SWIG_From_int(static_cast< int >(agora::ERR_NET_DOWN)));
  SWIG_Python_SetConstant(d, "ERR_NET_NOBUFS",SWIG_From_int(static_cast< int >(agora::ERR_NET_NOBUFS)));
  SWIG_Python_SetConstant(d, "ERR_JOIN_CHANNEL_REJECTED",SWIG_From_int(static_cast< int >(agora::ERR_JOIN_CHANNEL_REJECTED)));
  SWIG_Python_SetConstant(d, "ERR_LEAVE_CHANNEL_REJECTED",SWIG_From_int(static_cast< int >(agora::ERR_LEAVE_CHANNEL_REJECTED)));
  SWIG_Python_SetConstant(d, "ERR_ALREADY_IN_USE",SWIG_From_int(static_cast< int >(agora::ERR_ALREADY_IN_USE)));
  SWIG_Python_SetConstant(d, "ERR_ABORTED",SWIG_From_int(static_cast< int >(agora::ERR_ABORTED)));
  SWIG_Python_SetConstant(d, "ERR_INIT_NET_ENGINE",SWIG_From_int(static_cast< int >(agora::ERR_INIT_NET_ENGINE)));
  SWIG_Python_SetConstant(d, "ERR_RESOURCE_LIMITED",SWIG_From_int(static_cast< int >(agora::ERR_RESOURCE_LIMITED)));
  SWIG_Python_SetConstant(d, "ERR_INVALID_APP_ID",SWIG_From_int(static_cast< int >(agora::ERR_INVALID_APP_ID)));
  SWIG_Python_SetConstant(d, "ERR_INVALID_CHANNEL_NAME",SWIG_From_int(static_cast< int >(agora::ERR_INVALID_CHANNEL_NAME)));
  SWIG_Python_SetConstant(d, "ERR_NO_SERVER_RESOURCES",SWIG_From_int(static_cast< int >(agora::ERR_NO_SERVER_RESOURCES)));
  SWIG_Python_SetConstant(d, "ERR_TOKEN_EXPIRED",SWIG_From_int(static_cast< int >(agora::ERR_TOKEN_EXPIRED)));
  SWIG_Python_SetConstant(d, "ERR_INVALID_TOKEN",SWIG_From_int(static_cast< int >(agora::ERR_INVALID_TOKEN)));
  SWIG_Python_SetConstant(d, "ERR_CONNECTION_INTERRUPTED",SWIG_From_int(static_cast< int >(agora::ERR_CONNECTION_INTERRUPTED)));
  SWIG_Python_SetConstant(d, "ERR_CONNECTION_LOST",SWIG_From_int(static_cast< int >(agora::ERR_CONNECTION_LOST)));
  SWIG_Python_SetConstant(d, "ERR_NOT_IN_CHANNEL",SWIG_From_int(static_cast< int >(agora::ERR_NOT_IN_CHANNEL)));
  SWIG_Python_SetConstant(d, "ERR_SIZE_TOO_LARGE",SWIG_From_int(static_cast< int >(agora::ERR_SIZE_TOO_LARGE)));
  SWIG_Python_SetConstant(d, "ERR_BITRATE_LIMIT",SWIG_From_int(static_cast< int >(agora::ERR_BITRATE_LIMIT)));
  SWIG_Python_SetConstant(d, "ERR_TOO_MANY_DATA_STREAMS",SWIG_From_int(static_cast< int >(agora::ERR_TOO_MANY_DATA_STREAMS)));
  SWIG_Python_SetConstant(d, "ERR_STREAM_MESSAGE_TIMEOUT",SWIG_From_int(static_cast< int >(agora::ERR_STREAM_MESSAGE_TIMEOUT)));
  SWIG_Python_SetConstant(d, "ERR_SET_CLIENT_ROLE_NOT_AUTHORIZED",SWIG_From_int(static_cast< int >(agora::ERR_SET_CLIENT_ROLE_NOT_AUTHORIZED)));
  SWIG_Python_SetConstant(d, "ERR_DECRYPTION_FAILED",SWIG_From_int(static_cast< int >(agora::ERR_DECRYPTION_FAILED)));
  SWIG_Python_SetConstant(d, "ERR_CLIENT_IS_BANNED_BY_SERVER",SWIG_From_int(static_cast< int >(agora::ERR_CLIENT_IS_BANNED_BY_SERVER)));
  SWIG_Python_SetConstant(d, "ERR_WATERMARK_PARAM",SWIG_From_int(static_cast< int >(agora::ERR_WATERMARK_PARAM)));
  SWIG_Python_SetConstant(d, "ERR_WATERMARK_PATH",SWIG_From_int(static_cast< int >(agora::ERR_WATERMARK_PATH)));
  SWIG_Python_SetConstant(d, "ERR_WATERMARK_PNG",SWIG_From_int(static_cast< int >(agora::ERR_WATERMARK_PNG)));
  SWIG_Python_SetConstant(d, "ERR_WATERMARKR_INFO",SWIG_From_int(static_cast< int >(agora::ERR_WATERMARKR_INFO)));
  SWIG_Python_SetConstant(d, "ERR_WATERMARK_ARGB",SWIG_From_int(static_cast< int >(agora::ERR_WATERMARK_ARGB)));
  SWIG_Python_SetConstant(d, "ERR_WATERMARK_READ",SWIG_From_int(static_cast< int >(agora::ERR_WATERMARK_READ)));
  SWIG_Python_SetConstant(d, "ERR_ENCRYPTED_STREAM_NOT_ALLOWED_PUBLISH",SWIG_From_int(static_cast< int >(agora::ERR_ENCRYPTED_STREAM_NOT_ALLOWED_PUBLISH)));
  SWIG_Python_SetConstant(d, "ERR_INVALID_USER_ACCOUNT",SWIG_From_int(static_cast< int >(agora::ERR_INVALID_USER_ACCOUNT)));
  SWIG_Python_SetConstant(d, "ERR_PUBLISH_STREAM_CDN_ERROR",SWIG_From_int(static_cast< int >(agora::ERR_PUBLISH_STREAM_CDN_ERROR)));
  SWIG_Python_SetConstant(d, "ERR_PUBLISH_STREAM_NUM_REACH_LIMIT",SWIG_From_int(static_cast< int >(agora::ERR_PUBLISH_STREAM_NUM_REACH_LIMIT)));
  SWIG_Python_SetConstant(d, "ERR_PUBLISH_STREAM_NOT_AUTHORIZED",SWIG_From_int(static_cast< int >(agora::ERR_PUBLISH_STREAM_NOT_AUTHORIZED)));
  SWIG_Python_SetConstant(d, "ERR_PUBLISH_STREAM_INTERNAL_SERVER_ERROR",SWIG_From_int(static_cast< int >(agora::ERR_PUBLISH_STREAM_INTERNAL_SERVER_ERROR)));
  SWIG_Python_SetConstant(d, "ERR_PUBLISH_STREAM_NOT_FOUND",SWIG_From_int(static_cast< int >(agora::ERR_PUBLISH_STREAM_NOT_FOUND)));
  SWIG_Python_SetConstant(d, "ERR_PUBLISH_STREAM_FORMAT_NOT_SUPPORTED",SWIG_From_int(static_cast< int >(agora::ERR_PUBLISH_STREAM_FORMAT_NOT_SUPPORTED)));
  SWIG_Python_SetConstant(d, "ERR_LOGOUT_OTHER",SWIG_From_int(static_cast< int >(agora::ERR_LOGOUT_OTHER)));
  SWIG_Python_SetConstant(d, "ERR_LOGOUT_USER",SWIG_From_int(static_cast< int >(agora::ERR_LOGOUT_USER)));
  SWIG_Python_SetConstant(d, "ERR_LOGOUT_NET",SWIG_From_int(static_cast< int >(agora::ERR_LOGOUT_NET)));
  SWIG_Python_SetConstant(d, "ERR_LOGOUT_KICKED",SWIG_From_int(static_cast< int >(agora::ERR_LOGOUT_KICKED)));
  SWIG_Python_SetConstant(d, "ERR_LOGOUT_PACKET",SWIG_From_int(static_cast< int >(agora::ERR_LOGOUT_PACKET)));
  SWIG_Python_SetConstant(d, "ERR_LOGOUT_TOKEN_EXPIRED",SWIG_From_int(static_cast< int >(agora::ERR_LOGOUT_TOKEN_EXPIRED)));
  SWIG_Python_SetConstant(d, "ERR_LOGOUT_OLDVERSION",SWIG_From_int(static_cast< int >(agora::ERR_LOGOUT_OLDVERSION)));
  SWIG_Python_SetConstant(d, "ERR_LOGOUT_TOKEN_WRONG",SWIG_From_int(static_cast< int >(agora::ERR_LOGOUT_TOKEN_WRONG)));
  SWIG_Python_SetConstant(d, "ERR_LOGOUT_ALREADY_LOGOUT",SWIG_From_int(static_cast< int >(agora::ERR_LOGOUT_ALREADY_LOGOUT)));
  SWIG_Python_SetConstant(d, "ERR_LOGIN_OTHER",SWIG_From_int(static_cast< int >(agora::ERR_LOGIN_OTHER)));
  SWIG_Python_SetConstant(d, "ERR_LOGIN_NET",SWIG_From_int(static_cast< int >(agora::ERR_LOGIN_NET)));
  SWIG_Python_SetConstant(d, "ERR_LOGIN_FAILED",SWIG_From_int(static_cast< int >(agora::ERR_LOGIN_FAILED)));
  SWIG_Python_SetConstant(d, "ERR_LOGIN_CANCELED",SWIG_From_int(static_cast< int >(agora::ERR_LOGIN_CANCELED)));
  SWIG_Python_SetConstant(d, "ERR_LOGIN_TOKEN_EXPIRED",SWIG_From_int(static_cast< int >(agora::ERR_LOGIN_TOKEN_EXPIRED)));
  SWIG_Python_SetConstant(d, "ERR_LOGIN_OLD_VERSION",SWIG_From_int(static_cast< int >(agora::ERR_LOGIN_OLD_VERSION)));
  SWIG_Python_SetConstant(d, "ERR_LOGIN_TOKEN_WRONG",SWIG_From_int(static_cast< int >(agora::ERR_LOGIN_TOKEN_WRONG)));
  SWIG_Python_SetConstant(d, "ERR_LOGIN_TOKEN_KICKED",SWIG_From_int(static_cast< int >(agora::ERR_LOGIN_TOKEN_KICKED)));
  SWIG_Python_SetConstant(d, "ERR_LOGIN_ALREADY_LOGIN",SWIG_From_int(static_cast< int >(agora::ERR_LOGIN_ALREADY_LOGIN)));
  SWIG_Python_SetConstant(d, "ERR_JOIN_CHANNEL_OTHER",SWIG_From_int(static_cast< int >(agora::ERR_JOIN_CHANNEL_OTHER)));
  SWIG_Python_SetConstant(d, "ERR_SEND_MESSAGE_OTHER",SWIG_From_int(static_cast< int >(agora::ERR_SEND_MESSAGE_OTHER)));
  SWIG_Python_SetConstant(d, "ERR_SEND_MESSAGE_TIMEOUT",SWIG_From_int(static_cast< int >(agora::ERR_SEND_MESSAGE_TIMEOUT)));
  SWIG_Python_SetConstant(d, "ERR_QUERY_USERNUM_OTHER",SWIG_From_int(static_cast< int >(agora::ERR_QUERY_USERNUM_OTHER)));
  SWIG_Python_SetConstant(d, "ERR_QUERY_USERNUM_TIMEOUT",SWIG_From_int(static_cast< int >(agora::ERR_QUERY_USERNUM_TIMEOUT)));
  SWIG_Python_SetConstant(d, "ERR_QUERY_USERNUM_BYUSER",SWIG_From_int(static_cast< int >(agora::ERR_QUERY_USERNUM_BYUSER)));
  SWIG_Python_SetConstant(d, "ERR_LEAVE_CHANNEL_OTHER",SWIG_From_int(static_cast< int >(agora::ERR_LEAVE_CHANNEL_OTHER)));
  SWIG_Python_SetConstant(d, "ERR_LEAVE_CHANNEL_KICKED",SWIG_From_int(static_cast< int >(agora::ERR_LEAVE_CHANNEL_KICKED)));
  SWIG_Python_SetConstant(d, "ERR_LEAVE_CHANNEL_BYUSER",SWIG_From_int(static_cast< int >(agora::ERR_LEAVE_CHANNEL_BYUSER)));
  SWIG_Python_SetConstant(d, "ERR_LEAVE_CHANNEL_LOGOUT",SWIG_From_int(static_cast< int >(agora::ERR_LEAVE_CHANNEL_LOGOUT)));
  SWIG_Python_SetConstant(d, "ERR_LEAVE_CHANNEL_DISCONNECTED",SWIG_From_int(static_cast< int >(agora::ERR_LEAVE_CHANNEL_DISCONNECTED)));
  SWIG_Python_SetConstant(d, "ERR_INVITE_OTHER",SWIG_From_int(static_cast< int >(agora::ERR_INVITE_OTHER)));
  SWIG_Python_SetConstant(d, "ERR_INVITE_REINVITE",SWIG_From_int(static_cast< int >(agora::ERR_INVITE_REINVITE)));
  SWIG_Python_SetConstant(d, "ERR_INVITE_NET",SWIG_From_int(static_cast< int >(agora::ERR_INVITE_NET)));
  SWIG_Python_SetConstant(d, "ERR_INVITE_PEER_OFFLINE",SWIG_From_int(static_cast< int >(agora::ERR_INVITE_PEER_OFFLINE)));
  SWIG_Python_SetConstant(d, "ERR_INVITE_TIMEOUT",SWIG_From_int(static_cast< int >(agora::ERR_INVITE_TIMEOUT)));
  SWIG_Python_SetConstant(d, "ERR_INVITE_CANT_RECV",SWIG_From_int(static_cast< int >(agora::ERR_INVITE_CANT_RECV)));
  SWIG_Python_SetConstant(d, "ERR_LOAD_MEDIA_ENGINE",SWIG_From_int(static_cast< int >(agora::ERR_LOAD_MEDIA_ENGINE)));
  SWIG_Python_SetConstant(d, "ERR_START_CALL",SWIG_From_int(static_cast< int >(agora::ERR_START_CALL)));
  SWIG_Python_SetConstant(d, "ERR_START_CAMERA",SWIG_From_int(static_cast< int >(agora::ERR_START_CAMERA)));
  SWIG_Python_SetConstant(d, "ERR_START_VIDEO_RENDER",SWIG_From_int(static_cast< int >(agora::ERR_START_VIDEO_RENDER)));
  SWIG_Python_SetConstant(d, "ERR_ADM_GENERAL_ERROR",SWIG_From_int(static_cast< int >(agora::ERR_ADM_GENERAL_ERROR)));
  SWIG_Python_SetConstant(d, "ERR_ADM_JAVA_RESOURCE",SWIG_From_int(static_cast< int >(agora::ERR_ADM_JAVA_RESOURCE)));
  SWIG_Python_SetConstant(d, "ERR_ADM_SAMPLE_RATE",SWIG_From_int(static_cast< int >(agora::ERR_ADM_SAMPLE_RATE)));
  SWIG_Python_SetConstant(d, "ERR_ADM_INIT_PLAYOUT",SWIG_From_int(static_cast< int >(agora::ERR_ADM_INIT_PLAYOUT)));
  SWIG_Python_SetConstant(d, "ERR_ADM_START_PLAYOUT",SWIG_From_int(static_cast< int >(agora::ERR_ADM_START_PLAYOUT)));
  SWIG_Python_SetConstant(d, "ERR_ADM_STOP_PLAYOUT",SWIG_From_int(static_cast< int >(agora::ERR_ADM_STOP_PLAYOUT)));
  SWIG_Python_SetConstant(d, "ERR_ADM_INIT_RECORDING",SWIG_From_int(static_cast< int >(agora::ERR_ADM_INIT_RECORDING)));
  SWIG_Python_SetConstant(d, "ERR_ADM_START_RECORDING",SWIG_From_int(static_cast< int >(agora::ERR_ADM_START_RECORDING)));
  SWIG_Python_SetConstant(d, "ERR_ADM_STOP_RECORDING",SWIG_From_int(static_cast< int >(agora::ERR_ADM_STOP_RECORDING)));
  SWIG_Python_SetConstant(d, "ERR_ADM_RUNTIME_PLAYOUT_ERROR",SWIG_From_int(static_cast< int >(agora::ERR_ADM_RUNTIME_PLAYOUT_ERROR)));
  SWIG_Python_SetConstant(d, "ERR_ADM_RUNTIME_RECORDING_ERROR",SWIG_From_int(static_cast< int >(agora::ERR_ADM_RUNTIME_RECORDING_ERROR)));
  SWIG_Python_SetConstant(d, "ERR_ADM_RECORD_AUDIO_FAILED",SWIG_From_int(static_cast< int >(agora::ERR_ADM_RECORD_AUDIO_FAILED)));
  SWIG_Python_SetConstant(d, "ERR_ADM_INIT_LOOPBACK",SWIG_From_int(static_cast< int >(agora::ERR_ADM_INIT_LOOPBACK)));
  SWIG_Python_SetConstant(d, "ERR_ADM_START_LOOPBACK",SWIG_From_int(static_cast< int >(agora::ERR_ADM_START_LOOPBACK)));
  SWIG_Python_SetConstant(d, "ERR_ADM_NO_PERMISSION",SWIG_From_int(static_cast< int >(agora::ERR_ADM_NO_PERMISSION)));
  SWIG_Python_SetConstant(d, "ERR_ADM_RECORD_AUDIO_IS_ACTIVE",SWIG_From_int(static_cast< int >(agora::ERR_ADM_RECORD_AUDIO_IS_ACTIVE)));
  SWIG_Python_SetConstant(d, "ERR_ADM_ANDROID_JNI_JAVA_RESOURCE",SWIG_From_int(static_cast< int >(agora::ERR_ADM_ANDROID_JNI_JAVA_RESOURCE)));
  SWIG_Python_SetConstant(d, "ERR_ADM_ANDROID_JNI_NO_RECORD_FREQUENCY",SWIG_From_int(static_cast< int >(agora::ERR_ADM_ANDROID_JNI_NO_RECORD_FREQUENCY)));
  SWIG_Python_SetConstant(d, "ERR_ADM_ANDROID_JNI_NO_PLAYBACK_FREQUENCY",SWIG_From_int(static_cast< int >(agora::ERR_ADM_ANDROID_JNI_NO_PLAYBACK_FREQUENCY)));
  SWIG_Python_SetConstant(d, "ERR_ADM_ANDROID_JNI_JAVA_START_RECORD",SWIG_From_int(static_cast< int >(agora::ERR_ADM_ANDROID_JNI_JAVA_START_RECORD)));
  SWIG_Python_SetConstant(d, "ERR_ADM_ANDROID_JNI_JAVA_START_PLAYBACK",SWIG_From_int(static_cast< int >(agora::ERR_ADM_ANDROID_JNI_JAVA_START_PLAYBACK)));
  SWIG_Python_SetConstant(d, "ERR_ADM_ANDROID_JNI_JAVA_RECORD_ERROR",SWIG_From_int(static_cast< int >(agora::ERR_ADM_ANDROID_JNI_JAVA_RECORD_ERROR)));
  SWIG_Python_SetConstant(d, "ERR_ADM_ANDROID_OPENSL_CREATE_ENGINE",SWIG_From_int(static_cast< int >(agora::ERR_ADM_ANDROID_OPENSL_CREATE_ENGINE)));
  SWIG_Python_SetConstant(d, "ERR_ADM_ANDROID_OPENSL_CREATE_AUDIO_RECORDER",SWIG_From_int(static_cast< int >(agora::ERR_ADM_ANDROID_OPENSL_CREATE_AUDIO_RECORDER)));
  SWIG_Python_SetConstant(d, "ERR_ADM_ANDROID_OPENSL_START_RECORDER_THREAD",SWIG_From_int(static_cast< int >(agora::ERR_ADM_ANDROID_OPENSL_START_RECORDER_THREAD)));
  SWIG_Python_SetConstant(d, "ERR_ADM_ANDROID_OPENSL_CREATE_AUDIO_PLAYER",SWIG_From_int(static_cast< int >(agora::ERR_ADM_ANDROID_OPENSL_CREATE_AUDIO_PLAYER)));
  SWIG_Python_SetConstant(d, "ERR_ADM_ANDROID_OPENSL_START_PLAYER_THREAD",SWIG_From_int(static_cast< int >(agora::ERR_ADM_ANDROID_OPENSL_START_PLAYER_THREAD)));
  SWIG_Python_SetConstant(d, "ERR_ADM_IOS_INPUT_NOT_AVAILABLE",SWIG_From_int(static_cast< int >(agora::ERR_ADM_IOS_INPUT_NOT_AVAILABLE)));
  SWIG_Python_SetConstant(d, "ERR_ADM_IOS_ACTIVATE_SESSION_FAIL",SWIG_From_int(static_cast< int >(agora::ERR_ADM_IOS_ACTIVATE_SESSION_FAIL)));
  SWIG_Python_SetConstant(d, "ERR_ADM_IOS_VPIO_INIT_FAIL",SWIG_From_int(static_cast< int >(agora::ERR_ADM_IOS_VPIO_INIT_FAIL)));
  SWIG_Python_SetConstant(d, "ERR_ADM_IOS_VPIO_REINIT_FAIL",SWIG_From_int(static_cast< int >(agora::ERR_ADM_IOS_VPIO_REINIT_FAIL)));
  SWIG_Python_SetConstant(d, "ERR_ADM_IOS_VPIO_RESTART_FAIL",SWIG_From_int(static_cast< int >(agora::ERR_ADM_IOS_VPIO_RESTART_FAIL)));
  SWIG_Python_SetConstant(d, "ERR_ADM_IOS_SET_RENDER_CALLBACK_FAIL",SWIG_From_int(static_cast< int >(agora::ERR_ADM_IOS_SET_RENDER_CALLBACK_FAIL)));
  SWIG_Python_SetConstant(d, "ERR_ADM_IOS_SESSION_SAMPLERATR_ZERO",SWIG_From_int(static_cast< int >(agora::ERR_ADM_IOS_SESSION_SAMPLERATR_ZERO)));
  SWIG_Python_SetConstant(d, "ERR_ADM_WIN_CORE_INIT",SWIG_From_int(static_cast< int >(agora::ERR_ADM_WIN_CORE_INIT)));
  SWIG_Python_SetConstant(d, "ERR_ADM_WIN_CORE_INIT_RECORDING",SWIG_From_int(static_cast< int >(agora::ERR_ADM_WIN_CORE_INIT_RECORDING)));
  SWIG_Python_SetConstant(d, "ERR_ADM_WIN_CORE_INIT_PLAYOUT",SWIG_From_int(static_cast< int >(agora::ERR_ADM_WIN_CORE_INIT_PLAYOUT)));
  SWIG_Python_SetConstant(d, "ERR_ADM_WIN_CORE_INIT_PLAYOUT_NULL",SWIG_From_int(static_cast< int >(agora::ERR_ADM_WIN_CORE_INIT_PLAYOUT_NULL)));
  SWIG_Python_SetConstant(d, "ERR_ADM_WIN_CORE_START_RECORDING",SWIG_From_int(static_cast< int >(agora::ERR_ADM_WIN_CORE_START_RECORDING)));
  SWIG_Python_SetConstant(d, "ERR_ADM_WIN_CORE_CREATE_REC_THREAD",SWIG_From_int(static_cast< int >(agora::ERR_ADM_WIN_CORE_CREATE_REC_THREAD)));
  SWIG_Python_SetConstant(d, "ERR_ADM_WIN_CORE_CAPTURE_NOT_STARTUP",SWIG_From_int(static_cast< int >(agora::ERR_ADM_WIN_CORE_CAPTURE_NOT_STARTUP)));
  SWIG_Python_SetConstant(d, "ERR_ADM_WIN_CORE_CREATE_RENDER_THREAD",SWIG_From_int(static_cast< int >(agora::ERR_ADM_WIN_CORE_CREATE_RENDER_THREAD)));
  SWIG_Python_SetConstant(d, "ERR_ADM_WIN_CORE_RENDER_NOT_STARTUP",SWIG_From_int(static_cast< int >(agora::ERR_ADM_WIN_CORE_RENDER_NOT_STARTUP)));
  SWIG_Python_SetConstant(d, "ERR_ADM_WIN_CORE_NO_RECORDING_DEVICE",SWIG_From_int(static_cast< int >(agora::ERR_ADM_WIN_CORE_NO_RECORDING_DEVICE)));
  SWIG_Python_SetConstant(d, "ERR_ADM_WIN_CORE_NO_PLAYOUT_DEVICE",SWIG_From_int(static_cast< int >(agora::ERR_ADM_WIN_CORE_NO_PLAYOUT_DEVICE)));
  SWIG_Python_SetConstant(d, "ERR_ADM_WIN_WAVE_INIT",SWIG_From_int(static_cast< int >(agora::ERR_ADM_WIN_WAVE_INIT)));
  SWIG_Python_SetConstant(d, "ERR_ADM_WIN_WAVE_INIT_RECORDING",SWIG_From_int(static_cast< int >(agora::ERR_ADM_WIN_WAVE_INIT_RECORDING)));
  SWIG_Python_SetConstant(d, "ERR_ADM_WIN_WAVE_INIT_MICROPHONE",SWIG_From_int(static_cast< int >(agora::ERR_ADM_WIN_WAVE_INIT_MICROPHONE)));
  SWIG_Python_SetConstant(d, "ERR_ADM_WIN_WAVE_INIT_PLAYOUT",SWIG_From_int(static_cast< int >(agora::ERR_ADM_WIN_WAVE_INIT_PLAYOUT)));
  SWIG_Python_SetConstant(d, "ERR_ADM_WIN_WAVE_INIT_SPEAKER",SWIG_From_int(static_cast< int >(agora::ERR_ADM_WIN_WAVE_INIT_SPEAKER)));
  SWIG_Python_SetConstant(d, "ERR_ADM_WIN_WAVE_START_RECORDING",SWIG_From_int(static_cast< int >(agora::ERR_ADM_WIN_WAVE_START_RECORDING)));
  SWIG_Python_SetConstant(d, "ERR_ADM_WIN_WAVE_START_PLAYOUT",SWIG_From_int(static_cast< int >(agora::ERR_ADM_WIN_WAVE_START_PLAYOUT)));
  SWIG_Python_SetConstant(d, "ERR_ADM_NO_RECORDING_DEVICE",SWIG_From_int(static_cast< int >(agora::ERR_ADM_NO_RECORDING_DEVICE)));
  SWIG_Python_SetConstant(d, "ERR_ADM_NO_PLAYOUT_DEVICE",SWIG_From_int(static_cast< int >(agora::ERR_ADM_NO_PLAYOUT_DEVICE)));
  SWIG_Python_SetConstant(d, "ERR_VDM_CAMERA_NOT_AUTHORIZED",SWIG_From_int(static_cast< int >(agora::ERR_VDM_CAMERA_NOT_AUTHORIZED)));
  SWIG_Python_SetConstant(d, "ERR_VDM_WIN_DEVICE_IN_USE",SWIG_From_int(static_cast< int >(agora::ERR_VDM_WIN_DEVICE_IN_USE)));
  SWIG_Python_SetConstant(d, "ERR_VCM_UNKNOWN_ERROR",SWIG_From_int(static_cast< int >(agora::ERR_VCM_UNKNOWN_ERROR)));
  SWIG_Python_SetConstant(d, "ERR_VCM_ENCODER_INIT_ERROR",SWIG_From_int(static_cast< int >(agora::ERR_VCM_ENCODER_INIT_ERROR)));
  SWIG_Python_SetConstant(d, "ERR_VCM_ENCODER_ENCODE_ERROR",SWIG_From_int(static_cast< int >(agora::ERR_VCM_ENCODER_ENCODE_ERROR)));
  SWIG_Python_SetConstant(d, "ERR_VCM_ENCODER_SET_ERROR",SWIG_From_int(static_cast< int >(agora::ERR_VCM_ENCODER_SET_ERROR)));
  SWIG_Python_SetConstant(d, "LOG_FILTER_OFF",SWIG_From_int(static_cast< int >(agora::LOG_FILTER_OFF)));
  SWIG_Python_SetConstant(d, "LOG_FILTER_DEBUG",SWIG_From_int(static_cast< int >(agora::LOG_FILTER_DEBUG)));
  SWIG_Python_SetConstant(d, "LOG_FILTER_INFO",SWIG_From_int(static_cast< int >(agora::LOG_FILTER_INFO)));
  SWIG_Python_SetConstant(d, "LOG_FILTER_WARN",SWIG_From_int(static_cast< int >(agora::LOG_FILTER_WARN)));
  SWIG_Python_SetConstant(d, "LOG_FILTER_ERROR",SWIG_From_int(static_cast< int >(agora::LOG_FILTER_ERROR)));
  SWIG_Python_SetConstant(d, "LOG_FILTER_CRITICAL",SWIG_From_int(static_cast< int >(agora::LOG_FILTER_CRITICAL)));
  SWIG_Python_SetConstant(d, "LOG_FILTER_MASK",SWIG_From_int(static_cast< int >(agora::LOG_FILTER_MASK)));
  SWIG_Python_SetConstant(d, "MAX_DEVICE_ID_LENGTH",SWIG_From_int(static_cast< int >(agora::rtc::MAX_DEVICE_ID_LENGTH)));
  SWIG_Python_SetConstant(d, "MAX_USER_ACCOUNT_LENGTH",SWIG_From_int(static_cast< int >(agora::rtc::MAX_USER_ACCOUNT_LENGTH)));
  SWIG_Python_SetConstant(d, "MAX_CHANNEL_ID_LENGTH",SWIG_From_int(static_cast< int >(agora::rtc::MAX_CHANNEL_ID_LENGTH)));
  SWIG_Python_SetConstant(d, "QUALITY_REPORT_JSON",SWIG_From_int(static_cast< int >(agora::rtc::QUALITY_REPORT_JSON)));
  SWIG_Python_SetConstant(d, "QUALITY_REPORT_HTML",SWIG_From_int(static_cast< int >(agora::rtc::QUALITY_REPORT_HTML)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_RECORDING_ERROR",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_RECORDING_ERROR)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_PLAYOUT_ERROR",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_PLAYOUT_ERROR)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_RECORDING_WARNING",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_RECORDING_WARNING)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_PLAYOUT_WARNING",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_PLAYOUT_WARNING)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_AUDIO_FILE_MIX_FINISH",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_AUDIO_FILE_MIX_FINISH)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_AUDIO_FAREND_MUSIC_BEGINS",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_AUDIO_FAREND_MUSIC_BEGINS)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_AUDIO_FAREND_MUSIC_ENDS",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_AUDIO_FAREND_MUSIC_ENDS)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_LOCAL_AUDIO_RECORD_ENABLED",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_LOCAL_AUDIO_RECORD_ENABLED)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_LOCAL_AUDIO_RECORD_DISABLED",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_LOCAL_AUDIO_RECORD_DISABLED)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_ROLE_BROADCASTER_SOLO",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_ROLE_BROADCASTER_SOLO)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_ROLE_BROADCASTER_INTERACTIVE",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_ROLE_BROADCASTER_INTERACTIVE)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_ROLE_AUDIENCE",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_ROLE_AUDIENCE)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_ROLE_COMM_PEER",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_ROLE_COMM_PEER)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_ROLE_GAME_PEER",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_ROLE_GAME_PEER)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_AUDIO_ADM_REQUIRE_RESTART",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_AUDIO_ADM_REQUIRE_RESTART)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_AUDIO_ADM_SPECIAL_RESTART",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_AUDIO_ADM_SPECIAL_RESTART)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_AUDIO_ADM_USING_COMM_PARAMS",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_AUDIO_ADM_USING_COMM_PARAMS)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_AUDIO_ADM_USING_NORM_PARAMS",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_AUDIO_ADM_USING_NORM_PARAMS)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_AUDIO_ERROR_MIXING_OPEN",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_AUDIO_ERROR_MIXING_OPEN)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_AUDIO_ERROR_MIXING_TOO_FREQUENT",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_AUDIO_ERROR_MIXING_TOO_FREQUENT)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_AUDIO_ERROR_MIXING_INTERRUPTED_EOF",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_AUDIO_ERROR_MIXING_INTERRUPTED_EOF)));
  SWIG_Python_SetConstant(d, "MEDIA_ENGINE_AUDIO_ERROR_MIXING_NO_ERROR",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_ENGINE_AUDIO_ERROR_MIXING_NO_ERROR)));
  SWIG_Python_SetConstant(d, "AUDIO_MIXING_STATE_PLAYING",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_MIXING_STATE_PLAYING)));
  SWIG_Python_SetConstant(d, "AUDIO_MIXING_STATE_PAUSED",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_MIXING_STATE_PAUSED)));
  SWIG_Python_SetConstant(d, "AUDIO_MIXING_STATE_STOPPED",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_MIXING_STATE_STOPPED)));
  SWIG_Python_SetConstant(d, "AUDIO_MIXING_STATE_FAILED",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_MIXING_STATE_FAILED)));
  SWIG_Python_SetConstant(d, "AUDIO_MIXING_ERROR_CAN_NOT_OPEN",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_MIXING_ERROR_CAN_NOT_OPEN)));
  SWIG_Python_SetConstant(d, "AUDIO_MIXING_ERROR_TOO_FREQUENT_CALL",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_MIXING_ERROR_TOO_FREQUENT_CALL)));
  SWIG_Python_SetConstant(d, "AUDIO_MIXING_ERROR_INTERRUPTED_EOF",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_MIXING_ERROR_INTERRUPTED_EOF)));
  SWIG_Python_SetConstant(d, "AUDIO_MIXING_ERROR_OK",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_MIXING_ERROR_OK)));
  SWIG_Python_SetConstant(d, "MEDIA_DEVICE_STATE_ACTIVE",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_DEVICE_STATE_ACTIVE)));
  SWIG_Python_SetConstant(d, "MEDIA_DEVICE_STATE_DISABLED",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_DEVICE_STATE_DISABLED)));
  SWIG_Python_SetConstant(d, "MEDIA_DEVICE_STATE_NOT_PRESENT",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_DEVICE_STATE_NOT_PRESENT)));
  SWIG_Python_SetConstant(d, "MEDIA_DEVICE_STATE_UNPLUGGED",SWIG_From_int(static_cast< int >(agora::rtc::MEDIA_DEVICE_STATE_UNPLUGGED)));
  SWIG_Python_SetConstant(d, "UNKNOWN_AUDIO_DEVICE",SWIG_From_int(static_cast< int >(agora::rtc::UNKNOWN_AUDIO_DEVICE)));
  SWIG_Python_SetConstant(d, "AUDIO_PLAYOUT_DEVICE",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_PLAYOUT_DEVICE)));
  SWIG_Python_SetConstant(d, "AUDIO_RECORDING_DEVICE",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_RECORDING_DEVICE)));
  SWIG_Python_SetConstant(d, "VIDEO_RENDER_DEVICE",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_RENDER_DEVICE)));
  SWIG_Python_SetConstant(d, "VIDEO_CAPTURE_DEVICE",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_CAPTURE_DEVICE)));
  SWIG_Python_SetConstant(d, "AUDIO_APPLICATION_PLAYOUT_DEVICE",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_APPLICATION_PLAYOUT_DEVICE)));
  SWIG_Python_SetConstant(d, "LOCAL_VIDEO_STREAM_STATE_STOPPED",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_VIDEO_STREAM_STATE_STOPPED)));
  SWIG_Python_SetConstant(d, "LOCAL_VIDEO_STREAM_STATE_CAPTURING",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_VIDEO_STREAM_STATE_CAPTURING)));
  SWIG_Python_SetConstant(d, "LOCAL_VIDEO_STREAM_STATE_ENCODING",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_VIDEO_STREAM_STATE_ENCODING)));
  SWIG_Python_SetConstant(d, "LOCAL_VIDEO_STREAM_STATE_FAILED",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_VIDEO_STREAM_STATE_FAILED)));
  SWIG_Python_SetConstant(d, "LOCAL_VIDEO_STREAM_ERROR_OK",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_VIDEO_STREAM_ERROR_OK)));
  SWIG_Python_SetConstant(d, "LOCAL_VIDEO_STREAM_ERROR_FAILURE",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_VIDEO_STREAM_ERROR_FAILURE)));
  SWIG_Python_SetConstant(d, "LOCAL_VIDEO_STREAM_ERROR_DEVICE_NO_PERMISSION",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_VIDEO_STREAM_ERROR_DEVICE_NO_PERMISSION)));
  SWIG_Python_SetConstant(d, "LOCAL_VIDEO_STREAM_ERROR_DEVICE_BUSY",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_VIDEO_STREAM_ERROR_DEVICE_BUSY)));
  SWIG_Python_SetConstant(d, "LOCAL_VIDEO_STREAM_ERROR_CAPTURE_FAILURE",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_VIDEO_STREAM_ERROR_CAPTURE_FAILURE)));
  SWIG_Python_SetConstant(d, "LOCAL_VIDEO_STREAM_ERROR_ENCODE_FAILURE",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_VIDEO_STREAM_ERROR_ENCODE_FAILURE)));
  SWIG_Python_SetConstant(d, "LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_WINDOW_MINIMIZED",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_WINDOW_MINIMIZED)));
  SWIG_Python_SetConstant(d, "LOCAL_AUDIO_STREAM_STATE_STOPPED",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_AUDIO_STREAM_STATE_STOPPED)));
  SWIG_Python_SetConstant(d, "LOCAL_AUDIO_STREAM_STATE_RECORDING",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_AUDIO_STREAM_STATE_RECORDING)));
  SWIG_Python_SetConstant(d, "LOCAL_AUDIO_STREAM_STATE_ENCODING",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_AUDIO_STREAM_STATE_ENCODING)));
  SWIG_Python_SetConstant(d, "LOCAL_AUDIO_STREAM_STATE_FAILED",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_AUDIO_STREAM_STATE_FAILED)));
  SWIG_Python_SetConstant(d, "LOCAL_AUDIO_STREAM_ERROR_OK",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_AUDIO_STREAM_ERROR_OK)));
  SWIG_Python_SetConstant(d, "LOCAL_AUDIO_STREAM_ERROR_FAILURE",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_AUDIO_STREAM_ERROR_FAILURE)));
  SWIG_Python_SetConstant(d, "LOCAL_AUDIO_STREAM_ERROR_DEVICE_NO_PERMISSION",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_AUDIO_STREAM_ERROR_DEVICE_NO_PERMISSION)));
  SWIG_Python_SetConstant(d, "LOCAL_AUDIO_STREAM_ERROR_DEVICE_BUSY",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_AUDIO_STREAM_ERROR_DEVICE_BUSY)));
  SWIG_Python_SetConstant(d, "LOCAL_AUDIO_STREAM_ERROR_RECORD_FAILURE",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_AUDIO_STREAM_ERROR_RECORD_FAILURE)));
  SWIG_Python_SetConstant(d, "LOCAL_AUDIO_STREAM_ERROR_ENCODE_FAILURE",SWIG_From_int(static_cast< int >(agora::rtc::LOCAL_AUDIO_STREAM_ERROR_ENCODE_FAILURE)));
  SWIG_Python_SetConstant(d, "AUDIO_RECORDING_QUALITY_LOW",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_RECORDING_QUALITY_LOW)));
  SWIG_Python_SetConstant(d, "AUDIO_RECORDING_QUALITY_MEDIUM",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_RECORDING_QUALITY_MEDIUM)));
  SWIG_Python_SetConstant(d, "AUDIO_RECORDING_QUALITY_HIGH",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_RECORDING_QUALITY_HIGH)));
  SWIG_Python_SetConstant(d, "QUALITY_UNKNOWN",SWIG_From_int(static_cast< int >(agora::rtc::QUALITY_UNKNOWN)));
  SWIG_Python_SetConstant(d, "QUALITY_EXCELLENT",SWIG_From_int(static_cast< int >(agora::rtc::QUALITY_EXCELLENT)));
  SWIG_Python_SetConstant(d, "QUALITY_GOOD",SWIG_From_int(static_cast< int >(agora::rtc::QUALITY_GOOD)));
  SWIG_Python_SetConstant(d, "QUALITY_POOR",SWIG_From_int(static_cast< int >(agora::rtc::QUALITY_POOR)));
  SWIG_Python_SetConstant(d, "QUALITY_BAD",SWIG_From_int(static_cast< int >(agora::rtc::QUALITY_BAD)));
  SWIG_Python_SetConstant(d, "QUALITY_VBAD",SWIG_From_int(static_cast< int >(agora::rtc::QUALITY_VBAD)));
  SWIG_Python_SetConstant(d, "QUALITY_DOWN",SWIG_From_int(static_cast< int >(agora::rtc::QUALITY_DOWN)));
  SWIG_Python_SetConstant(d, "QUALITY_UNSUPPORTED",SWIG_From_int(static_cast< int >(agora::rtc::QUALITY_UNSUPPORTED)));
  SWIG_Python_SetConstant(d, "QUALITY_DETECTING",SWIG_From_int(static_cast< int >(agora::rtc::QUALITY_DETECTING)));
  SWIG_Python_SetConstant(d, "RENDER_MODE_HIDDEN",SWIG_From_int(static_cast< int >(agora::rtc::RENDER_MODE_HIDDEN)));
  SWIG_Python_SetConstant(d, "RENDER_MODE_FIT",SWIG_From_int(static_cast< int >(agora::rtc::RENDER_MODE_FIT)));
  SWIG_Python_SetConstant(d, "RENDER_MODE_ADAPTIVE",SWIG_From_int(static_cast< int >(agora::rtc::RENDER_MODE_ADAPTIVE)));
  SWIG_Python_SetConstant(d, "RENDER_MODE_FILL",SWIG_From_int(static_cast< int >(agora::rtc::RENDER_MODE_FILL)));
  SWIG_Python_SetConstant(d, "VIDEO_MIRROR_MODE_AUTO",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_MIRROR_MODE_AUTO)));
  SWIG_Python_SetConstant(d, "VIDEO_MIRROR_MODE_ENABLED",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_MIRROR_MODE_ENABLED)));
  SWIG_Python_SetConstant(d, "VIDEO_MIRROR_MODE_DISABLED",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_MIRROR_MODE_DISABLED)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_120P",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_120P)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_120P_3",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_120P_3)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_180P",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_180P)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_180P_3",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_180P_3)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_180P_4",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_180P_4)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_240P",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_240P)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_240P_3",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_240P_3)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_240P_4",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_240P_4)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_360P",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_360P)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_360P_3",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_360P_3)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_360P_4",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_360P_4)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_360P_6",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_360P_6)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_360P_7",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_360P_7)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_360P_8",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_360P_8)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_360P_9",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_360P_9)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_360P_10",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_360P_10)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_360P_11",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_360P_11)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_480P",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_480P)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_480P_3",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_480P_3)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_480P_4",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_480P_4)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_480P_6",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_480P_6)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_480P_8",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_480P_8)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_480P_9",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_480P_9)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_480P_10",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_480P_10)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_720P",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_720P)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_720P_3",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_720P_3)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_720P_5",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_720P_5)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_720P_6",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_720P_6)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_1080P",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_1080P)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_1080P_3",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_1080P_3)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_1080P_5",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_1080P_5)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_1440P",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_1440P)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_1440P_2",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_1440P_2)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_4K",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_4K)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_LANDSCAPE_4K_3",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_LANDSCAPE_4K_3)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_120P",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_120P)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_120P_3",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_120P_3)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_180P",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_180P)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_180P_3",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_180P_3)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_180P_4",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_180P_4)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_240P",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_240P)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_240P_3",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_240P_3)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_240P_4",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_240P_4)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_360P",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_360P)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_360P_3",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_360P_3)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_360P_4",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_360P_4)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_360P_6",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_360P_6)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_360P_7",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_360P_7)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_360P_8",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_360P_8)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_360P_9",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_360P_9)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_360P_10",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_360P_10)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_360P_11",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_360P_11)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_480P",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_480P)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_480P_3",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_480P_3)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_480P_4",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_480P_4)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_480P_6",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_480P_6)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_480P_8",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_480P_8)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_480P_9",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_480P_9)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_480P_10",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_480P_10)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_720P",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_720P)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_720P_3",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_720P_3)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_720P_5",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_720P_5)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_720P_6",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_720P_6)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_1080P",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_1080P)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_1080P_3",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_1080P_3)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_1080P_5",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_1080P_5)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_1440P",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_1440P)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_1440P_2",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_1440P_2)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_4K",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_4K)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_PORTRAIT_4K_3",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_PORTRAIT_4K_3)));
  SWIG_Python_SetConstant(d, "VIDEO_PROFILE_DEFAULT",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_PROFILE_DEFAULT)));
  SWIG_Python_SetConstant(d, "AUDIO_PROFILE_DEFAULT",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_PROFILE_DEFAULT)));
  SWIG_Python_SetConstant(d, "AUDIO_PROFILE_SPEECH_STANDARD",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_PROFILE_SPEECH_STANDARD)));
  SWIG_Python_SetConstant(d, "AUDIO_PROFILE_MUSIC_STANDARD",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_PROFILE_MUSIC_STANDARD)));
  SWIG_Python_SetConstant(d, "AUDIO_PROFILE_MUSIC_STANDARD_STEREO",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_PROFILE_MUSIC_STANDARD_STEREO)));
  SWIG_Python_SetConstant(d, "AUDIO_PROFILE_MUSIC_HIGH_QUALITY",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_PROFILE_MUSIC_HIGH_QUALITY)));
  SWIG_Python_SetConstant(d, "AUDIO_PROFILE_MUSIC_HIGH_QUALITY_STEREO",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_PROFILE_MUSIC_HIGH_QUALITY_STEREO)));
  SWIG_Python_SetConstant(d, "AUDIO_PROFILE_IOT",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_PROFILE_IOT)));
  SWIG_Python_SetConstant(d, "AUDIO_PROFILE_NUM",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_PROFILE_NUM)));
  SWIG_Python_SetConstant(d, "AUDIO_SCENARIO_DEFAULT",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_SCENARIO_DEFAULT)));
  SWIG_Python_SetConstant(d, "AUDIO_SCENARIO_CHATROOM_ENTERTAINMENT",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_SCENARIO_CHATROOM_ENTERTAINMENT)));
  SWIG_Python_SetConstant(d, "AUDIO_SCENARIO_EDUCATION",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_SCENARIO_EDUCATION)));
  SWIG_Python_SetConstant(d, "AUDIO_SCENARIO_GAME_STREAMING",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_SCENARIO_GAME_STREAMING)));
  SWIG_Python_SetConstant(d, "AUDIO_SCENARIO_SHOWROOM",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_SCENARIO_SHOWROOM)));
  SWIG_Python_SetConstant(d, "AUDIO_SCENARIO_CHATROOM_GAMING",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_SCENARIO_CHATROOM_GAMING)));
  SWIG_Python_SetConstant(d, "AUDIO_SCENARIO_IOT",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_SCENARIO_IOT)));
  SWIG_Python_SetConstant(d, "AUDIO_SCENARIO_NUM",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_SCENARIO_NUM)));
  SWIG_Python_SetConstant(d, "CHANNEL_PROFILE_COMMUNICATION",SWIG_From_int(static_cast< int >(agora::rtc::CHANNEL_PROFILE_COMMUNICATION)));
  SWIG_Python_SetConstant(d, "CHANNEL_PROFILE_LIVE_BROADCASTING",SWIG_From_int(static_cast< int >(agora::rtc::CHANNEL_PROFILE_LIVE_BROADCASTING)));
  SWIG_Python_SetConstant(d, "CHANNEL_PROFILE_GAME",SWIG_From_int(static_cast< int >(agora::rtc::CHANNEL_PROFILE_GAME)));
  SWIG_Python_SetConstant(d, "CLIENT_ROLE_BROADCASTER",SWIG_From_int(static_cast< int >(agora::rtc::CLIENT_ROLE_BROADCASTER)));
  SWIG_Python_SetConstant(d, "CLIENT_ROLE_AUDIENCE",SWIG_From_int(static_cast< int >(agora::rtc::CLIENT_ROLE_AUDIENCE)));
  SWIG_Python_SetConstant(d, "USER_OFFLINE_QUIT",SWIG_From_int(static_cast< int >(agora::rtc::USER_OFFLINE_QUIT)));
  SWIG_Python_SetConstant(d, "USER_OFFLINE_DROPPED",SWIG_From_int(static_cast< int >(agora::rtc::USER_OFFLINE_DROPPED)));
  SWIG_Python_SetConstant(d, "USER_OFFLINE_BECOME_AUDIENCE",SWIG_From_int(static_cast< int >(agora::rtc::USER_OFFLINE_BECOME_AUDIENCE)));
  SWIG_Python_SetConstant(d, "RTMP_STREAM_PUBLISH_STATE_IDLE",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAM_PUBLISH_STATE_IDLE)));
  SWIG_Python_SetConstant(d, "RTMP_STREAM_PUBLISH_STATE_CONNECTING",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAM_PUBLISH_STATE_CONNECTING)));
  SWIG_Python_SetConstant(d, "RTMP_STREAM_PUBLISH_STATE_RUNNING",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAM_PUBLISH_STATE_RUNNING)));
  SWIG_Python_SetConstant(d, "RTMP_STREAM_PUBLISH_STATE_RECOVERING",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAM_PUBLISH_STATE_RECOVERING)));
  SWIG_Python_SetConstant(d, "RTMP_STREAM_PUBLISH_STATE_FAILURE",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAM_PUBLISH_STATE_FAILURE)));
  SWIG_Python_SetConstant(d, "RTMP_STREAM_PUBLISH_ERROR_OK",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAM_PUBLISH_ERROR_OK)));
  SWIG_Python_SetConstant(d, "RTMP_STREAM_PUBLISH_ERROR_INVALID_ARGUMENT",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAM_PUBLISH_ERROR_INVALID_ARGUMENT)));
  SWIG_Python_SetConstant(d, "RTMP_STREAM_PUBLISH_ERROR_ENCRYPTED_STREAM_NOT_ALLOWED",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAM_PUBLISH_ERROR_ENCRYPTED_STREAM_NOT_ALLOWED)));
  SWIG_Python_SetConstant(d, "RTMP_STREAM_PUBLISH_ERROR_CONNECTION_TIMEOUT",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAM_PUBLISH_ERROR_CONNECTION_TIMEOUT)));
  SWIG_Python_SetConstant(d, "RTMP_STREAM_PUBLISH_ERROR_INTERNAL_SERVER_ERROR",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAM_PUBLISH_ERROR_INTERNAL_SERVER_ERROR)));
  SWIG_Python_SetConstant(d, "RTMP_STREAM_PUBLISH_ERROR_RTMP_SERVER_ERROR",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAM_PUBLISH_ERROR_RTMP_SERVER_ERROR)));
  SWIG_Python_SetConstant(d, "RTMP_STREAM_PUBLISH_ERROR_TOO_OFTEN",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAM_PUBLISH_ERROR_TOO_OFTEN)));
  SWIG_Python_SetConstant(d, "RTMP_STREAM_PUBLISH_ERROR_REACH_LIMIT",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAM_PUBLISH_ERROR_REACH_LIMIT)));
  SWIG_Python_SetConstant(d, "RTMP_STREAM_PUBLISH_ERROR_NOT_AUTHORIZED",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAM_PUBLISH_ERROR_NOT_AUTHORIZED)));
  SWIG_Python_SetConstant(d, "RTMP_STREAM_PUBLISH_ERROR_STREAM_NOT_FOUND",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAM_PUBLISH_ERROR_STREAM_NOT_FOUND)));
  SWIG_Python_SetConstant(d, "RTMP_STREAM_PUBLISH_ERROR_FORMAT_NOT_SUPPORTED",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAM_PUBLISH_ERROR_FORMAT_NOT_SUPPORTED)));
  SWIG_Python_SetConstant(d, "RTMP_STREAMING_EVENT_FAILED_LOAD_IMAGE",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAMING_EVENT_FAILED_LOAD_IMAGE)));
  SWIG_Python_SetConstant(d, "INJECT_STREAM_STATUS_START_SUCCESS",SWIG_From_int(static_cast< int >(agora::rtc::INJECT_STREAM_STATUS_START_SUCCESS)));
  SWIG_Python_SetConstant(d, "INJECT_STREAM_STATUS_START_ALREADY_EXISTS",SWIG_From_int(static_cast< int >(agora::rtc::INJECT_STREAM_STATUS_START_ALREADY_EXISTS)));
  SWIG_Python_SetConstant(d, "INJECT_STREAM_STATUS_START_UNAUTHORIZED",SWIG_From_int(static_cast< int >(agora::rtc::INJECT_STREAM_STATUS_START_UNAUTHORIZED)));
  SWIG_Python_SetConstant(d, "INJECT_STREAM_STATUS_START_TIMEDOUT",SWIG_From_int(static_cast< int >(agora::rtc::INJECT_STREAM_STATUS_START_TIMEDOUT)));
  SWIG_Python_SetConstant(d, "INJECT_STREAM_STATUS_START_FAILED",SWIG_From_int(static_cast< int >(agora::rtc::INJECT_STREAM_STATUS_START_FAILED)));
  SWIG_Python_SetConstant(d, "INJECT_STREAM_STATUS_STOP_SUCCESS",SWIG_From_int(static_cast< int >(agora::rtc::INJECT_STREAM_STATUS_STOP_SUCCESS)));
  SWIG_Python_SetConstant(d, "INJECT_STREAM_STATUS_STOP_NOT_FOUND",SWIG_From_int(static_cast< int >(agora::rtc::INJECT_STREAM_STATUS_STOP_NOT_FOUND)));
  SWIG_Python_SetConstant(d, "INJECT_STREAM_STATUS_STOP_UNAUTHORIZED",SWIG_From_int(static_cast< int >(agora::rtc::INJECT_STREAM_STATUS_STOP_UNAUTHORIZED)));
  SWIG_Python_SetConstant(d, "INJECT_STREAM_STATUS_STOP_TIMEDOUT",SWIG_From_int(static_cast< int >(agora::rtc::INJECT_STREAM_STATUS_STOP_TIMEDOUT)));
  SWIG_Python_SetConstant(d, "INJECT_STREAM_STATUS_STOP_FAILED",SWIG_From_int(static_cast< int >(agora::rtc::INJECT_STREAM_STATUS_STOP_FAILED)));
  SWIG_Python_SetConstant(d, "INJECT_STREAM_STATUS_BROKEN",SWIG_From_int(static_cast< int >(agora::rtc::INJECT_STREAM_STATUS_BROKEN)));
  SWIG_Python_SetConstant(d, "REMOTE_VIDEO_STREAM_HIGH",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_VIDEO_STREAM_HIGH)));
  SWIG_Python_SetConstant(d, "REMOTE_VIDEO_STREAM_LOW",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_VIDEO_STREAM_LOW)));
  SWIG_Python_SetConstant(d, "RAW_AUDIO_FRAME_OP_MODE_READ_ONLY",SWIG_From_int(static_cast< int >(agora::rtc::RAW_AUDIO_FRAME_OP_MODE_READ_ONLY)));
  SWIG_Python_SetConstant(d, "RAW_AUDIO_FRAME_OP_MODE_WRITE_ONLY",SWIG_From_int(static_cast< int >(agora::rtc::RAW_AUDIO_FRAME_OP_MODE_WRITE_ONLY)));
  SWIG_Python_SetConstant(d, "RAW_AUDIO_FRAME_OP_MODE_READ_WRITE",SWIG_From_int(static_cast< int >(agora::rtc::RAW_AUDIO_FRAME_OP_MODE_READ_WRITE)));
  SWIG_Python_SetConstant(d, "AUDIO_SAMPLE_RATE_32000",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_SAMPLE_RATE_32000)));
  SWIG_Python_SetConstant(d, "AUDIO_SAMPLE_RATE_44100",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_SAMPLE_RATE_44100)));
  SWIG_Python_SetConstant(d, "AUDIO_SAMPLE_RATE_48000",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_SAMPLE_RATE_48000)));
  SWIG_Python_SetConstant(d, "VIDEO_CODEC_PROFILE_BASELINE",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_CODEC_PROFILE_BASELINE)));
  SWIG_Python_SetConstant(d, "VIDEO_CODEC_PROFILE_MAIN",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_CODEC_PROFILE_MAIN)));
  SWIG_Python_SetConstant(d, "VIDEO_CODEC_PROFILE_HIGH",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_CODEC_PROFILE_HIGH)));
  SWIG_Python_SetConstant(d, "VIDEO_CODEC_VP8",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_CODEC_VP8)));
  SWIG_Python_SetConstant(d, "VIDEO_CODEC_H264",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_CODEC_H264)));
  SWIG_Python_SetConstant(d, "VIDEO_CODEC_EVP",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_CODEC_EVP)));
  SWIG_Python_SetConstant(d, "VIDEO_CODEC_E264",SWIG_From_int(static_cast< int >(agora::rtc::VIDEO_CODEC_E264)));
  SWIG_Python_SetConstant(d, "AUDIO_EQUALIZATION_BAND_31",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_EQUALIZATION_BAND_31)));
  SWIG_Python_SetConstant(d, "AUDIO_EQUALIZATION_BAND_62",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_EQUALIZATION_BAND_62)));
  SWIG_Python_SetConstant(d, "AUDIO_EQUALIZATION_BAND_125",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_EQUALIZATION_BAND_125)));
  SWIG_Python_SetConstant(d, "AUDIO_EQUALIZATION_BAND_250",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_EQUALIZATION_BAND_250)));
  SWIG_Python_SetConstant(d, "AUDIO_EQUALIZATION_BAND_500",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_EQUALIZATION_BAND_500)));
  SWIG_Python_SetConstant(d, "AUDIO_EQUALIZATION_BAND_1K",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_EQUALIZATION_BAND_1K)));
  SWIG_Python_SetConstant(d, "AUDIO_EQUALIZATION_BAND_2K",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_EQUALIZATION_BAND_2K)));
  SWIG_Python_SetConstant(d, "AUDIO_EQUALIZATION_BAND_4K",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_EQUALIZATION_BAND_4K)));
  SWIG_Python_SetConstant(d, "AUDIO_EQUALIZATION_BAND_8K",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_EQUALIZATION_BAND_8K)));
  SWIG_Python_SetConstant(d, "AUDIO_EQUALIZATION_BAND_16K",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_EQUALIZATION_BAND_16K)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_DRY_LEVEL",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_DRY_LEVEL)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_WET_LEVEL",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_WET_LEVEL)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_ROOM_SIZE",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_ROOM_SIZE)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_WET_DELAY",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_WET_DELAY)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_STRENGTH",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_STRENGTH)));
  SWIG_Python_SetConstant(d, "VOICE_CHANGER_OFF",SWIG_From_int(static_cast< int >(agora::rtc::VOICE_CHANGER_OFF)));
  SWIG_Python_SetConstant(d, "VOICE_CHANGER_OLDMAN",SWIG_From_int(static_cast< int >(agora::rtc::VOICE_CHANGER_OLDMAN)));
  SWIG_Python_SetConstant(d, "VOICE_CHANGER_BABYBOY",SWIG_From_int(static_cast< int >(agora::rtc::VOICE_CHANGER_BABYBOY)));
  SWIG_Python_SetConstant(d, "VOICE_CHANGER_BABYGIRL",SWIG_From_int(static_cast< int >(agora::rtc::VOICE_CHANGER_BABYGIRL)));
  SWIG_Python_SetConstant(d, "VOICE_CHANGER_ZHUBAJIE",SWIG_From_int(static_cast< int >(agora::rtc::VOICE_CHANGER_ZHUBAJIE)));
  SWIG_Python_SetConstant(d, "VOICE_CHANGER_ETHEREAL",SWIG_From_int(static_cast< int >(agora::rtc::VOICE_CHANGER_ETHEREAL)));
  SWIG_Python_SetConstant(d, "VOICE_CHANGER_HULK",SWIG_From_int(static_cast< int >(agora::rtc::VOICE_CHANGER_HULK)));
  SWIG_Python_SetConstant(d, "VOICE_BEAUTY_VIGOROUS",SWIG_From_int(static_cast< int >(agora::rtc::VOICE_BEAUTY_VIGOROUS)));
  SWIG_Python_SetConstant(d, "VOICE_BEAUTY_DEEP",SWIG_From_int(static_cast< int >(agora::rtc::VOICE_BEAUTY_DEEP)));
  SWIG_Python_SetConstant(d, "VOICE_BEAUTY_MELLOW",SWIG_From_int(static_cast< int >(agora::rtc::VOICE_BEAUTY_MELLOW)));
  SWIG_Python_SetConstant(d, "VOICE_BEAUTY_FALSETTO",SWIG_From_int(static_cast< int >(agora::rtc::VOICE_BEAUTY_FALSETTO)));
  SWIG_Python_SetConstant(d, "VOICE_BEAUTY_FULL",SWIG_From_int(static_cast< int >(agora::rtc::VOICE_BEAUTY_FULL)));
  SWIG_Python_SetConstant(d, "VOICE_BEAUTY_CLEAR",SWIG_From_int(static_cast< int >(agora::rtc::VOICE_BEAUTY_CLEAR)));
  SWIG_Python_SetConstant(d, "VOICE_BEAUTY_RESOUNDING",SWIG_From_int(static_cast< int >(agora::rtc::VOICE_BEAUTY_RESOUNDING)));
  SWIG_Python_SetConstant(d, "VOICE_BEAUTY_RINGING",SWIG_From_int(static_cast< int >(agora::rtc::VOICE_BEAUTY_RINGING)));
  SWIG_Python_SetConstant(d, "VOICE_BEAUTY_SPACIAL",SWIG_From_int(static_cast< int >(agora::rtc::VOICE_BEAUTY_SPACIAL)));
  SWIG_Python_SetConstant(d, "GENERAL_BEAUTY_VOICE_MALE_MAGNETIC",SWIG_From_int(static_cast< int >(agora::rtc::GENERAL_BEAUTY_VOICE_MALE_MAGNETIC)));
  SWIG_Python_SetConstant(d, "GENERAL_BEAUTY_VOICE_FEMALE_FRESH",SWIG_From_int(static_cast< int >(agora::rtc::GENERAL_BEAUTY_VOICE_FEMALE_FRESH)));
  SWIG_Python_SetConstant(d, "GENERAL_BEAUTY_VOICE_FEMALE_VITALITY",SWIG_From_int(static_cast< int >(agora::rtc::GENERAL_BEAUTY_VOICE_FEMALE_VITALITY)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_OFF",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_OFF)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_FX_KTV",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_FX_KTV)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_FX_VOCAL_CONCERT",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_FX_VOCAL_CONCERT)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_FX_UNCLE",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_FX_UNCLE)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_FX_SISTER",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_FX_SISTER)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_FX_STUDIO",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_FX_STUDIO)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_FX_POPULAR",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_FX_POPULAR)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_FX_RNB",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_FX_RNB)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_FX_PHONOGRAPH",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_FX_PHONOGRAPH)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_POPULAR",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_POPULAR)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_RNB",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_RNB)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_ROCK",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_ROCK)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_HIPHOP",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_HIPHOP)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_VOCAL_CONCERT",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_VOCAL_CONCERT)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_KTV",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_KTV)));
  SWIG_Python_SetConstant(d, "AUDIO_REVERB_STUDIO",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_REVERB_STUDIO)));
  SWIG_Python_SetConstant(d, "AUDIO_VIRTUAL_STEREO",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_VIRTUAL_STEREO)));
  SWIG_Python_SetConstant(d, "AUDIO_CODEC_PROFILE_LC_AAC",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_CODEC_PROFILE_LC_AAC)));
  SWIG_Python_SetConstant(d, "AUDIO_CODEC_PROFILE_HE_AAC",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_CODEC_PROFILE_HE_AAC)));
  SWIG_Python_SetConstant(d, "REMOTE_AUDIO_STATE_STOPPED",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_AUDIO_STATE_STOPPED)));
  SWIG_Python_SetConstant(d, "REMOTE_AUDIO_STATE_STARTING",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_AUDIO_STATE_STARTING)));
  SWIG_Python_SetConstant(d, "REMOTE_AUDIO_STATE_DECODING",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_AUDIO_STATE_DECODING)));
  SWIG_Python_SetConstant(d, "REMOTE_AUDIO_STATE_FROZEN",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_AUDIO_STATE_FROZEN)));
  SWIG_Python_SetConstant(d, "REMOTE_AUDIO_STATE_FAILED",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_AUDIO_STATE_FAILED)));
  SWIG_Python_SetConstant(d, "REMOTE_AUDIO_REASON_INTERNAL",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_AUDIO_REASON_INTERNAL)));
  SWIG_Python_SetConstant(d, "REMOTE_AUDIO_REASON_NETWORK_CONGESTION",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_AUDIO_REASON_NETWORK_CONGESTION)));
  SWIG_Python_SetConstant(d, "REMOTE_AUDIO_REASON_NETWORK_RECOVERY",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_AUDIO_REASON_NETWORK_RECOVERY)));
  SWIG_Python_SetConstant(d, "REMOTE_AUDIO_REASON_LOCAL_MUTED",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_AUDIO_REASON_LOCAL_MUTED)));
  SWIG_Python_SetConstant(d, "REMOTE_AUDIO_REASON_LOCAL_UNMUTED",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_AUDIO_REASON_LOCAL_UNMUTED)));
  SWIG_Python_SetConstant(d, "REMOTE_AUDIO_REASON_REMOTE_MUTED",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_AUDIO_REASON_REMOTE_MUTED)));
  SWIG_Python_SetConstant(d, "REMOTE_AUDIO_REASON_REMOTE_UNMUTED",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_AUDIO_REASON_REMOTE_UNMUTED)));
  SWIG_Python_SetConstant(d, "REMOTE_AUDIO_REASON_REMOTE_OFFLINE",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_AUDIO_REASON_REMOTE_OFFLINE)));
  SWIG_Python_SetConstant(d, "REMOTE_VIDEO_STATE_STOPPED",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_VIDEO_STATE_STOPPED)));
  SWIG_Python_SetConstant(d, "REMOTE_VIDEO_STATE_STARTING",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_VIDEO_STATE_STARTING)));
  SWIG_Python_SetConstant(d, "REMOTE_VIDEO_STATE_DECODING",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_VIDEO_STATE_DECODING)));
  SWIG_Python_SetConstant(d, "REMOTE_VIDEO_STATE_FROZEN",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_VIDEO_STATE_FROZEN)));
  SWIG_Python_SetConstant(d, "REMOTE_VIDEO_STATE_FAILED",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_VIDEO_STATE_FAILED)));
  SWIG_Python_SetConstant(d, "PUB_STATE_IDLE",SWIG_From_int(static_cast< int >(agora::rtc::PUB_STATE_IDLE)));
  SWIG_Python_SetConstant(d, "PUB_STATE_NO_PUBLISHED",SWIG_From_int(static_cast< int >(agora::rtc::PUB_STATE_NO_PUBLISHED)));
  SWIG_Python_SetConstant(d, "PUB_STATE_PUBLISHING",SWIG_From_int(static_cast< int >(agora::rtc::PUB_STATE_PUBLISHING)));
  SWIG_Python_SetConstant(d, "PUB_STATE_PUBLISHED",SWIG_From_int(static_cast< int >(agora::rtc::PUB_STATE_PUBLISHED)));
  SWIG_Python_SetConstant(d, "SUB_STATE_IDLE",SWIG_From_int(static_cast< int >(agora::rtc::SUB_STATE_IDLE)));
  SWIG_Python_SetConstant(d, "SUB_STATE_NO_SUBSCRIBED",SWIG_From_int(static_cast< int >(agora::rtc::SUB_STATE_NO_SUBSCRIBED)));
  SWIG_Python_SetConstant(d, "SUB_STATE_SUBSCRIBING",SWIG_From_int(static_cast< int >(agora::rtc::SUB_STATE_SUBSCRIBING)));
  SWIG_Python_SetConstant(d, "SUB_STATE_SUBSCRIBED",SWIG_From_int(static_cast< int >(agora::rtc::SUB_STATE_SUBSCRIBED)));
  SWIG_Python_SetConstant(d, "REMOTE_VIDEO_STATE_REASON_INTERNAL",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_VIDEO_STATE_REASON_INTERNAL)));
  SWIG_Python_SetConstant(d, "REMOTE_VIDEO_STATE_REASON_NETWORK_CONGESTION",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_VIDEO_STATE_REASON_NETWORK_CONGESTION)));
  SWIG_Python_SetConstant(d, "REMOTE_VIDEO_STATE_REASON_NETWORK_RECOVERY",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_VIDEO_STATE_REASON_NETWORK_RECOVERY)));
  SWIG_Python_SetConstant(d, "REMOTE_VIDEO_STATE_REASON_LOCAL_MUTED",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_VIDEO_STATE_REASON_LOCAL_MUTED)));
  SWIG_Python_SetConstant(d, "REMOTE_VIDEO_STATE_REASON_LOCAL_UNMUTED",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_VIDEO_STATE_REASON_LOCAL_UNMUTED)));
  SWIG_Python_SetConstant(d, "REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED)));
  SWIG_Python_SetConstant(d, "REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED)));
  SWIG_Python_SetConstant(d, "REMOTE_VIDEO_STATE_REASON_REMOTE_OFFLINE",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_VIDEO_STATE_REASON_REMOTE_OFFLINE)));
  SWIG_Python_SetConstant(d, "REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK)));
  SWIG_Python_SetConstant(d, "REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK_RECOVERY",SWIG_From_int(static_cast< int >(agora::rtc::REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK_RECOVERY)));
  SWIG_Python_SetConstant(d, "FRAME_RATE_FPS_1",SWIG_From_int(static_cast< int >(agora::rtc::FRAME_RATE_FPS_1)));
  SWIG_Python_SetConstant(d, "FRAME_RATE_FPS_7",SWIG_From_int(static_cast< int >(agora::rtc::FRAME_RATE_FPS_7)));
  SWIG_Python_SetConstant(d, "FRAME_RATE_FPS_10",SWIG_From_int(static_cast< int >(agora::rtc::FRAME_RATE_FPS_10)));
  SWIG_Python_SetConstant(d, "FRAME_RATE_FPS_15",SWIG_From_int(static_cast< int >(agora::rtc::FRAME_RATE_FPS_15)));
  SWIG_Python_SetConstant(d, "FRAME_RATE_FPS_24",SWIG_From_int(static_cast< int >(agora::rtc::FRAME_RATE_FPS_24)));
  SWIG_Python_SetConstant(d, "FRAME_RATE_FPS_30",SWIG_From_int(static_cast< int >(agora::rtc::FRAME_RATE_FPS_30)));
  SWIG_Python_SetConstant(d, "FRAME_RATE_FPS_60",SWIG_From_int(static_cast< int >(agora::rtc::FRAME_RATE_FPS_60)));
  SWIG_Python_SetConstant(d, "ORIENTATION_MODE_ADAPTIVE",SWIG_From_int(static_cast< int >(agora::rtc::ORIENTATION_MODE_ADAPTIVE)));
  SWIG_Python_SetConstant(d, "ORIENTATION_MODE_FIXED_LANDSCAPE",SWIG_From_int(static_cast< int >(agora::rtc::ORIENTATION_MODE_FIXED_LANDSCAPE)));
  SWIG_Python_SetConstant(d, "ORIENTATION_MODE_FIXED_PORTRAIT",SWIG_From_int(static_cast< int >(agora::rtc::ORIENTATION_MODE_FIXED_PORTRAIT)));
  SWIG_Python_SetConstant(d, "MAINTAIN_QUALITY",SWIG_From_int(static_cast< int >(agora::rtc::MAINTAIN_QUALITY)));
  SWIG_Python_SetConstant(d, "MAINTAIN_FRAMERATE",SWIG_From_int(static_cast< int >(agora::rtc::MAINTAIN_FRAMERATE)));
  SWIG_Python_SetConstant(d, "MAINTAIN_BALANCED",SWIG_From_int(static_cast< int >(agora::rtc::MAINTAIN_BALANCED)));
  SWIG_Python_SetConstant(d, "STREAM_FALLBACK_OPTION_DISABLED",SWIG_From_int(static_cast< int >(agora::rtc::STREAM_FALLBACK_OPTION_DISABLED)));
  SWIG_Python_SetConstant(d, "STREAM_FALLBACK_OPTION_VIDEO_STREAM_LOW",SWIG_From_int(static_cast< int >(agora::rtc::STREAM_FALLBACK_OPTION_VIDEO_STREAM_LOW)));
  SWIG_Python_SetConstant(d, "STREAM_FALLBACK_OPTION_AUDIO_ONLY",SWIG_From_int(static_cast< int >(agora::rtc::STREAM_FALLBACK_OPTION_AUDIO_ONLY)));
  SWIG_Python_SetConstant(d, "CAPTURER_OUTPUT_PREFERENCE_AUTO",SWIG_From_int(static_cast< int >(agora::rtc::CAPTURER_OUTPUT_PREFERENCE_AUTO)));
  SWIG_Python_SetConstant(d, "CAPTURER_OUTPUT_PREFERENCE_PERFORMANCE",SWIG_From_int(static_cast< int >(agora::rtc::CAPTURER_OUTPUT_PREFERENCE_PERFORMANCE)));
  SWIG_Python_SetConstant(d, "CAPTURER_OUTPUT_PREFERENCE_PREVIEW",SWIG_From_int(static_cast< int >(agora::rtc::CAPTURER_OUTPUT_PREFERENCE_PREVIEW)));
  SWIG_Python_SetConstant(d, "PRIORITY_HIGH",SWIG_From_int(static_cast< int >(agora::rtc::PRIORITY_HIGH)));
  SWIG_Python_SetConstant(d, "PRIORITY_NORMAL",SWIG_From_int(static_cast< int >(agora::rtc::PRIORITY_NORMAL)));
  SWIG_Python_SetConstant(d, "CONNECTION_STATE_DISCONNECTED",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_STATE_DISCONNECTED)));
  SWIG_Python_SetConstant(d, "CONNECTION_STATE_CONNECTING",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_STATE_CONNECTING)));
  SWIG_Python_SetConstant(d, "CONNECTION_STATE_CONNECTED",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_STATE_CONNECTED)));
  SWIG_Python_SetConstant(d, "CONNECTION_STATE_RECONNECTING",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_STATE_RECONNECTING)));
  SWIG_Python_SetConstant(d, "CONNECTION_STATE_FAILED",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_STATE_FAILED)));
  SWIG_Python_SetConstant(d, "CONNECTION_CHANGED_CONNECTING",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_CHANGED_CONNECTING)));
  SWIG_Python_SetConstant(d, "CONNECTION_CHANGED_JOIN_SUCCESS",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_CHANGED_JOIN_SUCCESS)));
  SWIG_Python_SetConstant(d, "CONNECTION_CHANGED_INTERRUPTED",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_CHANGED_INTERRUPTED)));
  SWIG_Python_SetConstant(d, "CONNECTION_CHANGED_BANNED_BY_SERVER",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_CHANGED_BANNED_BY_SERVER)));
  SWIG_Python_SetConstant(d, "CONNECTION_CHANGED_JOIN_FAILED",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_CHANGED_JOIN_FAILED)));
  SWIG_Python_SetConstant(d, "CONNECTION_CHANGED_LEAVE_CHANNEL",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_CHANGED_LEAVE_CHANNEL)));
  SWIG_Python_SetConstant(d, "CONNECTION_CHANGED_INVALID_APP_ID",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_CHANGED_INVALID_APP_ID)));
  SWIG_Python_SetConstant(d, "CONNECTION_CHANGED_INVALID_CHANNEL_NAME",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_CHANGED_INVALID_CHANNEL_NAME)));
  SWIG_Python_SetConstant(d, "CONNECTION_CHANGED_INVALID_TOKEN",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_CHANGED_INVALID_TOKEN)));
  SWIG_Python_SetConstant(d, "CONNECTION_CHANGED_TOKEN_EXPIRED",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_CHANGED_TOKEN_EXPIRED)));
  SWIG_Python_SetConstant(d, "CONNECTION_CHANGED_REJECTED_BY_SERVER",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_CHANGED_REJECTED_BY_SERVER)));
  SWIG_Python_SetConstant(d, "CONNECTION_CHANGED_SETTING_PROXY_SERVER",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_CHANGED_SETTING_PROXY_SERVER)));
  SWIG_Python_SetConstant(d, "CONNECTION_CHANGED_RENEW_TOKEN",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_CHANGED_RENEW_TOKEN)));
  SWIG_Python_SetConstant(d, "CONNECTION_CHANGED_CLIENT_IP_ADDRESS_CHANGED",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_CHANGED_CLIENT_IP_ADDRESS_CHANGED)));
  SWIG_Python_SetConstant(d, "CONNECTION_CHANGED_KEEP_ALIVE_TIMEOUT",SWIG_From_int(static_cast< int >(agora::rtc::CONNECTION_CHANGED_KEEP_ALIVE_TIMEOUT)));
  SWIG_Python_SetConstant(d, "NETWORK_TYPE_UNKNOWN",SWIG_From_int(static_cast< int >(agora::rtc::NETWORK_TYPE_UNKNOWN)));
  SWIG_Python_SetConstant(d, "NETWORK_TYPE_DISCONNECTED",SWIG_From_int(static_cast< int >(agora::rtc::NETWORK_TYPE_DISCONNECTED)));
  SWIG_Python_SetConstant(d, "NETWORK_TYPE_LAN",SWIG_From_int(static_cast< int >(agora::rtc::NETWORK_TYPE_LAN)));
  SWIG_Python_SetConstant(d, "NETWORK_TYPE_WIFI",SWIG_From_int(static_cast< int >(agora::rtc::NETWORK_TYPE_WIFI)));
  SWIG_Python_SetConstant(d, "NETWORK_TYPE_MOBILE_2G",SWIG_From_int(static_cast< int >(agora::rtc::NETWORK_TYPE_MOBILE_2G)));
  SWIG_Python_SetConstant(d, "NETWORK_TYPE_MOBILE_3G",SWIG_From_int(static_cast< int >(agora::rtc::NETWORK_TYPE_MOBILE_3G)));
  SWIG_Python_SetConstant(d, "NETWORK_TYPE_MOBILE_4G",SWIG_From_int(static_cast< int >(agora::rtc::NETWORK_TYPE_MOBILE_4G)));
  SWIG_Python_SetConstant(d, "LASTMILE_PROBE_RESULT_COMPLETE",SWIG_From_int(static_cast< int >(agora::rtc::LASTMILE_PROBE_RESULT_COMPLETE)));
  SWIG_Python_SetConstant(d, "LASTMILE_PROBE_RESULT_INCOMPLETE_NO_BWE",SWIG_From_int(static_cast< int >(agora::rtc::LASTMILE_PROBE_RESULT_INCOMPLETE_NO_BWE)));
  SWIG_Python_SetConstant(d, "LASTMILE_PROBE_RESULT_UNAVAILABLE",SWIG_From_int(static_cast< int >(agora::rtc::LASTMILE_PROBE_RESULT_UNAVAILABLE)));
  SWIG_Python_SetConstant(d, "AUDIO_ROUTE_DEFAULT",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_ROUTE_DEFAULT)));
  SWIG_Python_SetConstant(d, "AUDIO_ROUTE_HEADSET",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_ROUTE_HEADSET)));
  SWIG_Python_SetConstant(d, "AUDIO_ROUTE_EARPIECE",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_ROUTE_EARPIECE)));
  SWIG_Python_SetConstant(d, "AUDIO_ROUTE_HEADSET_NO_MIC",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_ROUTE_HEADSET_NO_MIC)));
  SWIG_Python_SetConstant(d, "AUDIO_ROUTE_SPEAKERPHONE",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_ROUTE_SPEAKERPHONE)));
  SWIG_Python_SetConstant(d, "AUDIO_ROUTE_LOUDSPEAKER",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_ROUTE_LOUDSPEAKER)));
  SWIG_Python_SetConstant(d, "AUDIO_ROUTE_BLUETOOTH",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_ROUTE_BLUETOOTH)));
  SWIG_Python_SetConstant(d, "AUDIO_ROUTE_USB",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_ROUTE_USB)));
  SWIG_Python_SetConstant(d, "AUDIO_ROUTE_HDMI",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_ROUTE_HDMI)));
  SWIG_Python_SetConstant(d, "AUDIO_ROUTE_DISPLAYPORT",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_ROUTE_DISPLAYPORT)));
  SWIG_Python_SetConstant(d, "AUDIO_ROUTE_AIRPLAY",SWIG_From_int(static_cast< int >(agora::rtc::AUDIO_ROUTE_AIRPLAY)));
  SWIG_Python_SetConstant(d, "ADAPT_NONE",SWIG_From_int(static_cast< int >(agora::rtc::ADAPT_NONE)));
  SWIG_Python_SetConstant(d, "ADAPT_UP_BANDWIDTH",SWIG_From_int(static_cast< int >(agora::rtc::ADAPT_UP_BANDWIDTH)));
  SWIG_Python_SetConstant(d, "ADAPT_DOWN_BANDWIDTH",SWIG_From_int(static_cast< int >(agora::rtc::ADAPT_DOWN_BANDWIDTH)));
  SWIG_Python_SetConstant(d, "RELAY_OK",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_OK)));
  SWIG_Python_SetConstant(d, "RELAY_ERROR_SERVER_ERROR_RESPONSE",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_ERROR_SERVER_ERROR_RESPONSE)));
  SWIG_Python_SetConstant(d, "RELAY_ERROR_SERVER_NO_RESPONSE",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_ERROR_SERVER_NO_RESPONSE)));
  SWIG_Python_SetConstant(d, "RELAY_ERROR_NO_RESOURCE_AVAILABLE",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_ERROR_NO_RESOURCE_AVAILABLE)));
  SWIG_Python_SetConstant(d, "RELAY_ERROR_FAILED_JOIN_SRC",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_ERROR_FAILED_JOIN_SRC)));
  SWIG_Python_SetConstant(d, "RELAY_ERROR_FAILED_JOIN_DEST",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_ERROR_FAILED_JOIN_DEST)));
  SWIG_Python_SetConstant(d, "RELAY_ERROR_FAILED_PACKET_RECEIVED_FROM_SRC",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_ERROR_FAILED_PACKET_RECEIVED_FROM_SRC)));
  SWIG_Python_SetConstant(d, "RELAY_ERROR_FAILED_PACKET_SENT_TO_DEST",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_ERROR_FAILED_PACKET_SENT_TO_DEST)));
  SWIG_Python_SetConstant(d, "RELAY_ERROR_SERVER_CONNECTION_LOST",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_ERROR_SERVER_CONNECTION_LOST)));
  SWIG_Python_SetConstant(d, "RELAY_ERROR_INTERNAL_ERROR",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_ERROR_INTERNAL_ERROR)));
  SWIG_Python_SetConstant(d, "RELAY_ERROR_SRC_TOKEN_EXPIRED",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_ERROR_SRC_TOKEN_EXPIRED)));
  SWIG_Python_SetConstant(d, "RELAY_ERROR_DEST_TOKEN_EXPIRED",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_ERROR_DEST_TOKEN_EXPIRED)));
  SWIG_Python_SetConstant(d, "RELAY_EVENT_NETWORK_DISCONNECTED",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_EVENT_NETWORK_DISCONNECTED)));
  SWIG_Python_SetConstant(d, "RELAY_EVENT_NETWORK_CONNECTED",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_EVENT_NETWORK_CONNECTED)));
  SWIG_Python_SetConstant(d, "RELAY_EVENT_PACKET_JOINED_SRC_CHANNEL",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_EVENT_PACKET_JOINED_SRC_CHANNEL)));
  SWIG_Python_SetConstant(d, "RELAY_EVENT_PACKET_JOINED_DEST_CHANNEL",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_EVENT_PACKET_JOINED_DEST_CHANNEL)));
  SWIG_Python_SetConstant(d, "RELAY_EVENT_PACKET_SENT_TO_DEST_CHANNEL",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_EVENT_PACKET_SENT_TO_DEST_CHANNEL)));
  SWIG_Python_SetConstant(d, "RELAY_EVENT_PACKET_RECEIVED_VIDEO_FROM_SRC",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_EVENT_PACKET_RECEIVED_VIDEO_FROM_SRC)));
  SWIG_Python_SetConstant(d, "RELAY_EVENT_PACKET_RECEIVED_AUDIO_FROM_SRC",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_EVENT_PACKET_RECEIVED_AUDIO_FROM_SRC)));
  SWIG_Python_SetConstant(d, "RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL)));
  SWIG_Python_SetConstant(d, "RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_REFUSED",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_REFUSED)));
  SWIG_Python_SetConstant(d, "RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_NOT_CHANGE",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_NOT_CHANGE)));
  SWIG_Python_SetConstant(d, "RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_IS_NULL",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_IS_NULL)));
  SWIG_Python_SetConstant(d, "RELAY_EVENT_VIDEO_PROFILE_UPDATE",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_EVENT_VIDEO_PROFILE_UPDATE)));
  SWIG_Python_SetConstant(d, "RELAY_STATE_IDLE",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_STATE_IDLE)));
  SWIG_Python_SetConstant(d, "RELAY_STATE_CONNECTING",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_STATE_CONNECTING)));
  SWIG_Python_SetConstant(d, "RELAY_STATE_RUNNING",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_STATE_RUNNING)));
  SWIG_Python_SetConstant(d, "RELAY_STATE_FAILURE",SWIG_From_int(static_cast< int >(agora::rtc::RELAY_STATE_FAILURE)));
  globals = SWIG_globals();
  if (!globals) {
    PyErr_SetString(PyExc_TypeError, "Failure to create SWIG globals.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  PyDict_SetItemString(md, "cvar", globals);
  Py_DECREF(globals);
  SWIG_addvarlink(globals, "STANDARD_BITRATE", Swig_var_STANDARD_BITRATE_get, Swig_var_STANDARD_BITRATE_set);
  SWIG_addvarlink(globals, "COMPATIBLE_BITRATE", Swig_var_COMPATIBLE_BITRATE_get, Swig_var_COMPATIBLE_BITRATE_set);
  SWIG_addvarlink(globals, "DEFAULT_MIN_BITRATE", Swig_var_DEFAULT_MIN_BITRATE_get, Swig_var_DEFAULT_MIN_BITRATE_set);
  SWIG_Python_SetConstant(d, "RTMP_STREAM_LIFE_CYCLE_BIND2CHANNEL",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAM_LIFE_CYCLE_BIND2CHANNEL)));
  SWIG_Python_SetConstant(d, "RTMP_STREAM_LIFE_CYCLE_BIND2OWNER",SWIG_From_int(static_cast< int >(agora::rtc::RTMP_STREAM_LIFE_CYCLE_BIND2OWNER)));
  SWIG_Python_SetConstant(d, "CONTENT_HINT_NONE",SWIG_From_int(static_cast< int >(agora::rtc::CONTENT_HINT_NONE)));
  SWIG_Python_SetConstant(d, "CONTENT_HINT_MOTION",SWIG_From_int(static_cast< int >(agora::rtc::CONTENT_HINT_MOTION)));
  SWIG_Python_SetConstant(d, "CONTENT_HINT_DETAILS",SWIG_From_int(static_cast< int >(agora::rtc::CONTENT_HINT_DETAILS)));
  SWIG_Python_SetConstant(d, "BeautyOptions_LIGHTENING_CONTRAST_LOW",SWIG_From_int(static_cast< int >(agora::rtc::BeautyOptions::LIGHTENING_CONTRAST_LOW)));
  SWIG_Python_SetConstant(d, "BeautyOptions_LIGHTENING_CONTRAST_NORMAL",SWIG_From_int(static_cast< int >(agora::rtc::BeautyOptions::LIGHTENING_CONTRAST_NORMAL)));
  SWIG_Python_SetConstant(d, "BeautyOptions_LIGHTENING_CONTRAST_HIGH",SWIG_From_int(static_cast< int >(agora::rtc::BeautyOptions::LIGHTENING_CONTRAST_HIGH)));
  SWIG_Python_SetConstant(d, "AREA_CODE_CN",SWIG_From_int(static_cast< int >(agora::rtc::AREA_CODE_CN)));
  SWIG_Python_SetConstant(d, "AREA_CODE_NA",SWIG_From_int(static_cast< int >(agora::rtc::AREA_CODE_NA)));
  SWIG_Python_SetConstant(d, "AREA_CODE_EU",SWIG_From_int(static_cast< int >(agora::rtc::AREA_CODE_EU)));
  SWIG_Python_SetConstant(d, "AREA_CODE_AS",SWIG_From_int(static_cast< int >(agora::rtc::AREA_CODE_AS)));
  SWIG_Python_SetConstant(d, "AREA_CODE_JP",SWIG_From_int(static_cast< int >(agora::rtc::AREA_CODE_JP)));
  SWIG_Python_SetConstant(d, "AREA_CODE_IN",SWIG_From_int(static_cast< int >(agora::rtc::AREA_CODE_IN)));
  SWIG_Python_SetConstant(d, "AREA_CODE_GLOB",SWIG_From_int(static_cast< int >(agora::rtc::AREA_CODE_GLOB)));
  
  /* Initialize threading */
  SWIG_PYTHON_INITIALIZE_THREADS;
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

